2018-08-31 15:22:07,701  Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is com.alibaba.dubbo.rpc.RpcException: Failed to invoke the method selectMe in the service com.tyut.user.service.UserService. Tried 3 times of the providers [172.31.234.97:20880, 192.168.27.1:20880] (2/2) from the registry 47.104.209.96:2181 on the consumer 192.168.27.1 using the dubbo version 2.0.1. Last error is: Failed to invoke remote method: selectMe, provider: dubbo://172.31.234.97:20880/com.tyut.user.service.UserService?anyhost=true&application=web-server&check=false&dubbo=2.0.1&generic=false&interface=com.tyut.user.service.UserService&methods=uploadFile,findPasswd,isValid,update,insert,selectById,isExistPhone,selectPasswdByPhone,updatePasswd,uploadPortrait,selectMe,selectPasswdByEmail,isExistEmail&pid=18340&register.ip=192.168.27.1&remote.timestamp=1533821272095&revision=2.0.0&side=consumer&timestamp=1535699964828&version=2.0.0, cause: message can not send, because channel is closed . url:dubbo://172.31.234.97:20880/com.tyut.user.service.UserEduService?anyhost=true&application=web-server&check=false&codec=dubbo&dubbo=2.0.1&generic=false&heartbeat=60000&interface=com.tyut.user.service.UserEduService&methods=getAll&pid=18340&register.ip=192.168.27.1&remote.timestamp=1533821271908&revision=2.0.0&side=consumer&timestamp=1535699961076&version=2.0.0] with root cause
com.alibaba.dubbo.remoting.RemotingException: message can not send, because channel is closed . url:dubbo://172.31.234.97:20880/com.tyut.user.service.UserEduService?anyhost=true&application=web-server&check=false&codec=dubbo&dubbo=2.0.1&generic=false&heartbeat=60000&interface=com.tyut.user.service.UserEduService&methods=getAll&pid=18340&register.ip=192.168.27.1&remote.timestamp=1533821271908&revision=2.0.0&side=consumer&timestamp=1535699961076&version=2.0.0
	at com.alibaba.dubbo.remoting.transport.AbstractClient.send(AbstractClient.java:254)
	at com.alibaba.dubbo.remoting.transport.AbstractPeer.send(AbstractPeer.java:52)
	at com.alibaba.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(HeaderExchangeChannel.java:111)
	at com.alibaba.dubbo.remoting.exchange.support.header.HeaderExchangeClient.request(HeaderExchangeClient.java:86)
	at com.alibaba.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient.request(ReferenceCountExchangeClient.java:77)
	at com.alibaba.dubbo.rpc.protocol.dubbo.DubboInvoker.doInvoke(DubboInvoker.java:95)
	at com.alibaba.dubbo.rpc.protocol.AbstractInvoker.invoke(AbstractInvoker.java:142)
	at com.alibaba.dubbo.rpc.listener.ListenerInvokerWrapper.invoke(ListenerInvokerWrapper.java:73)
	at com.alibaba.dubbo.monitor.support.MonitorFilter.invoke(MonitorFilter.java:74)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.protocol.dubbo.filter.FutureFilter.invoke(FutureFilter.java:53)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.filter.ConsumerContextFilter.invoke(ConsumerContextFilter.java:47)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.protocol.InvokerWrapper.invoke(InvokerWrapper.java:52)
	at com.alibaba.dubbo.rpc.cluster.support.FailoverClusterInvoker.doInvoke(FailoverClusterInvoker.java:77)
	at com.alibaba.dubbo.rpc.cluster.support.AbstractClusterInvoker.invoke(AbstractClusterInvoker.java:232)
	at com.alibaba.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker.invoke(MockClusterInvoker.java:70)
	at com.alibaba.dubbo.rpc.proxy.InvokerInvocationHandler.invoke(InvokerInvocationHandler.java:51)
	at com.alibaba.dubbo.common.bytecode.proxy3.selectMe(proxy3.java)
	at com.tyut.web.controller.UserController.getCurrentUser(UserController.java:52)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:133)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:97)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:635)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:317)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:114)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationProcessingFilter.doFilter(OAuth2AuthenticationProcessingFilter.java:176)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:64)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:214)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:177)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:347)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:263)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:108)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:478)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1459)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2018-08-31 15:27:34,065  Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is com.alibaba.dubbo.rpc.RpcException: Failed to invoke the method selectMe in the service com.tyut.user.service.UserService. Tried 3 times of the providers [172.31.234.97:20880, 192.168.27.1:20880] (2/2) from the registry 47.104.209.96:2181 on the consumer 192.168.27.1 using the dubbo version 2.0.1. Last error is: Failed to invoke remote method: selectMe, provider: dubbo://172.31.234.97:20880/com.tyut.user.service.UserService?anyhost=true&application=web-server&check=false&dubbo=2.0.1&generic=false&interface=com.tyut.user.service.UserService&methods=uploadFile,findPasswd,isValid,update,insert,selectById,isExistPhone,selectPasswdByPhone,updatePasswd,uploadPortrait,selectMe,selectPasswdByEmail,isExistEmail&pid=18340&register.ip=192.168.27.1&remote.timestamp=1533821272095&revision=2.0.0&side=consumer&timestamp=1535699964828&version=2.0.0, cause: message can not send, because channel is closed . url:dubbo://172.31.234.97:20880/com.tyut.user.service.UserEduService?anyhost=true&application=web-server&check=false&codec=dubbo&dubbo=2.0.1&generic=false&heartbeat=60000&interface=com.tyut.user.service.UserEduService&methods=getAll&pid=18340&register.ip=192.168.27.1&remote.timestamp=1533821271908&revision=2.0.0&side=consumer&timestamp=1535699961076&version=2.0.0] with root cause
com.alibaba.dubbo.remoting.RemotingException: message can not send, because channel is closed . url:dubbo://172.31.234.97:20880/com.tyut.user.service.UserEduService?anyhost=true&application=web-server&check=false&codec=dubbo&dubbo=2.0.1&generic=false&heartbeat=60000&interface=com.tyut.user.service.UserEduService&methods=getAll&pid=18340&register.ip=192.168.27.1&remote.timestamp=1533821271908&revision=2.0.0&side=consumer&timestamp=1535699961076&version=2.0.0
	at com.alibaba.dubbo.remoting.transport.AbstractClient.send(AbstractClient.java:254)
	at com.alibaba.dubbo.remoting.transport.AbstractPeer.send(AbstractPeer.java:52)
	at com.alibaba.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(HeaderExchangeChannel.java:111)
	at com.alibaba.dubbo.remoting.exchange.support.header.HeaderExchangeClient.request(HeaderExchangeClient.java:86)
	at com.alibaba.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient.request(ReferenceCountExchangeClient.java:77)
	at com.alibaba.dubbo.rpc.protocol.dubbo.DubboInvoker.doInvoke(DubboInvoker.java:95)
	at com.alibaba.dubbo.rpc.protocol.AbstractInvoker.invoke(AbstractInvoker.java:142)
	at com.alibaba.dubbo.rpc.listener.ListenerInvokerWrapper.invoke(ListenerInvokerWrapper.java:73)
	at com.alibaba.dubbo.monitor.support.MonitorFilter.invoke(MonitorFilter.java:74)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.protocol.dubbo.filter.FutureFilter.invoke(FutureFilter.java:53)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.filter.ConsumerContextFilter.invoke(ConsumerContextFilter.java:47)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.protocol.InvokerWrapper.invoke(InvokerWrapper.java:52)
	at com.alibaba.dubbo.rpc.cluster.support.FailoverClusterInvoker.doInvoke(FailoverClusterInvoker.java:77)
	at com.alibaba.dubbo.rpc.cluster.support.AbstractClusterInvoker.invoke(AbstractClusterInvoker.java:232)
	at com.alibaba.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker.invoke(MockClusterInvoker.java:70)
	at com.alibaba.dubbo.rpc.proxy.InvokerInvocationHandler.invoke(InvokerInvocationHandler.java:51)
	at com.alibaba.dubbo.common.bytecode.proxy3.selectMe(proxy3.java)
	at com.tyut.web.controller.UserController.getCurrentUser(UserController.java:52)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:133)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:97)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:635)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:317)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:114)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationProcessingFilter.doFilter(OAuth2AuthenticationProcessingFilter.java:176)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:64)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:214)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:177)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:347)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:263)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:108)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:478)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1459)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2018-08-31 15:34:22,598   [DUBBO] client reconnect to 172.31.234.97:20883 find error . url: dubbo://172.31.234.97:20883/com.tyut.notice.service.CompetitionService?anyhost=true&application=web-server&check=false&codec=dubbo&dubbo=2.5.3&heartbeat=60000&interface=com.tyut.notice.service.CompetitionService&methods=selectTitleList,selectById&pid=18340&register.ip=192.168.27.1&remote.timestamp=1533821264375&revision=2.0.0&side=consumer&timestamp=1535699958753&version=2.0.0, dubbo version: 2.0.1, current host: 192.168.27.1
com.alibaba.dubbo.remoting.RemotingException: client(url: dubbo://172.31.234.97:20883/com.tyut.notice.service.CompetitionService?anyhost=true&application=web-server&check=false&codec=dubbo&dubbo=2.5.3&heartbeat=60000&interface=com.tyut.notice.service.CompetitionService&methods=selectTitleList,selectById&pid=18340&register.ip=192.168.27.1&remote.timestamp=1533821264375&revision=2.0.0&side=consumer&timestamp=1535699958753&version=2.0.0) failed to connect to server /172.31.234.97:20883, error message is:connection timed out
	at com.alibaba.dubbo.remoting.transport.netty.NettyClient.doConnect(NettyClient.java:122)
	at com.alibaba.dubbo.remoting.transport.AbstractClient.connect(AbstractClient.java:266)
	at com.alibaba.dubbo.remoting.transport.AbstractClient$1.run(AbstractClient.java:155)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.net.ConnectException: connection timed out
	at org.jboss.netty.channel.socket.nio.NioClientSocketPipelineSink$Boss.processConnectTimeout(NioClientSocketPipelineSink.java:371)
	at org.jboss.netty.channel.socket.nio.NioClientSocketPipelineSink$Boss.run(NioClientSocketPipelineSink.java:283)
	... 3 common frames omitted
2018-08-31 15:34:22,598   [DUBBO] client reconnect to 172.31.234.97:20880 find error . url: dubbo://172.31.234.97:20880/com.tyut.user.service.UserEduService?anyhost=true&application=web-server&check=false&codec=dubbo&dubbo=2.0.1&generic=false&heartbeat=60000&interface=com.tyut.user.service.UserEduService&methods=getAll&pid=18340&register.ip=192.168.27.1&remote.timestamp=1533821271908&revision=2.0.0&side=consumer&timestamp=1535699961076&version=2.0.0, dubbo version: 2.0.1, current host: 192.168.27.1
com.alibaba.dubbo.remoting.RemotingException: client(url: dubbo://172.31.234.97:20880/com.tyut.user.service.UserEduService?anyhost=true&application=web-server&check=false&codec=dubbo&dubbo=2.0.1&generic=false&heartbeat=60000&interface=com.tyut.user.service.UserEduService&methods=getAll&pid=18340&register.ip=192.168.27.1&remote.timestamp=1533821271908&revision=2.0.0&side=consumer&timestamp=1535699961076&version=2.0.0) failed to connect to server /172.31.234.97:20880, error message is:connection timed out
	at com.alibaba.dubbo.remoting.transport.netty.NettyClient.doConnect(NettyClient.java:122)
	at com.alibaba.dubbo.remoting.transport.AbstractClient.connect(AbstractClient.java:266)
	at com.alibaba.dubbo.remoting.transport.AbstractClient$1.run(AbstractClient.java:155)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.net.ConnectException: connection timed out
	at org.jboss.netty.channel.socket.nio.NioClientSocketPipelineSink$Boss.processConnectTimeout(NioClientSocketPipelineSink.java:371)
	at org.jboss.netty.channel.socket.nio.NioClientSocketPipelineSink$Boss.run(NioClientSocketPipelineSink.java:283)
	... 3 common frames omitted
2018-08-31 15:34:29,620   [DUBBO] client reconnect to 172.31.234.97:20882 find error . url: dubbo://172.31.234.97:20882/com.tyut.school.service.SchoolService?anyhost=true&application=web-server&check=false&codec=dubbo&dubbo=2.5.3&heartbeat=60000&interface=com.tyut.school.service.SchoolService&methods=selectAll,update,insert,selectById,selectLike&pid=18340&register.ip=192.168.27.1&remote.timestamp=1533821256721&revision=2.0.1&side=consumer&timestamp=1535699967492&version=2.0.1, dubbo version: 2.0.1, current host: 192.168.27.1
com.alibaba.dubbo.remoting.RemotingException: client(url: dubbo://172.31.234.97:20882/com.tyut.school.service.SchoolService?anyhost=true&application=web-server&check=false&codec=dubbo&dubbo=2.5.3&heartbeat=60000&interface=com.tyut.school.service.SchoolService&methods=selectAll,update,insert,selectById,selectLike&pid=18340&register.ip=192.168.27.1&remote.timestamp=1533821256721&revision=2.0.1&side=consumer&timestamp=1535699967492&version=2.0.1) failed to connect to server /172.31.234.97:20882, error message is:connection timed out
	at com.alibaba.dubbo.remoting.transport.netty.NettyClient.doConnect(NettyClient.java:122)
	at com.alibaba.dubbo.remoting.transport.AbstractClient.connect(AbstractClient.java:266)
	at com.alibaba.dubbo.remoting.transport.AbstractClient$1.run(AbstractClient.java:155)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.net.ConnectException: connection timed out
	at org.jboss.netty.channel.socket.nio.NioClientSocketPipelineSink$Boss.processConnectTimeout(NioClientSocketPipelineSink.java:371)
	at org.jboss.netty.channel.socket.nio.NioClientSocketPipelineSink$Boss.run(NioClientSocketPipelineSink.java:283)
	... 3 common frames omitted
2018-08-31 15:35:19,461  Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is com.alibaba.dubbo.rpc.RpcException: Failed to invoke the method selectMe in the service com.tyut.user.service.UserService. Tried 3 times of the providers [172.31.234.97:20880, 192.168.27.1:20880] (2/2) from the registry 47.104.209.96:2181 on the consumer 192.168.27.1 using the dubbo version 2.0.1. Last error is: Failed to invoke remote method: selectMe, provider: dubbo://172.31.234.97:20880/com.tyut.user.service.UserService?anyhost=true&application=web-server&check=false&dubbo=2.0.1&generic=false&interface=com.tyut.user.service.UserService&methods=uploadFile,findPasswd,isValid,update,insert,selectById,isExistPhone,selectPasswdByPhone,updatePasswd,uploadPortrait,selectMe,selectPasswdByEmail,isExistEmail&pid=18340&register.ip=192.168.27.1&remote.timestamp=1533821272095&revision=2.0.0&side=consumer&timestamp=1535699964828&version=2.0.0, cause: message can not send, because channel is closed . url:dubbo://172.31.234.97:20880/com.tyut.user.service.UserEduService?anyhost=true&application=web-server&check=false&codec=dubbo&dubbo=2.0.1&generic=false&heartbeat=60000&interface=com.tyut.user.service.UserEduService&methods=getAll&pid=18340&register.ip=192.168.27.1&remote.timestamp=1533821271908&revision=2.0.0&side=consumer&timestamp=1535699961076&version=2.0.0] with root cause
com.alibaba.dubbo.remoting.RemotingException: message can not send, because channel is closed . url:dubbo://172.31.234.97:20880/com.tyut.user.service.UserEduService?anyhost=true&application=web-server&check=false&codec=dubbo&dubbo=2.0.1&generic=false&heartbeat=60000&interface=com.tyut.user.service.UserEduService&methods=getAll&pid=18340&register.ip=192.168.27.1&remote.timestamp=1533821271908&revision=2.0.0&side=consumer&timestamp=1535699961076&version=2.0.0
	at com.alibaba.dubbo.remoting.transport.AbstractClient.send(AbstractClient.java:254)
	at com.alibaba.dubbo.remoting.transport.AbstractPeer.send(AbstractPeer.java:52)
	at com.alibaba.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(HeaderExchangeChannel.java:111)
	at com.alibaba.dubbo.remoting.exchange.support.header.HeaderExchangeClient.request(HeaderExchangeClient.java:86)
	at com.alibaba.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient.request(ReferenceCountExchangeClient.java:77)
	at com.alibaba.dubbo.rpc.protocol.dubbo.DubboInvoker.doInvoke(DubboInvoker.java:95)
	at com.alibaba.dubbo.rpc.protocol.AbstractInvoker.invoke(AbstractInvoker.java:142)
	at com.alibaba.dubbo.rpc.listener.ListenerInvokerWrapper.invoke(ListenerInvokerWrapper.java:73)
	at com.alibaba.dubbo.monitor.support.MonitorFilter.invoke(MonitorFilter.java:74)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.protocol.dubbo.filter.FutureFilter.invoke(FutureFilter.java:53)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.filter.ConsumerContextFilter.invoke(ConsumerContextFilter.java:47)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.protocol.InvokerWrapper.invoke(InvokerWrapper.java:52)
	at com.alibaba.dubbo.rpc.cluster.support.FailoverClusterInvoker.doInvoke(FailoverClusterInvoker.java:77)
	at com.alibaba.dubbo.rpc.cluster.support.AbstractClusterInvoker.invoke(AbstractClusterInvoker.java:232)
	at com.alibaba.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker.invoke(MockClusterInvoker.java:70)
	at com.alibaba.dubbo.rpc.proxy.InvokerInvocationHandler.invoke(InvokerInvocationHandler.java:51)
	at com.alibaba.dubbo.common.bytecode.proxy3.selectMe(proxy3.java)
	at com.tyut.web.controller.UserController.getCurrentUser(UserController.java:52)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:133)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:97)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:635)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:317)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:114)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationProcessingFilter.doFilter(OAuth2AuthenticationProcessingFilter.java:176)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:64)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:214)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:177)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:347)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:263)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:108)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:478)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1459)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2018-08-31 15:38:16,006  Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is com.alibaba.dubbo.rpc.RpcException: Failed to invoke the method agreeSomeone in the service com.tyut.user.service.GroupMemberService. Tried 3 times of the providers [172.31.234.97:20880, 192.168.27.1:20880] (2/2) from the registry 47.104.209.96:2181 on the consumer 192.168.27.1 using the dubbo version 2.0.1. Last error is: Failed to invoke remote method: agreeSomeone, provider: dubbo://172.31.234.97:20880/com.tyut.user.service.GroupMemberService?anyhost=true&application=web-server&check=false&dubbo=2.0.1&generic=false&interface=com.tyut.user.service.GroupMemberService&methods=findGroupsByGroupId,removeSomeone,agreeSomeone,join,isExsitSomeone&pid=20652&register.ip=192.168.27.1&remote.timestamp=1533821270191&revision=2.0.0&side=consumer&timestamp=1535700968655&version=2.0.0, cause: message can not send, because channel is closed . url:dubbo://172.31.234.97:20880/com.tyut.user.service.UserEduService?anyhost=true&application=web-server&check=false&codec=dubbo&dubbo=2.0.1&generic=false&heartbeat=60000&interface=com.tyut.user.service.UserEduService&methods=getAll&pid=20652&register.ip=192.168.27.1&remote.timestamp=1533821271908&revision=2.0.0&side=consumer&timestamp=1535700955234&version=2.0.0] with root cause
com.alibaba.dubbo.remoting.RemotingException: message can not send, because channel is closed . url:dubbo://172.31.234.97:20880/com.tyut.user.service.UserEduService?anyhost=true&application=web-server&check=false&codec=dubbo&dubbo=2.0.1&generic=false&heartbeat=60000&interface=com.tyut.user.service.UserEduService&methods=getAll&pid=20652&register.ip=192.168.27.1&remote.timestamp=1533821271908&revision=2.0.0&side=consumer&timestamp=1535700955234&version=2.0.0
	at com.alibaba.dubbo.remoting.transport.AbstractClient.send(AbstractClient.java:254)
	at com.alibaba.dubbo.remoting.transport.AbstractPeer.send(AbstractPeer.java:52)
	at com.alibaba.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(HeaderExchangeChannel.java:111)
	at com.alibaba.dubbo.remoting.exchange.support.header.HeaderExchangeClient.request(HeaderExchangeClient.java:86)
	at com.alibaba.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient.request(ReferenceCountExchangeClient.java:77)
	at com.alibaba.dubbo.rpc.protocol.dubbo.DubboInvoker.doInvoke(DubboInvoker.java:95)
	at com.alibaba.dubbo.rpc.protocol.AbstractInvoker.invoke(AbstractInvoker.java:142)
	at com.alibaba.dubbo.rpc.listener.ListenerInvokerWrapper.invoke(ListenerInvokerWrapper.java:73)
	at com.alibaba.dubbo.monitor.support.MonitorFilter.invoke(MonitorFilter.java:74)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.protocol.dubbo.filter.FutureFilter.invoke(FutureFilter.java:53)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.filter.ConsumerContextFilter.invoke(ConsumerContextFilter.java:47)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.protocol.InvokerWrapper.invoke(InvokerWrapper.java:52)
	at com.alibaba.dubbo.rpc.cluster.support.FailoverClusterInvoker.doInvoke(FailoverClusterInvoker.java:77)
	at com.alibaba.dubbo.rpc.cluster.support.AbstractClusterInvoker.invoke(AbstractClusterInvoker.java:232)
	at com.alibaba.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker.invoke(MockClusterInvoker.java:70)
	at com.alibaba.dubbo.rpc.proxy.InvokerInvocationHandler.invoke(InvokerInvocationHandler.java:51)
	at com.alibaba.dubbo.common.bytecode.proxy2.agreeSomeone(proxy2.java)
	at com.tyut.web.controller.GroupController.agreeSomeone(GroupController.java:71)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:133)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:97)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:872)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:317)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:114)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationProcessingFilter.doFilter(OAuth2AuthenticationProcessingFilter.java:176)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:64)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:214)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:177)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:347)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:263)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:108)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:478)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1459)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2018-08-31 15:50:55,350   [DUBBO] client reconnect to 172.31.234.97:20883 find error . url: dubbo://172.31.234.97:20883/com.tyut.notice.service.CompetitionService?anyhost=true&application=web-server&check=false&codec=dubbo&dubbo=2.5.3&heartbeat=60000&interface=com.tyut.notice.service.CompetitionService&methods=selectTitleList,selectById&pid=20652&register.ip=192.168.27.1&remote.timestamp=1533821264375&revision=2.0.0&side=consumer&timestamp=1535700942073&version=2.0.0, dubbo version: 2.0.1, current host: 192.168.27.1
com.alibaba.dubbo.remoting.RemotingException: client(url: dubbo://172.31.234.97:20883/com.tyut.notice.service.CompetitionService?anyhost=true&application=web-server&check=false&codec=dubbo&dubbo=2.5.3&heartbeat=60000&interface=com.tyut.notice.service.CompetitionService&methods=selectTitleList,selectById&pid=20652&register.ip=192.168.27.1&remote.timestamp=1533821264375&revision=2.0.0&side=consumer&timestamp=1535700942073&version=2.0.0) failed to connect to server /172.31.234.97:20883, error message is:connection timed out
	at com.alibaba.dubbo.remoting.transport.netty.NettyClient.doConnect(NettyClient.java:122)
	at com.alibaba.dubbo.remoting.transport.AbstractClient.connect(AbstractClient.java:266)
	at com.alibaba.dubbo.remoting.transport.AbstractClient$1.run(AbstractClient.java:155)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.net.ConnectException: connection timed out
	at org.jboss.netty.channel.socket.nio.NioClientSocketPipelineSink$Boss.processConnectTimeout(NioClientSocketPipelineSink.java:371)
	at org.jboss.netty.channel.socket.nio.NioClientSocketPipelineSink$Boss.run(NioClientSocketPipelineSink.java:283)
	... 3 common frames omitted
2018-08-31 15:51:01,357   [DUBBO] client reconnect to 172.31.234.97:20880 find error . url: dubbo://172.31.234.97:20880/com.tyut.user.service.UserEduService?anyhost=true&application=web-server&check=false&codec=dubbo&dubbo=2.0.1&generic=false&heartbeat=60000&interface=com.tyut.user.service.UserEduService&methods=getAll&pid=20652&register.ip=192.168.27.1&remote.timestamp=1533821271908&revision=2.0.0&side=consumer&timestamp=1535700955234&version=2.0.0, dubbo version: 2.0.1, current host: 192.168.27.1
com.alibaba.dubbo.remoting.RemotingException: client(url: dubbo://172.31.234.97:20880/com.tyut.user.service.UserEduService?anyhost=true&application=web-server&check=false&codec=dubbo&dubbo=2.0.1&generic=false&heartbeat=60000&interface=com.tyut.user.service.UserEduService&methods=getAll&pid=20652&register.ip=192.168.27.1&remote.timestamp=1533821271908&revision=2.0.0&side=consumer&timestamp=1535700955234&version=2.0.0) failed to connect to server /172.31.234.97:20880, error message is:connection timed out
	at com.alibaba.dubbo.remoting.transport.netty.NettyClient.doConnect(NettyClient.java:122)
	at com.alibaba.dubbo.remoting.transport.AbstractClient.connect(AbstractClient.java:266)
	at com.alibaba.dubbo.remoting.transport.AbstractClient$1.run(AbstractClient.java:155)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.net.ConnectException: connection timed out
	at org.jboss.netty.channel.socket.nio.NioClientSocketPipelineSink$Boss.processConnectTimeout(NioClientSocketPipelineSink.java:371)
	at org.jboss.netty.channel.socket.nio.NioClientSocketPipelineSink$Boss.run(NioClientSocketPipelineSink.java:283)
	... 3 common frames omitted
2018-08-31 15:51:47,428   [DUBBO] client reconnect to 172.31.234.97:20882 find error . url: dubbo://172.31.234.97:20882/com.tyut.school.service.SchoolService?anyhost=true&application=web-server&check=false&codec=dubbo&dubbo=2.5.3&heartbeat=60000&interface=com.tyut.school.service.SchoolService&methods=selectAll,update,insert,selectById,selectLike&pid=20652&register.ip=192.168.27.1&remote.timestamp=1533821256721&revision=2.0.1&side=consumer&timestamp=1535701001434&version=2.0.1, dubbo version: 2.0.1, current host: 192.168.27.1
com.alibaba.dubbo.remoting.RemotingException: client(url: dubbo://172.31.234.97:20882/com.tyut.school.service.SchoolService?anyhost=true&application=web-server&check=false&codec=dubbo&dubbo=2.5.3&heartbeat=60000&interface=com.tyut.school.service.SchoolService&methods=selectAll,update,insert,selectById,selectLike&pid=20652&register.ip=192.168.27.1&remote.timestamp=1533821256721&revision=2.0.1&side=consumer&timestamp=1535701001434&version=2.0.1) failed to connect to server /172.31.234.97:20882, error message is:connection timed out
	at com.alibaba.dubbo.remoting.transport.netty.NettyClient.doConnect(NettyClient.java:122)
	at com.alibaba.dubbo.remoting.transport.AbstractClient.connect(AbstractClient.java:266)
	at com.alibaba.dubbo.remoting.transport.AbstractClient$1.run(AbstractClient.java:155)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.net.ConnectException: connection timed out
	at org.jboss.netty.channel.socket.nio.NioClientSocketPipelineSink$Boss.processConnectTimeout(NioClientSocketPipelineSink.java:371)
	at org.jboss.netty.channel.socket.nio.NioClientSocketPipelineSink$Boss.run(NioClientSocketPipelineSink.java:283)
	... 3 common frames omitted
2018-08-31 15:52:16,909  An internal error occurred while trying to authenticate the user.
org.springframework.security.authentication.InternalAuthenticationServiceException: 登录账号不存在
	at org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(DaoAuthenticationProvider.java:126)
	at org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider.authenticate(AbstractUserDetailsAuthenticationProvider.java:144)
	at org.springframework.security.authentication.ProviderManager.authenticate(ProviderManager.java:174)
	at org.springframework.security.authentication.ProviderManager.authenticate(ProviderManager.java:199)
	at org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.attemptAuthentication(UsernamePasswordAuthenticationFilter.java:94)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:212)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationProcessingFilter.doFilter(OAuth2AuthenticationProcessingFilter.java:176)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:64)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:214)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:177)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:347)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:263)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:108)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:478)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1459)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.RuntimeException: 登录账号不存在
	at com.tyut.web.controller.MyUserDetailsService.loadUserByUsername(MyUserDetailsService.java:37)
	at org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(DaoAuthenticationProvider.java:114)
	... 56 common frames omitted
2018-08-31 15:56:09,417  Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is com.alibaba.dubbo.rpc.RpcException: Failed to invoke the method uploadPortrait in the service com.tyut.user.service.UserService. Tried 3 times of the providers [172.31.234.97:20880, 192.168.27.1:20880] (2/2) from the registry 47.104.209.96:2181 on the consumer 192.168.27.1 using the dubbo version 2.0.1. Last error is: Failed to invoke remote method: uploadPortrait, provider: dubbo://172.31.234.97:20880/com.tyut.user.service.UserService?anyhost=true&application=web-server&check=false&dubbo=2.0.1&generic=false&interface=com.tyut.user.service.UserService&methods=uploadFile,findPasswd,isValid,update,insert,selectById,isExistPhone,selectPasswdByPhone,updatePasswd,uploadPortrait,selectMe,selectPasswdByEmail,isExistEmail&pid=20652&register.ip=192.168.27.1&remote.timestamp=1533821272095&revision=2.0.0&side=consumer&timestamp=1535700983731&version=2.0.0, cause: message can not send, because channel is closed . url:dubbo://172.31.234.97:20880/com.tyut.user.service.UserEduService?anyhost=true&application=web-server&check=false&codec=dubbo&dubbo=2.0.1&generic=false&heartbeat=60000&interface=com.tyut.user.service.UserEduService&methods=getAll&pid=20652&register.ip=192.168.27.1&remote.timestamp=1533821271908&revision=2.0.0&side=consumer&timestamp=1535700955234&version=2.0.0] with root cause
com.alibaba.dubbo.remoting.RemotingException: message can not send, because channel is closed . url:dubbo://172.31.234.97:20880/com.tyut.user.service.UserEduService?anyhost=true&application=web-server&check=false&codec=dubbo&dubbo=2.0.1&generic=false&heartbeat=60000&interface=com.tyut.user.service.UserEduService&methods=getAll&pid=20652&register.ip=192.168.27.1&remote.timestamp=1533821271908&revision=2.0.0&side=consumer&timestamp=1535700955234&version=2.0.0
	at com.alibaba.dubbo.remoting.transport.AbstractClient.send(AbstractClient.java:254)
	at com.alibaba.dubbo.remoting.transport.AbstractPeer.send(AbstractPeer.java:52)
	at com.alibaba.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(HeaderExchangeChannel.java:111)
	at com.alibaba.dubbo.remoting.exchange.support.header.HeaderExchangeClient.request(HeaderExchangeClient.java:86)
	at com.alibaba.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient.request(ReferenceCountExchangeClient.java:77)
	at com.alibaba.dubbo.rpc.protocol.dubbo.DubboInvoker.doInvoke(DubboInvoker.java:95)
	at com.alibaba.dubbo.rpc.protocol.AbstractInvoker.invoke(AbstractInvoker.java:142)
	at com.alibaba.dubbo.rpc.listener.ListenerInvokerWrapper.invoke(ListenerInvokerWrapper.java:73)
	at com.alibaba.dubbo.monitor.support.MonitorFilter.invoke(MonitorFilter.java:74)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.protocol.dubbo.filter.FutureFilter.invoke(FutureFilter.java:53)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.filter.ConsumerContextFilter.invoke(ConsumerContextFilter.java:47)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.protocol.InvokerWrapper.invoke(InvokerWrapper.java:52)
	at com.alibaba.dubbo.rpc.cluster.support.FailoverClusterInvoker.doInvoke(FailoverClusterInvoker.java:77)
	at com.alibaba.dubbo.rpc.cluster.support.AbstractClusterInvoker.invoke(AbstractClusterInvoker.java:232)
	at com.alibaba.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker.invoke(MockClusterInvoker.java:70)
	at com.alibaba.dubbo.rpc.proxy.InvokerInvocationHandler.invoke(InvokerInvocationHandler.java:51)
	at com.alibaba.dubbo.common.bytecode.proxy3.uploadPortrait(proxy3.java)
	at com.tyut.web.controller.UserController.updatePortrait(UserController.java:72)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:133)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:97)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:872)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:317)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:114)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationProcessingFilter.doFilter(OAuth2AuthenticationProcessingFilter.java:176)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:64)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:214)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:177)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:347)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:263)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:108)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:478)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1459)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2018-08-31 15:56:32,636  Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is com.alibaba.dubbo.rpc.RpcException: Failed to invoke the method uploadPortrait in the service com.tyut.user.service.UserService. Tried 3 times of the providers [172.31.234.97:20880, 192.168.27.1:20880] (2/2) from the registry 47.104.209.96:2181 on the consumer 192.168.27.1 using the dubbo version 2.0.1. Last error is: Failed to invoke remote method: uploadPortrait, provider: dubbo://172.31.234.97:20880/com.tyut.user.service.UserService?anyhost=true&application=web-server&check=false&dubbo=2.0.1&generic=false&interface=com.tyut.user.service.UserService&methods=uploadFile,findPasswd,isValid,update,insert,selectById,isExistPhone,selectPasswdByPhone,updatePasswd,uploadPortrait,selectMe,selectPasswdByEmail,isExistEmail&pid=20652&register.ip=192.168.27.1&remote.timestamp=1533821272095&revision=2.0.0&side=consumer&timestamp=1535700983731&version=2.0.0, cause: message can not send, because channel is closed . url:dubbo://172.31.234.97:20880/com.tyut.user.service.UserEduService?anyhost=true&application=web-server&check=false&codec=dubbo&dubbo=2.0.1&generic=false&heartbeat=60000&interface=com.tyut.user.service.UserEduService&methods=getAll&pid=20652&register.ip=192.168.27.1&remote.timestamp=1533821271908&revision=2.0.0&side=consumer&timestamp=1535700955234&version=2.0.0] with root cause
com.alibaba.dubbo.remoting.RemotingException: message can not send, because channel is closed . url:dubbo://172.31.234.97:20880/com.tyut.user.service.UserEduService?anyhost=true&application=web-server&check=false&codec=dubbo&dubbo=2.0.1&generic=false&heartbeat=60000&interface=com.tyut.user.service.UserEduService&methods=getAll&pid=20652&register.ip=192.168.27.1&remote.timestamp=1533821271908&revision=2.0.0&side=consumer&timestamp=1535700955234&version=2.0.0
	at com.alibaba.dubbo.remoting.transport.AbstractClient.send(AbstractClient.java:254)
	at com.alibaba.dubbo.remoting.transport.AbstractPeer.send(AbstractPeer.java:52)
	at com.alibaba.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(HeaderExchangeChannel.java:111)
	at com.alibaba.dubbo.remoting.exchange.support.header.HeaderExchangeClient.request(HeaderExchangeClient.java:86)
	at com.alibaba.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient.request(ReferenceCountExchangeClient.java:77)
	at com.alibaba.dubbo.rpc.protocol.dubbo.DubboInvoker.doInvoke(DubboInvoker.java:95)
	at com.alibaba.dubbo.rpc.protocol.AbstractInvoker.invoke(AbstractInvoker.java:142)
	at com.alibaba.dubbo.rpc.listener.ListenerInvokerWrapper.invoke(ListenerInvokerWrapper.java:73)
	at com.alibaba.dubbo.monitor.support.MonitorFilter.invoke(MonitorFilter.java:74)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.protocol.dubbo.filter.FutureFilter.invoke(FutureFilter.java:53)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.filter.ConsumerContextFilter.invoke(ConsumerContextFilter.java:47)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.protocol.InvokerWrapper.invoke(InvokerWrapper.java:52)
	at com.alibaba.dubbo.rpc.cluster.support.FailoverClusterInvoker.doInvoke(FailoverClusterInvoker.java:77)
	at com.alibaba.dubbo.rpc.cluster.support.AbstractClusterInvoker.invoke(AbstractClusterInvoker.java:232)
	at com.alibaba.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker.invoke(MockClusterInvoker.java:70)
	at com.alibaba.dubbo.rpc.proxy.InvokerInvocationHandler.invoke(InvokerInvocationHandler.java:51)
	at com.alibaba.dubbo.common.bytecode.proxy3.uploadPortrait(proxy3.java)
	at com.tyut.web.controller.UserController.updatePortrait(UserController.java:72)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:133)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:97)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:872)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:317)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:114)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationProcessingFilter.doFilter(OAuth2AuthenticationProcessingFilter.java:176)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:64)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:214)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:177)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:347)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:263)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:108)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:478)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1459)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2018-08-31 15:56:46,382  Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is com.alibaba.dubbo.rpc.RpcException: Failed to invoke the method uploadPortrait in the service com.tyut.user.service.UserService. Tried 3 times of the providers [172.31.234.97:20880, 192.168.27.1:20880] (2/2) from the registry 47.104.209.96:2181 on the consumer 192.168.27.1 using the dubbo version 2.0.1. Last error is: Failed to invoke remote method: uploadPortrait, provider: dubbo://172.31.234.97:20880/com.tyut.user.service.UserService?anyhost=true&application=web-server&check=false&dubbo=2.0.1&generic=false&interface=com.tyut.user.service.UserService&methods=uploadFile,findPasswd,isValid,update,insert,selectById,isExistPhone,selectPasswdByPhone,updatePasswd,uploadPortrait,selectMe,selectPasswdByEmail,isExistEmail&pid=20652&register.ip=192.168.27.1&remote.timestamp=1533821272095&revision=2.0.0&side=consumer&timestamp=1535700983731&version=2.0.0, cause: message can not send, because channel is closed . url:dubbo://172.31.234.97:20880/com.tyut.user.service.UserEduService?anyhost=true&application=web-server&check=false&codec=dubbo&dubbo=2.0.1&generic=false&heartbeat=60000&interface=com.tyut.user.service.UserEduService&methods=getAll&pid=20652&register.ip=192.168.27.1&remote.timestamp=1533821271908&revision=2.0.0&side=consumer&timestamp=1535700955234&version=2.0.0] with root cause
com.alibaba.dubbo.remoting.RemotingException: message can not send, because channel is closed . url:dubbo://172.31.234.97:20880/com.tyut.user.service.UserEduService?anyhost=true&application=web-server&check=false&codec=dubbo&dubbo=2.0.1&generic=false&heartbeat=60000&interface=com.tyut.user.service.UserEduService&methods=getAll&pid=20652&register.ip=192.168.27.1&remote.timestamp=1533821271908&revision=2.0.0&side=consumer&timestamp=1535700955234&version=2.0.0
	at com.alibaba.dubbo.remoting.transport.AbstractClient.send(AbstractClient.java:254)
	at com.alibaba.dubbo.remoting.transport.AbstractPeer.send(AbstractPeer.java:52)
	at com.alibaba.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(HeaderExchangeChannel.java:111)
	at com.alibaba.dubbo.remoting.exchange.support.header.HeaderExchangeClient.request(HeaderExchangeClient.java:86)
	at com.alibaba.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient.request(ReferenceCountExchangeClient.java:77)
	at com.alibaba.dubbo.rpc.protocol.dubbo.DubboInvoker.doInvoke(DubboInvoker.java:95)
	at com.alibaba.dubbo.rpc.protocol.AbstractInvoker.invoke(AbstractInvoker.java:142)
	at com.alibaba.dubbo.rpc.listener.ListenerInvokerWrapper.invoke(ListenerInvokerWrapper.java:73)
	at com.alibaba.dubbo.monitor.support.MonitorFilter.invoke(MonitorFilter.java:74)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.protocol.dubbo.filter.FutureFilter.invoke(FutureFilter.java:53)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.filter.ConsumerContextFilter.invoke(ConsumerContextFilter.java:47)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.protocol.InvokerWrapper.invoke(InvokerWrapper.java:52)
	at com.alibaba.dubbo.rpc.cluster.support.FailoverClusterInvoker.doInvoke(FailoverClusterInvoker.java:77)
	at com.alibaba.dubbo.rpc.cluster.support.AbstractClusterInvoker.invoke(AbstractClusterInvoker.java:232)
	at com.alibaba.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker.invoke(MockClusterInvoker.java:70)
	at com.alibaba.dubbo.rpc.proxy.InvokerInvocationHandler.invoke(InvokerInvocationHandler.java:51)
	at com.alibaba.dubbo.common.bytecode.proxy3.uploadPortrait(proxy3.java)
	at com.tyut.web.controller.UserController.updatePortrait(UserController.java:72)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:133)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:97)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:872)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:317)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:114)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationProcessingFilter.doFilter(OAuth2AuthenticationProcessingFilter.java:176)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:64)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:214)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:177)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:347)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:263)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:108)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:478)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1459)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2018-08-31 15:58:31,135  Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is com.alibaba.dubbo.rpc.RpcException: Failed to invoke the method uploadPortrait in the service com.tyut.user.service.UserService. Tried 3 times of the providers [172.31.234.97:20880, 192.168.27.1:20880] (2/2) from the registry 47.104.209.96:2181 on the consumer 192.168.27.1 using the dubbo version 2.0.1. Last error is: Failed to invoke remote method: uploadPortrait, provider: dubbo://172.31.234.97:20880/com.tyut.user.service.UserService?anyhost=true&application=web-server&check=false&dubbo=2.0.1&generic=false&interface=com.tyut.user.service.UserService&methods=uploadFile,findPasswd,isValid,update,insert,selectById,isExistPhone,selectPasswdByPhone,updatePasswd,uploadPortrait,selectMe,selectPasswdByEmail,isExistEmail&pid=20652&register.ip=192.168.27.1&remote.timestamp=1533821272095&revision=2.0.0&side=consumer&timestamp=1535700983731&version=2.0.0, cause: message can not send, because channel is closed . url:dubbo://172.31.234.97:20880/com.tyut.user.service.UserEduService?anyhost=true&application=web-server&check=false&codec=dubbo&dubbo=2.0.1&generic=false&heartbeat=60000&interface=com.tyut.user.service.UserEduService&methods=getAll&pid=20652&register.ip=192.168.27.1&remote.timestamp=1533821271908&revision=2.0.0&side=consumer&timestamp=1535700955234&version=2.0.0] with root cause
com.alibaba.dubbo.remoting.RemotingException: message can not send, because channel is closed . url:dubbo://172.31.234.97:20880/com.tyut.user.service.UserEduService?anyhost=true&application=web-server&check=false&codec=dubbo&dubbo=2.0.1&generic=false&heartbeat=60000&interface=com.tyut.user.service.UserEduService&methods=getAll&pid=20652&register.ip=192.168.27.1&remote.timestamp=1533821271908&revision=2.0.0&side=consumer&timestamp=1535700955234&version=2.0.0
	at com.alibaba.dubbo.remoting.transport.AbstractClient.send(AbstractClient.java:254)
	at com.alibaba.dubbo.remoting.transport.AbstractPeer.send(AbstractPeer.java:52)
	at com.alibaba.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(HeaderExchangeChannel.java:111)
	at com.alibaba.dubbo.remoting.exchange.support.header.HeaderExchangeClient.request(HeaderExchangeClient.java:86)
	at com.alibaba.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient.request(ReferenceCountExchangeClient.java:77)
	at com.alibaba.dubbo.rpc.protocol.dubbo.DubboInvoker.doInvoke(DubboInvoker.java:95)
	at com.alibaba.dubbo.rpc.protocol.AbstractInvoker.invoke(AbstractInvoker.java:142)
	at com.alibaba.dubbo.rpc.listener.ListenerInvokerWrapper.invoke(ListenerInvokerWrapper.java:73)
	at com.alibaba.dubbo.monitor.support.MonitorFilter.invoke(MonitorFilter.java:74)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.protocol.dubbo.filter.FutureFilter.invoke(FutureFilter.java:53)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.filter.ConsumerContextFilter.invoke(ConsumerContextFilter.java:47)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.protocol.InvokerWrapper.invoke(InvokerWrapper.java:52)
	at com.alibaba.dubbo.rpc.cluster.support.FailoverClusterInvoker.doInvoke(FailoverClusterInvoker.java:77)
	at com.alibaba.dubbo.rpc.cluster.support.AbstractClusterInvoker.invoke(AbstractClusterInvoker.java:232)
	at com.alibaba.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker.invoke(MockClusterInvoker.java:70)
	at com.alibaba.dubbo.rpc.proxy.InvokerInvocationHandler.invoke(InvokerInvocationHandler.java:51)
	at com.alibaba.dubbo.common.bytecode.proxy3.uploadPortrait(proxy3.java)
	at com.tyut.web.controller.UserController.updatePortrait(UserController.java:72)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:133)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:97)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:872)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:317)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:114)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationProcessingFilter.doFilter(OAuth2AuthenticationProcessingFilter.java:176)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:64)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:214)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:177)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:347)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:263)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:108)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:478)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1459)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2018-08-31 15:58:32,065  Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is com.alibaba.dubbo.rpc.RpcException: Failed to invoke the method uploadPortrait in the service com.tyut.user.service.UserService. Tried 3 times of the providers [172.31.234.97:20880, 192.168.27.1:20880] (2/2) from the registry 47.104.209.96:2181 on the consumer 192.168.27.1 using the dubbo version 2.0.1. Last error is: Failed to invoke remote method: uploadPortrait, provider: dubbo://172.31.234.97:20880/com.tyut.user.service.UserService?anyhost=true&application=web-server&check=false&dubbo=2.0.1&generic=false&interface=com.tyut.user.service.UserService&methods=uploadFile,findPasswd,isValid,update,insert,selectById,isExistPhone,selectPasswdByPhone,updatePasswd,uploadPortrait,selectMe,selectPasswdByEmail,isExistEmail&pid=20652&register.ip=192.168.27.1&remote.timestamp=1533821272095&revision=2.0.0&side=consumer&timestamp=1535700983731&version=2.0.0, cause: message can not send, because channel is closed . url:dubbo://172.31.234.97:20880/com.tyut.user.service.UserEduService?anyhost=true&application=web-server&check=false&codec=dubbo&dubbo=2.0.1&generic=false&heartbeat=60000&interface=com.tyut.user.service.UserEduService&methods=getAll&pid=20652&register.ip=192.168.27.1&remote.timestamp=1533821271908&revision=2.0.0&side=consumer&timestamp=1535700955234&version=2.0.0] with root cause
com.alibaba.dubbo.remoting.RemotingException: message can not send, because channel is closed . url:dubbo://172.31.234.97:20880/com.tyut.user.service.UserEduService?anyhost=true&application=web-server&check=false&codec=dubbo&dubbo=2.0.1&generic=false&heartbeat=60000&interface=com.tyut.user.service.UserEduService&methods=getAll&pid=20652&register.ip=192.168.27.1&remote.timestamp=1533821271908&revision=2.0.0&side=consumer&timestamp=1535700955234&version=2.0.0
	at com.alibaba.dubbo.remoting.transport.AbstractClient.send(AbstractClient.java:254)
	at com.alibaba.dubbo.remoting.transport.AbstractPeer.send(AbstractPeer.java:52)
	at com.alibaba.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(HeaderExchangeChannel.java:111)
	at com.alibaba.dubbo.remoting.exchange.support.header.HeaderExchangeClient.request(HeaderExchangeClient.java:86)
	at com.alibaba.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient.request(ReferenceCountExchangeClient.java:77)
	at com.alibaba.dubbo.rpc.protocol.dubbo.DubboInvoker.doInvoke(DubboInvoker.java:95)
	at com.alibaba.dubbo.rpc.protocol.AbstractInvoker.invoke(AbstractInvoker.java:142)
	at com.alibaba.dubbo.rpc.listener.ListenerInvokerWrapper.invoke(ListenerInvokerWrapper.java:73)
	at com.alibaba.dubbo.monitor.support.MonitorFilter.invoke(MonitorFilter.java:74)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.protocol.dubbo.filter.FutureFilter.invoke(FutureFilter.java:53)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.filter.ConsumerContextFilter.invoke(ConsumerContextFilter.java:47)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.protocol.InvokerWrapper.invoke(InvokerWrapper.java:52)
	at com.alibaba.dubbo.rpc.cluster.support.FailoverClusterInvoker.doInvoke(FailoverClusterInvoker.java:77)
	at com.alibaba.dubbo.rpc.cluster.support.AbstractClusterInvoker.invoke(AbstractClusterInvoker.java:232)
	at com.alibaba.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker.invoke(MockClusterInvoker.java:70)
	at com.alibaba.dubbo.rpc.proxy.InvokerInvocationHandler.invoke(InvokerInvocationHandler.java:51)
	at com.alibaba.dubbo.common.bytecode.proxy3.uploadPortrait(proxy3.java)
	at com.tyut.web.controller.UserController.updatePortrait(UserController.java:72)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:133)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:97)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:872)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:317)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:114)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationProcessingFilter.doFilter(OAuth2AuthenticationProcessingFilter.java:176)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:64)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:214)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:177)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:347)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:263)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:108)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:478)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1459)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2018-08-31 15:58:32,861  Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is com.alibaba.dubbo.rpc.RpcException: Failed to invoke the method uploadPortrait in the service com.tyut.user.service.UserService. Tried 3 times of the providers [172.31.234.97:20880, 192.168.27.1:20880] (2/2) from the registry 47.104.209.96:2181 on the consumer 192.168.27.1 using the dubbo version 2.0.1. Last error is: Failed to invoke remote method: uploadPortrait, provider: dubbo://172.31.234.97:20880/com.tyut.user.service.UserService?anyhost=true&application=web-server&check=false&dubbo=2.0.1&generic=false&interface=com.tyut.user.service.UserService&methods=uploadFile,findPasswd,isValid,update,insert,selectById,isExistPhone,selectPasswdByPhone,updatePasswd,uploadPortrait,selectMe,selectPasswdByEmail,isExistEmail&pid=20652&register.ip=192.168.27.1&remote.timestamp=1533821272095&revision=2.0.0&side=consumer&timestamp=1535700983731&version=2.0.0, cause: message can not send, because channel is closed . url:dubbo://172.31.234.97:20880/com.tyut.user.service.UserEduService?anyhost=true&application=web-server&check=false&codec=dubbo&dubbo=2.0.1&generic=false&heartbeat=60000&interface=com.tyut.user.service.UserEduService&methods=getAll&pid=20652&register.ip=192.168.27.1&remote.timestamp=1533821271908&revision=2.0.0&side=consumer&timestamp=1535700955234&version=2.0.0] with root cause
com.alibaba.dubbo.remoting.RemotingException: message can not send, because channel is closed . url:dubbo://172.31.234.97:20880/com.tyut.user.service.UserEduService?anyhost=true&application=web-server&check=false&codec=dubbo&dubbo=2.0.1&generic=false&heartbeat=60000&interface=com.tyut.user.service.UserEduService&methods=getAll&pid=20652&register.ip=192.168.27.1&remote.timestamp=1533821271908&revision=2.0.0&side=consumer&timestamp=1535700955234&version=2.0.0
	at com.alibaba.dubbo.remoting.transport.AbstractClient.send(AbstractClient.java:254)
	at com.alibaba.dubbo.remoting.transport.AbstractPeer.send(AbstractPeer.java:52)
	at com.alibaba.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(HeaderExchangeChannel.java:111)
	at com.alibaba.dubbo.remoting.exchange.support.header.HeaderExchangeClient.request(HeaderExchangeClient.java:86)
	at com.alibaba.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient.request(ReferenceCountExchangeClient.java:77)
	at com.alibaba.dubbo.rpc.protocol.dubbo.DubboInvoker.doInvoke(DubboInvoker.java:95)
	at com.alibaba.dubbo.rpc.protocol.AbstractInvoker.invoke(AbstractInvoker.java:142)
	at com.alibaba.dubbo.rpc.listener.ListenerInvokerWrapper.invoke(ListenerInvokerWrapper.java:73)
	at com.alibaba.dubbo.monitor.support.MonitorFilter.invoke(MonitorFilter.java:74)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.protocol.dubbo.filter.FutureFilter.invoke(FutureFilter.java:53)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.filter.ConsumerContextFilter.invoke(ConsumerContextFilter.java:47)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.protocol.InvokerWrapper.invoke(InvokerWrapper.java:52)
	at com.alibaba.dubbo.rpc.cluster.support.FailoverClusterInvoker.doInvoke(FailoverClusterInvoker.java:77)
	at com.alibaba.dubbo.rpc.cluster.support.AbstractClusterInvoker.invoke(AbstractClusterInvoker.java:232)
	at com.alibaba.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker.invoke(MockClusterInvoker.java:70)
	at com.alibaba.dubbo.rpc.proxy.InvokerInvocationHandler.invoke(InvokerInvocationHandler.java:51)
	at com.alibaba.dubbo.common.bytecode.proxy3.uploadPortrait(proxy3.java)
	at com.tyut.web.controller.UserController.updatePortrait(UserController.java:72)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:133)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:97)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:872)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:317)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:114)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationProcessingFilter.doFilter(OAuth2AuthenticationProcessingFilter.java:176)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:64)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:214)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:177)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:347)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:263)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:108)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:478)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1459)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2018-08-31 15:58:33,597  Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is com.alibaba.dubbo.rpc.RpcException: Failed to invoke the method uploadPortrait in the service com.tyut.user.service.UserService. Tried 3 times of the providers [172.31.234.97:20880, 192.168.27.1:20880] (2/2) from the registry 47.104.209.96:2181 on the consumer 192.168.27.1 using the dubbo version 2.0.1. Last error is: Failed to invoke remote method: uploadPortrait, provider: dubbo://172.31.234.97:20880/com.tyut.user.service.UserService?anyhost=true&application=web-server&check=false&dubbo=2.0.1&generic=false&interface=com.tyut.user.service.UserService&methods=uploadFile,findPasswd,isValid,update,insert,selectById,isExistPhone,selectPasswdByPhone,updatePasswd,uploadPortrait,selectMe,selectPasswdByEmail,isExistEmail&pid=20652&register.ip=192.168.27.1&remote.timestamp=1533821272095&revision=2.0.0&side=consumer&timestamp=1535700983731&version=2.0.0, cause: message can not send, because channel is closed . url:dubbo://172.31.234.97:20880/com.tyut.user.service.UserEduService?anyhost=true&application=web-server&check=false&codec=dubbo&dubbo=2.0.1&generic=false&heartbeat=60000&interface=com.tyut.user.service.UserEduService&methods=getAll&pid=20652&register.ip=192.168.27.1&remote.timestamp=1533821271908&revision=2.0.0&side=consumer&timestamp=1535700955234&version=2.0.0] with root cause
com.alibaba.dubbo.remoting.RemotingException: message can not send, because channel is closed . url:dubbo://172.31.234.97:20880/com.tyut.user.service.UserEduService?anyhost=true&application=web-server&check=false&codec=dubbo&dubbo=2.0.1&generic=false&heartbeat=60000&interface=com.tyut.user.service.UserEduService&methods=getAll&pid=20652&register.ip=192.168.27.1&remote.timestamp=1533821271908&revision=2.0.0&side=consumer&timestamp=1535700955234&version=2.0.0
	at com.alibaba.dubbo.remoting.transport.AbstractClient.send(AbstractClient.java:254)
	at com.alibaba.dubbo.remoting.transport.AbstractPeer.send(AbstractPeer.java:52)
	at com.alibaba.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(HeaderExchangeChannel.java:111)
	at com.alibaba.dubbo.remoting.exchange.support.header.HeaderExchangeClient.request(HeaderExchangeClient.java:86)
	at com.alibaba.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient.request(ReferenceCountExchangeClient.java:77)
	at com.alibaba.dubbo.rpc.protocol.dubbo.DubboInvoker.doInvoke(DubboInvoker.java:95)
	at com.alibaba.dubbo.rpc.protocol.AbstractInvoker.invoke(AbstractInvoker.java:142)
	at com.alibaba.dubbo.rpc.listener.ListenerInvokerWrapper.invoke(ListenerInvokerWrapper.java:73)
	at com.alibaba.dubbo.monitor.support.MonitorFilter.invoke(MonitorFilter.java:74)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.protocol.dubbo.filter.FutureFilter.invoke(FutureFilter.java:53)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.filter.ConsumerContextFilter.invoke(ConsumerContextFilter.java:47)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.protocol.InvokerWrapper.invoke(InvokerWrapper.java:52)
	at com.alibaba.dubbo.rpc.cluster.support.FailoverClusterInvoker.doInvoke(FailoverClusterInvoker.java:77)
	at com.alibaba.dubbo.rpc.cluster.support.AbstractClusterInvoker.invoke(AbstractClusterInvoker.java:232)
	at com.alibaba.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker.invoke(MockClusterInvoker.java:70)
	at com.alibaba.dubbo.rpc.proxy.InvokerInvocationHandler.invoke(InvokerInvocationHandler.java:51)
	at com.alibaba.dubbo.common.bytecode.proxy3.uploadPortrait(proxy3.java)
	at com.tyut.web.controller.UserController.updatePortrait(UserController.java:72)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:133)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:97)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:872)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:317)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:114)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationProcessingFilter.doFilter(OAuth2AuthenticationProcessingFilter.java:176)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:64)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:214)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:177)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:347)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:263)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:108)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:478)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1459)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2018-08-31 15:58:34,514  Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is com.alibaba.dubbo.rpc.RpcException: Failed to invoke the method uploadPortrait in the service com.tyut.user.service.UserService. Tried 3 times of the providers [172.31.234.97:20880, 192.168.27.1:20880] (2/2) from the registry 47.104.209.96:2181 on the consumer 192.168.27.1 using the dubbo version 2.0.1. Last error is: Failed to invoke remote method: uploadPortrait, provider: dubbo://172.31.234.97:20880/com.tyut.user.service.UserService?anyhost=true&application=web-server&check=false&dubbo=2.0.1&generic=false&interface=com.tyut.user.service.UserService&methods=uploadFile,findPasswd,isValid,update,insert,selectById,isExistPhone,selectPasswdByPhone,updatePasswd,uploadPortrait,selectMe,selectPasswdByEmail,isExistEmail&pid=20652&register.ip=192.168.27.1&remote.timestamp=1533821272095&revision=2.0.0&side=consumer&timestamp=1535700983731&version=2.0.0, cause: message can not send, because channel is closed . url:dubbo://172.31.234.97:20880/com.tyut.user.service.UserEduService?anyhost=true&application=web-server&check=false&codec=dubbo&dubbo=2.0.1&generic=false&heartbeat=60000&interface=com.tyut.user.service.UserEduService&methods=getAll&pid=20652&register.ip=192.168.27.1&remote.timestamp=1533821271908&revision=2.0.0&side=consumer&timestamp=1535700955234&version=2.0.0] with root cause
com.alibaba.dubbo.remoting.RemotingException: message can not send, because channel is closed . url:dubbo://172.31.234.97:20880/com.tyut.user.service.UserEduService?anyhost=true&application=web-server&check=false&codec=dubbo&dubbo=2.0.1&generic=false&heartbeat=60000&interface=com.tyut.user.service.UserEduService&methods=getAll&pid=20652&register.ip=192.168.27.1&remote.timestamp=1533821271908&revision=2.0.0&side=consumer&timestamp=1535700955234&version=2.0.0
	at com.alibaba.dubbo.remoting.transport.AbstractClient.send(AbstractClient.java:254)
	at com.alibaba.dubbo.remoting.transport.AbstractPeer.send(AbstractPeer.java:52)
	at com.alibaba.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(HeaderExchangeChannel.java:111)
	at com.alibaba.dubbo.remoting.exchange.support.header.HeaderExchangeClient.request(HeaderExchangeClient.java:86)
	at com.alibaba.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient.request(ReferenceCountExchangeClient.java:77)
	at com.alibaba.dubbo.rpc.protocol.dubbo.DubboInvoker.doInvoke(DubboInvoker.java:95)
	at com.alibaba.dubbo.rpc.protocol.AbstractInvoker.invoke(AbstractInvoker.java:142)
	at com.alibaba.dubbo.rpc.listener.ListenerInvokerWrapper.invoke(ListenerInvokerWrapper.java:73)
	at com.alibaba.dubbo.monitor.support.MonitorFilter.invoke(MonitorFilter.java:74)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.protocol.dubbo.filter.FutureFilter.invoke(FutureFilter.java:53)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.filter.ConsumerContextFilter.invoke(ConsumerContextFilter.java:47)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.protocol.InvokerWrapper.invoke(InvokerWrapper.java:52)
	at com.alibaba.dubbo.rpc.cluster.support.FailoverClusterInvoker.doInvoke(FailoverClusterInvoker.java:77)
	at com.alibaba.dubbo.rpc.cluster.support.AbstractClusterInvoker.invoke(AbstractClusterInvoker.java:232)
	at com.alibaba.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker.invoke(MockClusterInvoker.java:70)
	at com.alibaba.dubbo.rpc.proxy.InvokerInvocationHandler.invoke(InvokerInvocationHandler.java:51)
	at com.alibaba.dubbo.common.bytecode.proxy3.uploadPortrait(proxy3.java)
	at com.tyut.web.controller.UserController.updatePortrait(UserController.java:72)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:133)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:97)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:872)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:317)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:114)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationProcessingFilter.doFilter(OAuth2AuthenticationProcessingFilter.java:176)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:64)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:214)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:177)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:347)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:263)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:108)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:478)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1459)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2018-08-31 15:58:36,694  Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is com.alibaba.dubbo.rpc.RpcException: Failed to invoke the method uploadPortrait in the service com.tyut.user.service.UserService. Tried 3 times of the providers [172.31.234.97:20880, 192.168.27.1:20880] (2/2) from the registry 47.104.209.96:2181 on the consumer 192.168.27.1 using the dubbo version 2.0.1. Last error is: Failed to invoke remote method: uploadPortrait, provider: dubbo://172.31.234.97:20880/com.tyut.user.service.UserService?anyhost=true&application=web-server&check=false&dubbo=2.0.1&generic=false&interface=com.tyut.user.service.UserService&methods=uploadFile,findPasswd,isValid,update,insert,selectById,isExistPhone,selectPasswdByPhone,updatePasswd,uploadPortrait,selectMe,selectPasswdByEmail,isExistEmail&pid=20652&register.ip=192.168.27.1&remote.timestamp=1533821272095&revision=2.0.0&side=consumer&timestamp=1535700983731&version=2.0.0, cause: message can not send, because channel is closed . url:dubbo://172.31.234.97:20880/com.tyut.user.service.UserEduService?anyhost=true&application=web-server&check=false&codec=dubbo&dubbo=2.0.1&generic=false&heartbeat=60000&interface=com.tyut.user.service.UserEduService&methods=getAll&pid=20652&register.ip=192.168.27.1&remote.timestamp=1533821271908&revision=2.0.0&side=consumer&timestamp=1535700955234&version=2.0.0] with root cause
com.alibaba.dubbo.remoting.RemotingException: message can not send, because channel is closed . url:dubbo://172.31.234.97:20880/com.tyut.user.service.UserEduService?anyhost=true&application=web-server&check=false&codec=dubbo&dubbo=2.0.1&generic=false&heartbeat=60000&interface=com.tyut.user.service.UserEduService&methods=getAll&pid=20652&register.ip=192.168.27.1&remote.timestamp=1533821271908&revision=2.0.0&side=consumer&timestamp=1535700955234&version=2.0.0
	at com.alibaba.dubbo.remoting.transport.AbstractClient.send(AbstractClient.java:254)
	at com.alibaba.dubbo.remoting.transport.AbstractPeer.send(AbstractPeer.java:52)
	at com.alibaba.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(HeaderExchangeChannel.java:111)
	at com.alibaba.dubbo.remoting.exchange.support.header.HeaderExchangeClient.request(HeaderExchangeClient.java:86)
	at com.alibaba.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient.request(ReferenceCountExchangeClient.java:77)
	at com.alibaba.dubbo.rpc.protocol.dubbo.DubboInvoker.doInvoke(DubboInvoker.java:95)
	at com.alibaba.dubbo.rpc.protocol.AbstractInvoker.invoke(AbstractInvoker.java:142)
	at com.alibaba.dubbo.rpc.listener.ListenerInvokerWrapper.invoke(ListenerInvokerWrapper.java:73)
	at com.alibaba.dubbo.monitor.support.MonitorFilter.invoke(MonitorFilter.java:74)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.protocol.dubbo.filter.FutureFilter.invoke(FutureFilter.java:53)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.filter.ConsumerContextFilter.invoke(ConsumerContextFilter.java:47)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.protocol.InvokerWrapper.invoke(InvokerWrapper.java:52)
	at com.alibaba.dubbo.rpc.cluster.support.FailoverClusterInvoker.doInvoke(FailoverClusterInvoker.java:77)
	at com.alibaba.dubbo.rpc.cluster.support.AbstractClusterInvoker.invoke(AbstractClusterInvoker.java:232)
	at com.alibaba.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker.invoke(MockClusterInvoker.java:70)
	at com.alibaba.dubbo.rpc.proxy.InvokerInvocationHandler.invoke(InvokerInvocationHandler.java:51)
	at com.alibaba.dubbo.common.bytecode.proxy3.uploadPortrait(proxy3.java)
	at com.tyut.web.controller.UserController.updatePortrait(UserController.java:72)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:133)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:97)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:872)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:317)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:114)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationProcessingFilter.doFilter(OAuth2AuthenticationProcessingFilter.java:176)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:64)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:214)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:177)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:347)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:263)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:108)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:478)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1459)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2018-08-31 15:58:40,331  Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is com.alibaba.dubbo.rpc.RpcException: Failed to invoke the method uploadPortrait in the service com.tyut.user.service.UserService. Tried 3 times of the providers [172.31.234.97:20880, 192.168.27.1:20880] (2/2) from the registry 47.104.209.96:2181 on the consumer 192.168.27.1 using the dubbo version 2.0.1. Last error is: Failed to invoke remote method: uploadPortrait, provider: dubbo://172.31.234.97:20880/com.tyut.user.service.UserService?anyhost=true&application=web-server&check=false&dubbo=2.0.1&generic=false&interface=com.tyut.user.service.UserService&methods=uploadFile,findPasswd,isValid,update,insert,selectById,isExistPhone,selectPasswdByPhone,updatePasswd,uploadPortrait,selectMe,selectPasswdByEmail,isExistEmail&pid=20652&register.ip=192.168.27.1&remote.timestamp=1533821272095&revision=2.0.0&side=consumer&timestamp=1535700983731&version=2.0.0, cause: message can not send, because channel is closed . url:dubbo://172.31.234.97:20880/com.tyut.user.service.UserEduService?anyhost=true&application=web-server&check=false&codec=dubbo&dubbo=2.0.1&generic=false&heartbeat=60000&interface=com.tyut.user.service.UserEduService&methods=getAll&pid=20652&register.ip=192.168.27.1&remote.timestamp=1533821271908&revision=2.0.0&side=consumer&timestamp=1535700955234&version=2.0.0] with root cause
com.alibaba.dubbo.remoting.RemotingException: message can not send, because channel is closed . url:dubbo://172.31.234.97:20880/com.tyut.user.service.UserEduService?anyhost=true&application=web-server&check=false&codec=dubbo&dubbo=2.0.1&generic=false&heartbeat=60000&interface=com.tyut.user.service.UserEduService&methods=getAll&pid=20652&register.ip=192.168.27.1&remote.timestamp=1533821271908&revision=2.0.0&side=consumer&timestamp=1535700955234&version=2.0.0
	at com.alibaba.dubbo.remoting.transport.AbstractClient.send(AbstractClient.java:254)
	at com.alibaba.dubbo.remoting.transport.AbstractPeer.send(AbstractPeer.java:52)
	at com.alibaba.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(HeaderExchangeChannel.java:111)
	at com.alibaba.dubbo.remoting.exchange.support.header.HeaderExchangeClient.request(HeaderExchangeClient.java:86)
	at com.alibaba.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient.request(ReferenceCountExchangeClient.java:77)
	at com.alibaba.dubbo.rpc.protocol.dubbo.DubboInvoker.doInvoke(DubboInvoker.java:95)
	at com.alibaba.dubbo.rpc.protocol.AbstractInvoker.invoke(AbstractInvoker.java:142)
	at com.alibaba.dubbo.rpc.listener.ListenerInvokerWrapper.invoke(ListenerInvokerWrapper.java:73)
	at com.alibaba.dubbo.monitor.support.MonitorFilter.invoke(MonitorFilter.java:74)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.protocol.dubbo.filter.FutureFilter.invoke(FutureFilter.java:53)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.filter.ConsumerContextFilter.invoke(ConsumerContextFilter.java:47)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.protocol.InvokerWrapper.invoke(InvokerWrapper.java:52)
	at com.alibaba.dubbo.rpc.cluster.support.FailoverClusterInvoker.doInvoke(FailoverClusterInvoker.java:77)
	at com.alibaba.dubbo.rpc.cluster.support.AbstractClusterInvoker.invoke(AbstractClusterInvoker.java:232)
	at com.alibaba.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker.invoke(MockClusterInvoker.java:70)
	at com.alibaba.dubbo.rpc.proxy.InvokerInvocationHandler.invoke(InvokerInvocationHandler.java:51)
	at com.alibaba.dubbo.common.bytecode.proxy3.uploadPortrait(proxy3.java)
	at com.tyut.web.controller.UserController.updatePortrait(UserController.java:72)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:133)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:97)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:872)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:317)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:114)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationProcessingFilter.doFilter(OAuth2AuthenticationProcessingFilter.java:176)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:64)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:214)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:177)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:347)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:263)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:108)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:478)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1459)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2018-08-31 16:01:27,460  Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is com.alibaba.dubbo.rpc.RpcException: Failed to invoke the method uploadPortrait in the service com.tyut.user.service.UserService. Tried 3 times of the providers [172.31.234.97:20880, 192.168.27.1:20880] (2/2) from the registry 47.104.209.96:2181 on the consumer 192.168.27.1 using the dubbo version 2.0.1. Last error is: Failed to invoke remote method: uploadPortrait, provider: dubbo://172.31.234.97:20880/com.tyut.user.service.UserService?anyhost=true&application=web-server&check=false&dubbo=2.0.1&generic=false&interface=com.tyut.user.service.UserService&methods=uploadFile,findPasswd,isValid,update,insert,selectById,isExistPhone,selectPasswdByPhone,updatePasswd,uploadPortrait,selectMe,selectPasswdByEmail,isExistEmail&pid=20204&register.ip=192.168.27.1&remote.timestamp=1533821272095&revision=2.0.0&side=consumer&timestamp=1535702475135&version=2.0.0, cause: message can not send, because channel is closed . url:dubbo://172.31.234.97:20880/com.tyut.user.service.UserEduService?anyhost=true&application=web-server&check=false&codec=dubbo&dubbo=2.0.1&generic=false&heartbeat=60000&interface=com.tyut.user.service.UserEduService&methods=getAll&pid=20204&register.ip=192.168.27.1&remote.timestamp=1533821271908&revision=2.0.0&side=consumer&timestamp=1535702471365&version=2.0.0] with root cause
com.alibaba.dubbo.remoting.RemotingException: message can not send, because channel is closed . url:dubbo://172.31.234.97:20880/com.tyut.user.service.UserEduService?anyhost=true&application=web-server&check=false&codec=dubbo&dubbo=2.0.1&generic=false&heartbeat=60000&interface=com.tyut.user.service.UserEduService&methods=getAll&pid=20204&register.ip=192.168.27.1&remote.timestamp=1533821271908&revision=2.0.0&side=consumer&timestamp=1535702471365&version=2.0.0
	at com.alibaba.dubbo.remoting.transport.AbstractClient.send(AbstractClient.java:254)
	at com.alibaba.dubbo.remoting.transport.AbstractPeer.send(AbstractPeer.java:52)
	at com.alibaba.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(HeaderExchangeChannel.java:111)
	at com.alibaba.dubbo.remoting.exchange.support.header.HeaderExchangeClient.request(HeaderExchangeClient.java:86)
	at com.alibaba.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient.request(ReferenceCountExchangeClient.java:77)
	at com.alibaba.dubbo.rpc.protocol.dubbo.DubboInvoker.doInvoke(DubboInvoker.java:95)
	at com.alibaba.dubbo.rpc.protocol.AbstractInvoker.invoke(AbstractInvoker.java:142)
	at com.alibaba.dubbo.rpc.listener.ListenerInvokerWrapper.invoke(ListenerInvokerWrapper.java:73)
	at com.alibaba.dubbo.monitor.support.MonitorFilter.invoke(MonitorFilter.java:74)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.protocol.dubbo.filter.FutureFilter.invoke(FutureFilter.java:53)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.filter.ConsumerContextFilter.invoke(ConsumerContextFilter.java:47)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.protocol.InvokerWrapper.invoke(InvokerWrapper.java:52)
	at com.alibaba.dubbo.rpc.cluster.support.FailoverClusterInvoker.doInvoke(FailoverClusterInvoker.java:77)
	at com.alibaba.dubbo.rpc.cluster.support.AbstractClusterInvoker.invoke(AbstractClusterInvoker.java:232)
	at com.alibaba.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker.invoke(MockClusterInvoker.java:70)
	at com.alibaba.dubbo.rpc.proxy.InvokerInvocationHandler.invoke(InvokerInvocationHandler.java:51)
	at com.alibaba.dubbo.common.bytecode.proxy3.uploadPortrait(proxy3.java)
	at com.tyut.web.controller.UserController.updatePortrait(UserController.java:72)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:133)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:97)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:872)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:317)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:114)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationProcessingFilter.doFilter(OAuth2AuthenticationProcessingFilter.java:176)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:64)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:214)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:177)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:347)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:263)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:108)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:478)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1459)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2018-08-31 16:04:18,072  Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is com.alibaba.dubbo.rpc.RpcException: Failed to invoke the method uploadPortrait in the service com.tyut.user.service.UserService. Tried 3 times of the providers [172.31.234.97:20880, 192.168.27.1:20880] (2/2) from the registry 47.104.209.96:2181 on the consumer 192.168.27.1 using the dubbo version 2.0.1. Last error is: Failed to invoke remote method: uploadPortrait, provider: dubbo://172.31.234.97:20880/com.tyut.user.service.UserService?anyhost=true&application=web-server&check=false&dubbo=2.0.1&generic=false&interface=com.tyut.user.service.UserService&methods=uploadFile,findPasswd,isValid,update,insert,selectById,isExistPhone,selectPasswdByPhone,updatePasswd,uploadPortrait,selectMe,selectPasswdByEmail,isExistEmail&pid=20204&register.ip=192.168.27.1&remote.timestamp=1533821272095&revision=2.0.0&side=consumer&timestamp=1535702475135&version=2.0.0, cause: message can not send, because channel is closed . url:dubbo://172.31.234.97:20880/com.tyut.user.service.UserEduService?anyhost=true&application=web-server&check=false&codec=dubbo&dubbo=2.0.1&generic=false&heartbeat=60000&interface=com.tyut.user.service.UserEduService&methods=getAll&pid=20204&register.ip=192.168.27.1&remote.timestamp=1533821271908&revision=2.0.0&side=consumer&timestamp=1535702471365&version=2.0.0] with root cause
com.alibaba.dubbo.remoting.RemotingException: message can not send, because channel is closed . url:dubbo://172.31.234.97:20880/com.tyut.user.service.UserEduService?anyhost=true&application=web-server&check=false&codec=dubbo&dubbo=2.0.1&generic=false&heartbeat=60000&interface=com.tyut.user.service.UserEduService&methods=getAll&pid=20204&register.ip=192.168.27.1&remote.timestamp=1533821271908&revision=2.0.0&side=consumer&timestamp=1535702471365&version=2.0.0
	at com.alibaba.dubbo.remoting.transport.AbstractClient.send(AbstractClient.java:254)
	at com.alibaba.dubbo.remoting.transport.AbstractPeer.send(AbstractPeer.java:52)
	at com.alibaba.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(HeaderExchangeChannel.java:111)
	at com.alibaba.dubbo.remoting.exchange.support.header.HeaderExchangeClient.request(HeaderExchangeClient.java:86)
	at com.alibaba.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient.request(ReferenceCountExchangeClient.java:77)
	at com.alibaba.dubbo.rpc.protocol.dubbo.DubboInvoker.doInvoke(DubboInvoker.java:95)
	at com.alibaba.dubbo.rpc.protocol.AbstractInvoker.invoke(AbstractInvoker.java:142)
	at com.alibaba.dubbo.rpc.listener.ListenerInvokerWrapper.invoke(ListenerInvokerWrapper.java:73)
	at com.alibaba.dubbo.monitor.support.MonitorFilter.invoke(MonitorFilter.java:74)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.protocol.dubbo.filter.FutureFilter.invoke(FutureFilter.java:53)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.filter.ConsumerContextFilter.invoke(ConsumerContextFilter.java:47)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.protocol.InvokerWrapper.invoke(InvokerWrapper.java:52)
	at com.alibaba.dubbo.rpc.cluster.support.FailoverClusterInvoker.doInvoke(FailoverClusterInvoker.java:77)
	at com.alibaba.dubbo.rpc.cluster.support.AbstractClusterInvoker.invoke(AbstractClusterInvoker.java:232)
	at com.alibaba.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker.invoke(MockClusterInvoker.java:70)
	at com.alibaba.dubbo.rpc.proxy.InvokerInvocationHandler.invoke(InvokerInvocationHandler.java:51)
	at com.alibaba.dubbo.common.bytecode.proxy3.uploadPortrait(proxy3.java)
	at com.tyut.web.controller.UserController.updatePortrait(UserController.java:72)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:133)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:97)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:872)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:317)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:114)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationProcessingFilter.doFilter(OAuth2AuthenticationProcessingFilter.java:176)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:64)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:214)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:177)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:347)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:263)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:108)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:478)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1459)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2018-08-31 16:13:38,070  Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is com.alibaba.dubbo.rpc.RpcException: Failed to invoke the method uploadPortrait in the service com.tyut.user.service.UserService. Tried 3 times of the providers [172.31.234.97:20880, 192.168.27.1:20880] (2/2) from the registry 47.104.209.96:2181 on the consumer 192.168.27.1 using the dubbo version 2.0.1. Last error is: Failed to invoke remote method: uploadPortrait, provider: dubbo://172.31.234.97:20880/com.tyut.user.service.UserService?anyhost=true&application=web-server&check=false&dubbo=2.0.1&generic=false&interface=com.tyut.user.service.UserService&methods=uploadFile,findPasswd,isValid,update,insert,selectById,isExistPhone,selectPasswdByPhone,updatePasswd,uploadPortrait,selectMe,selectPasswdByEmail,isExistEmail&pid=12452&register.ip=192.168.27.1&remote.timestamp=1533821272095&revision=2.0.0&side=consumer&timestamp=1535702722992&version=2.0.0, cause: message can not send, because channel is closed . url:dubbo://172.31.234.97:20880/com.tyut.user.service.UserEduService?anyhost=true&application=web-server&check=false&codec=dubbo&dubbo=2.0.1&generic=false&heartbeat=60000&interface=com.tyut.user.service.UserEduService&methods=getAll&pid=12452&register.ip=192.168.27.1&remote.timestamp=1533821271908&revision=2.0.0&side=consumer&timestamp=1535702719297&version=2.0.0] with root cause
com.alibaba.dubbo.remoting.RemotingException: message can not send, because channel is closed . url:dubbo://172.31.234.97:20880/com.tyut.user.service.UserEduService?anyhost=true&application=web-server&check=false&codec=dubbo&dubbo=2.0.1&generic=false&heartbeat=60000&interface=com.tyut.user.service.UserEduService&methods=getAll&pid=12452&register.ip=192.168.27.1&remote.timestamp=1533821271908&revision=2.0.0&side=consumer&timestamp=1535702719297&version=2.0.0
	at com.alibaba.dubbo.remoting.transport.AbstractClient.send(AbstractClient.java:254)
	at com.alibaba.dubbo.remoting.transport.AbstractPeer.send(AbstractPeer.java:52)
	at com.alibaba.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(HeaderExchangeChannel.java:111)
	at com.alibaba.dubbo.remoting.exchange.support.header.HeaderExchangeClient.request(HeaderExchangeClient.java:86)
	at com.alibaba.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient.request(ReferenceCountExchangeClient.java:77)
	at com.alibaba.dubbo.rpc.protocol.dubbo.DubboInvoker.doInvoke(DubboInvoker.java:95)
	at com.alibaba.dubbo.rpc.protocol.AbstractInvoker.invoke(AbstractInvoker.java:142)
	at com.alibaba.dubbo.monitor.support.MonitorFilter.invoke(MonitorFilter.java:74)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.protocol.dubbo.filter.FutureFilter.invoke(FutureFilter.java:53)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.filter.ConsumerContextFilter.invoke(ConsumerContextFilter.java:47)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.listener.ListenerInvokerWrapper.invoke(ListenerInvokerWrapper.java:73)
	at com.alibaba.dubbo.rpc.protocol.InvokerWrapper.invoke(InvokerWrapper.java:52)
	at com.alibaba.dubbo.rpc.cluster.support.FailoverClusterInvoker.doInvoke(FailoverClusterInvoker.java:77)
	at com.alibaba.dubbo.rpc.cluster.support.AbstractClusterInvoker.invoke(AbstractClusterInvoker.java:232)
	at com.alibaba.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker.invoke(MockClusterInvoker.java:70)
	at com.alibaba.dubbo.rpc.proxy.InvokerInvocationHandler.invoke(InvokerInvocationHandler.java:51)
	at com.alibaba.dubbo.common.bytecode.proxy3.uploadPortrait(proxy3.java)
	at com.tyut.web.controller.UserController.updatePortrait(UserController.java:72)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:133)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:97)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:872)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:317)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:114)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationProcessingFilter.doFilter(OAuth2AuthenticationProcessingFilter.java:176)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:64)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:214)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:177)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:347)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:263)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:108)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:478)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1459)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2018-08-31 16:17:17,316  Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is com.alibaba.dubbo.rpc.RpcException: Failed to invoke the method uploadPortrait in the service com.tyut.user.service.UserService. Tried 3 times of the providers [172.31.234.97:20880, 192.168.27.1:20880] (2/2) from the registry 47.104.209.96:2181 on the consumer 192.168.27.1 using the dubbo version 2.0.1. Last error is: Failed to invoke remote method: uploadPortrait, provider: dubbo://172.31.234.97:20880/com.tyut.user.service.UserService?anyhost=true&application=web-server&check=false&dubbo=2.0.1&generic=false&interface=com.tyut.user.service.UserService&methods=uploadFile,findPasswd,isValid,update,insert,selectById,isExistPhone,selectPasswdByPhone,updatePasswd,uploadPortrait,selectMe,selectPasswdByEmail,isExistEmail&pid=20844&register.ip=192.168.27.1&remote.timestamp=1533821272095&revision=2.0.0&side=consumer&timestamp=1535703425519&version=2.0.0, cause: message can not send, because channel is closed . url:dubbo://172.31.234.97:20880/com.tyut.user.service.UserEduService?anyhost=true&application=web-server&check=false&codec=dubbo&dubbo=2.0.1&generic=false&heartbeat=60000&interface=com.tyut.user.service.UserEduService&methods=getAll&pid=20844&register.ip=192.168.27.1&remote.timestamp=1533821271908&revision=2.0.0&side=consumer&timestamp=1535703421909&version=2.0.0] with root cause
com.alibaba.dubbo.remoting.RemotingException: message can not send, because channel is closed . url:dubbo://172.31.234.97:20880/com.tyut.user.service.UserEduService?anyhost=true&application=web-server&check=false&codec=dubbo&dubbo=2.0.1&generic=false&heartbeat=60000&interface=com.tyut.user.service.UserEduService&methods=getAll&pid=20844&register.ip=192.168.27.1&remote.timestamp=1533821271908&revision=2.0.0&side=consumer&timestamp=1535703421909&version=2.0.0
	at com.alibaba.dubbo.remoting.transport.AbstractClient.send(AbstractClient.java:254)
	at com.alibaba.dubbo.remoting.transport.AbstractPeer.send(AbstractPeer.java:52)
	at com.alibaba.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(HeaderExchangeChannel.java:111)
	at com.alibaba.dubbo.remoting.exchange.support.header.HeaderExchangeClient.request(HeaderExchangeClient.java:86)
	at com.alibaba.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient.request(ReferenceCountExchangeClient.java:77)
	at com.alibaba.dubbo.rpc.protocol.dubbo.DubboInvoker.doInvoke(DubboInvoker.java:95)
	at com.alibaba.dubbo.rpc.protocol.AbstractInvoker.invoke(AbstractInvoker.java:142)
	at com.alibaba.dubbo.monitor.support.MonitorFilter.invoke(MonitorFilter.java:74)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.protocol.dubbo.filter.FutureFilter.invoke(FutureFilter.java:53)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.filter.ConsumerContextFilter.invoke(ConsumerContextFilter.java:47)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.listener.ListenerInvokerWrapper.invoke(ListenerInvokerWrapper.java:73)
	at com.alibaba.dubbo.rpc.protocol.InvokerWrapper.invoke(InvokerWrapper.java:52)
	at com.alibaba.dubbo.rpc.cluster.support.FailoverClusterInvoker.doInvoke(FailoverClusterInvoker.java:77)
	at com.alibaba.dubbo.rpc.cluster.support.AbstractClusterInvoker.invoke(AbstractClusterInvoker.java:232)
	at com.alibaba.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker.invoke(MockClusterInvoker.java:70)
	at com.alibaba.dubbo.rpc.proxy.InvokerInvocationHandler.invoke(InvokerInvocationHandler.java:51)
	at com.alibaba.dubbo.common.bytecode.proxy3.uploadPortrait(proxy3.java)
	at com.tyut.web.controller.UserController.updatePortrait(UserController.java:72)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:133)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:97)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:872)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:317)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:114)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationProcessingFilter.doFilter(OAuth2AuthenticationProcessingFilter.java:176)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:64)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:214)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:177)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:347)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:263)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:108)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:478)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1459)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2018-08-31 16:17:46,950  Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is com.alibaba.dubbo.rpc.RpcException: Failed to invoke the method uploadPortrait in the service com.tyut.user.service.UserService. Tried 3 times of the providers [172.31.234.97:20880, 192.168.27.1:20880] (2/2) from the registry 47.104.209.96:2181 on the consumer 192.168.27.1 using the dubbo version 2.0.1. Last error is: Failed to invoke remote method: uploadPortrait, provider: dubbo://172.31.234.97:20880/com.tyut.user.service.UserService?anyhost=true&application=web-server&check=false&dubbo=2.0.1&generic=false&interface=com.tyut.user.service.UserService&methods=uploadFile,findPasswd,isValid,update,insert,selectById,isExistPhone,selectPasswdByPhone,updatePasswd,uploadPortrait,selectMe,selectPasswdByEmail,isExistEmail&pid=20844&register.ip=192.168.27.1&remote.timestamp=1533821272095&revision=2.0.0&side=consumer&timestamp=1535703425519&version=2.0.0, cause: message can not send, because channel is closed . url:dubbo://172.31.234.97:20880/com.tyut.user.service.UserEduService?anyhost=true&application=web-server&check=false&codec=dubbo&dubbo=2.0.1&generic=false&heartbeat=60000&interface=com.tyut.user.service.UserEduService&methods=getAll&pid=20844&register.ip=192.168.27.1&remote.timestamp=1533821271908&revision=2.0.0&side=consumer&timestamp=1535703421909&version=2.0.0] with root cause
com.alibaba.dubbo.remoting.RemotingException: message can not send, because channel is closed . url:dubbo://172.31.234.97:20880/com.tyut.user.service.UserEduService?anyhost=true&application=web-server&check=false&codec=dubbo&dubbo=2.0.1&generic=false&heartbeat=60000&interface=com.tyut.user.service.UserEduService&methods=getAll&pid=20844&register.ip=192.168.27.1&remote.timestamp=1533821271908&revision=2.0.0&side=consumer&timestamp=1535703421909&version=2.0.0
	at com.alibaba.dubbo.remoting.transport.AbstractClient.send(AbstractClient.java:254)
	at com.alibaba.dubbo.remoting.transport.AbstractPeer.send(AbstractPeer.java:52)
	at com.alibaba.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(HeaderExchangeChannel.java:111)
	at com.alibaba.dubbo.remoting.exchange.support.header.HeaderExchangeClient.request(HeaderExchangeClient.java:86)
	at com.alibaba.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient.request(ReferenceCountExchangeClient.java:77)
	at com.alibaba.dubbo.rpc.protocol.dubbo.DubboInvoker.doInvoke(DubboInvoker.java:95)
	at com.alibaba.dubbo.rpc.protocol.AbstractInvoker.invoke(AbstractInvoker.java:142)
	at com.alibaba.dubbo.monitor.support.MonitorFilter.invoke(MonitorFilter.java:74)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.protocol.dubbo.filter.FutureFilter.invoke(FutureFilter.java:53)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.filter.ConsumerContextFilter.invoke(ConsumerContextFilter.java:47)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.listener.ListenerInvokerWrapper.invoke(ListenerInvokerWrapper.java:73)
	at com.alibaba.dubbo.rpc.protocol.InvokerWrapper.invoke(InvokerWrapper.java:52)
	at com.alibaba.dubbo.rpc.cluster.support.FailoverClusterInvoker.doInvoke(FailoverClusterInvoker.java:77)
	at com.alibaba.dubbo.rpc.cluster.support.AbstractClusterInvoker.invoke(AbstractClusterInvoker.java:232)
	at com.alibaba.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker.invoke(MockClusterInvoker.java:70)
	at com.alibaba.dubbo.rpc.proxy.InvokerInvocationHandler.invoke(InvokerInvocationHandler.java:51)
	at com.alibaba.dubbo.common.bytecode.proxy3.uploadPortrait(proxy3.java)
	at com.tyut.web.controller.UserController.updatePortrait(UserController.java:72)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:133)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:97)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:872)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:317)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:114)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationProcessingFilter.doFilter(OAuth2AuthenticationProcessingFilter.java:176)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:64)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:214)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:177)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:347)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:263)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:108)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:478)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1459)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2018-08-31 16:17:53,221  Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is com.alibaba.dubbo.rpc.RpcException: Failed to invoke the method uploadPortrait in the service com.tyut.user.service.UserService. Tried 3 times of the providers [172.31.234.97:20880, 192.168.27.1:20880] (2/2) from the registry 47.104.209.96:2181 on the consumer 192.168.27.1 using the dubbo version 2.0.1. Last error is: Failed to invoke remote method: uploadPortrait, provider: dubbo://172.31.234.97:20880/com.tyut.user.service.UserService?anyhost=true&application=web-server&check=false&dubbo=2.0.1&generic=false&interface=com.tyut.user.service.UserService&methods=uploadFile,findPasswd,isValid,update,insert,selectById,isExistPhone,selectPasswdByPhone,updatePasswd,uploadPortrait,selectMe,selectPasswdByEmail,isExistEmail&pid=20844&register.ip=192.168.27.1&remote.timestamp=1533821272095&revision=2.0.0&side=consumer&timestamp=1535703425519&version=2.0.0, cause: message can not send, because channel is closed . url:dubbo://172.31.234.97:20880/com.tyut.user.service.UserEduService?anyhost=true&application=web-server&check=false&codec=dubbo&dubbo=2.0.1&generic=false&heartbeat=60000&interface=com.tyut.user.service.UserEduService&methods=getAll&pid=20844&register.ip=192.168.27.1&remote.timestamp=1533821271908&revision=2.0.0&side=consumer&timestamp=1535703421909&version=2.0.0] with root cause
com.alibaba.dubbo.remoting.RemotingException: message can not send, because channel is closed . url:dubbo://172.31.234.97:20880/com.tyut.user.service.UserEduService?anyhost=true&application=web-server&check=false&codec=dubbo&dubbo=2.0.1&generic=false&heartbeat=60000&interface=com.tyut.user.service.UserEduService&methods=getAll&pid=20844&register.ip=192.168.27.1&remote.timestamp=1533821271908&revision=2.0.0&side=consumer&timestamp=1535703421909&version=2.0.0
	at com.alibaba.dubbo.remoting.transport.AbstractClient.send(AbstractClient.java:254)
	at com.alibaba.dubbo.remoting.transport.AbstractPeer.send(AbstractPeer.java:52)
	at com.alibaba.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(HeaderExchangeChannel.java:111)
	at com.alibaba.dubbo.remoting.exchange.support.header.HeaderExchangeClient.request(HeaderExchangeClient.java:86)
	at com.alibaba.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient.request(ReferenceCountExchangeClient.java:77)
	at com.alibaba.dubbo.rpc.protocol.dubbo.DubboInvoker.doInvoke(DubboInvoker.java:95)
	at com.alibaba.dubbo.rpc.protocol.AbstractInvoker.invoke(AbstractInvoker.java:142)
	at com.alibaba.dubbo.monitor.support.MonitorFilter.invoke(MonitorFilter.java:74)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.protocol.dubbo.filter.FutureFilter.invoke(FutureFilter.java:53)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.filter.ConsumerContextFilter.invoke(ConsumerContextFilter.java:47)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.listener.ListenerInvokerWrapper.invoke(ListenerInvokerWrapper.java:73)
	at com.alibaba.dubbo.rpc.protocol.InvokerWrapper.invoke(InvokerWrapper.java:52)
	at com.alibaba.dubbo.rpc.cluster.support.FailoverClusterInvoker.doInvoke(FailoverClusterInvoker.java:77)
	at com.alibaba.dubbo.rpc.cluster.support.AbstractClusterInvoker.invoke(AbstractClusterInvoker.java:232)
	at com.alibaba.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker.invoke(MockClusterInvoker.java:70)
	at com.alibaba.dubbo.rpc.proxy.InvokerInvocationHandler.invoke(InvokerInvocationHandler.java:51)
	at com.alibaba.dubbo.common.bytecode.proxy3.uploadPortrait(proxy3.java)
	at com.tyut.web.controller.UserController.updatePortrait(UserController.java:72)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:133)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:97)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:872)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:317)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:114)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationProcessingFilter.doFilter(OAuth2AuthenticationProcessingFilter.java:176)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:64)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:214)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:177)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:347)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:263)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:108)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:478)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1459)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2018-08-31 16:17:54,357  Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is com.alibaba.dubbo.rpc.RpcException: Failed to invoke the method uploadPortrait in the service com.tyut.user.service.UserService. Tried 3 times of the providers [172.31.234.97:20880, 192.168.27.1:20880] (2/2) from the registry 47.104.209.96:2181 on the consumer 192.168.27.1 using the dubbo version 2.0.1. Last error is: Failed to invoke remote method: uploadPortrait, provider: dubbo://172.31.234.97:20880/com.tyut.user.service.UserService?anyhost=true&application=web-server&check=false&dubbo=2.0.1&generic=false&interface=com.tyut.user.service.UserService&methods=uploadFile,findPasswd,isValid,update,insert,selectById,isExistPhone,selectPasswdByPhone,updatePasswd,uploadPortrait,selectMe,selectPasswdByEmail,isExistEmail&pid=20844&register.ip=192.168.27.1&remote.timestamp=1533821272095&revision=2.0.0&side=consumer&timestamp=1535703425519&version=2.0.0, cause: message can not send, because channel is closed . url:dubbo://172.31.234.97:20880/com.tyut.user.service.UserEduService?anyhost=true&application=web-server&check=false&codec=dubbo&dubbo=2.0.1&generic=false&heartbeat=60000&interface=com.tyut.user.service.UserEduService&methods=getAll&pid=20844&register.ip=192.168.27.1&remote.timestamp=1533821271908&revision=2.0.0&side=consumer&timestamp=1535703421909&version=2.0.0] with root cause
com.alibaba.dubbo.remoting.RemotingException: message can not send, because channel is closed . url:dubbo://172.31.234.97:20880/com.tyut.user.service.UserEduService?anyhost=true&application=web-server&check=false&codec=dubbo&dubbo=2.0.1&generic=false&heartbeat=60000&interface=com.tyut.user.service.UserEduService&methods=getAll&pid=20844&register.ip=192.168.27.1&remote.timestamp=1533821271908&revision=2.0.0&side=consumer&timestamp=1535703421909&version=2.0.0
	at com.alibaba.dubbo.remoting.transport.AbstractClient.send(AbstractClient.java:254)
	at com.alibaba.dubbo.remoting.transport.AbstractPeer.send(AbstractPeer.java:52)
	at com.alibaba.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(HeaderExchangeChannel.java:111)
	at com.alibaba.dubbo.remoting.exchange.support.header.HeaderExchangeClient.request(HeaderExchangeClient.java:86)
	at com.alibaba.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient.request(ReferenceCountExchangeClient.java:77)
	at com.alibaba.dubbo.rpc.protocol.dubbo.DubboInvoker.doInvoke(DubboInvoker.java:95)
	at com.alibaba.dubbo.rpc.protocol.AbstractInvoker.invoke(AbstractInvoker.java:142)
	at com.alibaba.dubbo.monitor.support.MonitorFilter.invoke(MonitorFilter.java:74)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.protocol.dubbo.filter.FutureFilter.invoke(FutureFilter.java:53)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.filter.ConsumerContextFilter.invoke(ConsumerContextFilter.java:47)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.listener.ListenerInvokerWrapper.invoke(ListenerInvokerWrapper.java:73)
	at com.alibaba.dubbo.rpc.protocol.InvokerWrapper.invoke(InvokerWrapper.java:52)
	at com.alibaba.dubbo.rpc.cluster.support.FailoverClusterInvoker.doInvoke(FailoverClusterInvoker.java:77)
	at com.alibaba.dubbo.rpc.cluster.support.AbstractClusterInvoker.invoke(AbstractClusterInvoker.java:232)
	at com.alibaba.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker.invoke(MockClusterInvoker.java:70)
	at com.alibaba.dubbo.rpc.proxy.InvokerInvocationHandler.invoke(InvokerInvocationHandler.java:51)
	at com.alibaba.dubbo.common.bytecode.proxy3.uploadPortrait(proxy3.java)
	at com.tyut.web.controller.UserController.updatePortrait(UserController.java:72)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:133)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:97)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:872)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:317)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:114)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationProcessingFilter.doFilter(OAuth2AuthenticationProcessingFilter.java:176)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:64)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:214)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:177)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:347)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:263)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:108)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:478)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1459)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2018-08-31 16:17:55,208  Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is com.alibaba.dubbo.rpc.RpcException: Failed to invoke the method uploadPortrait in the service com.tyut.user.service.UserService. Tried 3 times of the providers [172.31.234.97:20880, 192.168.27.1:20880] (2/2) from the registry 47.104.209.96:2181 on the consumer 192.168.27.1 using the dubbo version 2.0.1. Last error is: Failed to invoke remote method: uploadPortrait, provider: dubbo://172.31.234.97:20880/com.tyut.user.service.UserService?anyhost=true&application=web-server&check=false&dubbo=2.0.1&generic=false&interface=com.tyut.user.service.UserService&methods=uploadFile,findPasswd,isValid,update,insert,selectById,isExistPhone,selectPasswdByPhone,updatePasswd,uploadPortrait,selectMe,selectPasswdByEmail,isExistEmail&pid=20844&register.ip=192.168.27.1&remote.timestamp=1533821272095&revision=2.0.0&side=consumer&timestamp=1535703425519&version=2.0.0, cause: message can not send, because channel is closed . url:dubbo://172.31.234.97:20880/com.tyut.user.service.UserEduService?anyhost=true&application=web-server&check=false&codec=dubbo&dubbo=2.0.1&generic=false&heartbeat=60000&interface=com.tyut.user.service.UserEduService&methods=getAll&pid=20844&register.ip=192.168.27.1&remote.timestamp=1533821271908&revision=2.0.0&side=consumer&timestamp=1535703421909&version=2.0.0] with root cause
com.alibaba.dubbo.remoting.RemotingException: message can not send, because channel is closed . url:dubbo://172.31.234.97:20880/com.tyut.user.service.UserEduService?anyhost=true&application=web-server&check=false&codec=dubbo&dubbo=2.0.1&generic=false&heartbeat=60000&interface=com.tyut.user.service.UserEduService&methods=getAll&pid=20844&register.ip=192.168.27.1&remote.timestamp=1533821271908&revision=2.0.0&side=consumer&timestamp=1535703421909&version=2.0.0
	at com.alibaba.dubbo.remoting.transport.AbstractClient.send(AbstractClient.java:254)
	at com.alibaba.dubbo.remoting.transport.AbstractPeer.send(AbstractPeer.java:52)
	at com.alibaba.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(HeaderExchangeChannel.java:111)
	at com.alibaba.dubbo.remoting.exchange.support.header.HeaderExchangeClient.request(HeaderExchangeClient.java:86)
	at com.alibaba.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient.request(ReferenceCountExchangeClient.java:77)
	at com.alibaba.dubbo.rpc.protocol.dubbo.DubboInvoker.doInvoke(DubboInvoker.java:95)
	at com.alibaba.dubbo.rpc.protocol.AbstractInvoker.invoke(AbstractInvoker.java:142)
	at com.alibaba.dubbo.monitor.support.MonitorFilter.invoke(MonitorFilter.java:74)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.protocol.dubbo.filter.FutureFilter.invoke(FutureFilter.java:53)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.filter.ConsumerContextFilter.invoke(ConsumerContextFilter.java:47)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.listener.ListenerInvokerWrapper.invoke(ListenerInvokerWrapper.java:73)
	at com.alibaba.dubbo.rpc.protocol.InvokerWrapper.invoke(InvokerWrapper.java:52)
	at com.alibaba.dubbo.rpc.cluster.support.FailoverClusterInvoker.doInvoke(FailoverClusterInvoker.java:77)
	at com.alibaba.dubbo.rpc.cluster.support.AbstractClusterInvoker.invoke(AbstractClusterInvoker.java:232)
	at com.alibaba.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker.invoke(MockClusterInvoker.java:70)
	at com.alibaba.dubbo.rpc.proxy.InvokerInvocationHandler.invoke(InvokerInvocationHandler.java:51)
	at com.alibaba.dubbo.common.bytecode.proxy3.uploadPortrait(proxy3.java)
	at com.tyut.web.controller.UserController.updatePortrait(UserController.java:72)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:133)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:97)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:872)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:317)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:114)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationProcessingFilter.doFilter(OAuth2AuthenticationProcessingFilter.java:176)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:64)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:214)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:177)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:347)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:263)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:108)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:478)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1459)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2018-08-31 16:19:22,536  Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is com.alibaba.dubbo.rpc.RpcException: Failed to invoke the method uploadPortrait in the service com.tyut.user.service.UserService. Tried 3 times of the providers [172.31.234.97:20880, 192.168.27.1:20880] (2/2) from the registry 47.104.209.96:2181 on the consumer 192.168.27.1 using the dubbo version 2.0.1. Last error is: Failed to invoke remote method: uploadPortrait, provider: dubbo://172.31.234.97:20880/com.tyut.user.service.UserService?anyhost=true&application=web-server&check=false&dubbo=2.0.1&generic=false&interface=com.tyut.user.service.UserService&methods=uploadFile,findPasswd,isValid,update,insert,selectById,isExistPhone,selectPasswdByPhone,updatePasswd,uploadPortrait,selectMe,selectPasswdByEmail,isExistEmail&pid=20844&register.ip=192.168.27.1&remote.timestamp=1533821272095&revision=2.0.0&side=consumer&timestamp=1535703425519&version=2.0.0, cause: message can not send, because channel is closed . url:dubbo://172.31.234.97:20880/com.tyut.user.service.UserEduService?anyhost=true&application=web-server&check=false&codec=dubbo&dubbo=2.0.1&generic=false&heartbeat=60000&interface=com.tyut.user.service.UserEduService&methods=getAll&pid=20844&register.ip=192.168.27.1&remote.timestamp=1533821271908&revision=2.0.0&side=consumer&timestamp=1535703421909&version=2.0.0] with root cause
com.alibaba.dubbo.remoting.RemotingException: message can not send, because channel is closed . url:dubbo://172.31.234.97:20880/com.tyut.user.service.UserEduService?anyhost=true&application=web-server&check=false&codec=dubbo&dubbo=2.0.1&generic=false&heartbeat=60000&interface=com.tyut.user.service.UserEduService&methods=getAll&pid=20844&register.ip=192.168.27.1&remote.timestamp=1533821271908&revision=2.0.0&side=consumer&timestamp=1535703421909&version=2.0.0
	at com.alibaba.dubbo.remoting.transport.AbstractClient.send(AbstractClient.java:254)
	at com.alibaba.dubbo.remoting.transport.AbstractPeer.send(AbstractPeer.java:52)
	at com.alibaba.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(HeaderExchangeChannel.java:111)
	at com.alibaba.dubbo.remoting.exchange.support.header.HeaderExchangeClient.request(HeaderExchangeClient.java:86)
	at com.alibaba.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient.request(ReferenceCountExchangeClient.java:77)
	at com.alibaba.dubbo.rpc.protocol.dubbo.DubboInvoker.doInvoke(DubboInvoker.java:95)
	at com.alibaba.dubbo.rpc.protocol.AbstractInvoker.invoke(AbstractInvoker.java:142)
	at com.alibaba.dubbo.monitor.support.MonitorFilter.invoke(MonitorFilter.java:74)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.protocol.dubbo.filter.FutureFilter.invoke(FutureFilter.java:53)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.filter.ConsumerContextFilter.invoke(ConsumerContextFilter.java:47)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.listener.ListenerInvokerWrapper.invoke(ListenerInvokerWrapper.java:73)
	at com.alibaba.dubbo.rpc.protocol.InvokerWrapper.invoke(InvokerWrapper.java:52)
	at com.alibaba.dubbo.rpc.cluster.support.FailoverClusterInvoker.doInvoke(FailoverClusterInvoker.java:77)
	at com.alibaba.dubbo.rpc.cluster.support.AbstractClusterInvoker.invoke(AbstractClusterInvoker.java:232)
	at com.alibaba.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker.invoke(MockClusterInvoker.java:70)
	at com.alibaba.dubbo.rpc.proxy.InvokerInvocationHandler.invoke(InvokerInvocationHandler.java:51)
	at com.alibaba.dubbo.common.bytecode.proxy3.uploadPortrait(proxy3.java)
	at com.tyut.web.controller.UserController.updatePortrait(UserController.java:72)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:133)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:97)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:872)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:317)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:114)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationProcessingFilter.doFilter(OAuth2AuthenticationProcessingFilter.java:176)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:64)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:214)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:177)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:347)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:263)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:108)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:478)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1459)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2018-08-31 16:19:31,924  Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is com.alibaba.dubbo.rpc.RpcException: Failed to invoke the method uploadPortrait in the service com.tyut.user.service.UserService. Tried 3 times of the providers [172.31.234.97:20880, 192.168.27.1:20880] (2/2) from the registry 47.104.209.96:2181 on the consumer 192.168.27.1 using the dubbo version 2.0.1. Last error is: Failed to invoke remote method: uploadPortrait, provider: dubbo://172.31.234.97:20880/com.tyut.user.service.UserService?anyhost=true&application=web-server&check=false&dubbo=2.0.1&generic=false&interface=com.tyut.user.service.UserService&methods=uploadFile,findPasswd,isValid,update,insert,selectById,isExistPhone,selectPasswdByPhone,updatePasswd,uploadPortrait,selectMe,selectPasswdByEmail,isExistEmail&pid=20844&register.ip=192.168.27.1&remote.timestamp=1533821272095&revision=2.0.0&side=consumer&timestamp=1535703425519&version=2.0.0, cause: message can not send, because channel is closed . url:dubbo://172.31.234.97:20880/com.tyut.user.service.UserEduService?anyhost=true&application=web-server&check=false&codec=dubbo&dubbo=2.0.1&generic=false&heartbeat=60000&interface=com.tyut.user.service.UserEduService&methods=getAll&pid=20844&register.ip=192.168.27.1&remote.timestamp=1533821271908&revision=2.0.0&side=consumer&timestamp=1535703421909&version=2.0.0] with root cause
com.alibaba.dubbo.remoting.RemotingException: message can not send, because channel is closed . url:dubbo://172.31.234.97:20880/com.tyut.user.service.UserEduService?anyhost=true&application=web-server&check=false&codec=dubbo&dubbo=2.0.1&generic=false&heartbeat=60000&interface=com.tyut.user.service.UserEduService&methods=getAll&pid=20844&register.ip=192.168.27.1&remote.timestamp=1533821271908&revision=2.0.0&side=consumer&timestamp=1535703421909&version=2.0.0
	at com.alibaba.dubbo.remoting.transport.AbstractClient.send(AbstractClient.java:254)
	at com.alibaba.dubbo.remoting.transport.AbstractPeer.send(AbstractPeer.java:52)
	at com.alibaba.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(HeaderExchangeChannel.java:111)
	at com.alibaba.dubbo.remoting.exchange.support.header.HeaderExchangeClient.request(HeaderExchangeClient.java:86)
	at com.alibaba.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient.request(ReferenceCountExchangeClient.java:77)
	at com.alibaba.dubbo.rpc.protocol.dubbo.DubboInvoker.doInvoke(DubboInvoker.java:95)
	at com.alibaba.dubbo.rpc.protocol.AbstractInvoker.invoke(AbstractInvoker.java:142)
	at com.alibaba.dubbo.monitor.support.MonitorFilter.invoke(MonitorFilter.java:74)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.protocol.dubbo.filter.FutureFilter.invoke(FutureFilter.java:53)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.filter.ConsumerContextFilter.invoke(ConsumerContextFilter.java:47)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.listener.ListenerInvokerWrapper.invoke(ListenerInvokerWrapper.java:73)
	at com.alibaba.dubbo.rpc.protocol.InvokerWrapper.invoke(InvokerWrapper.java:52)
	at com.alibaba.dubbo.rpc.cluster.support.FailoverClusterInvoker.doInvoke(FailoverClusterInvoker.java:77)
	at com.alibaba.dubbo.rpc.cluster.support.AbstractClusterInvoker.invoke(AbstractClusterInvoker.java:232)
	at com.alibaba.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker.invoke(MockClusterInvoker.java:70)
	at com.alibaba.dubbo.rpc.proxy.InvokerInvocationHandler.invoke(InvokerInvocationHandler.java:51)
	at com.alibaba.dubbo.common.bytecode.proxy3.uploadPortrait(proxy3.java)
	at com.tyut.web.controller.UserController.updatePortrait(UserController.java:72)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:133)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:97)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:872)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:317)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:114)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationProcessingFilter.doFilter(OAuth2AuthenticationProcessingFilter.java:176)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:64)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:214)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:177)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:347)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:263)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:108)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:478)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1459)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2018-08-31 16:19:32,972  Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is com.alibaba.dubbo.rpc.RpcException: Failed to invoke the method uploadPortrait in the service com.tyut.user.service.UserService. Tried 3 times of the providers [172.31.234.97:20880, 192.168.27.1:20880] (2/2) from the registry 47.104.209.96:2181 on the consumer 192.168.27.1 using the dubbo version 2.0.1. Last error is: Failed to invoke remote method: uploadPortrait, provider: dubbo://172.31.234.97:20880/com.tyut.user.service.UserService?anyhost=true&application=web-server&check=false&dubbo=2.0.1&generic=false&interface=com.tyut.user.service.UserService&methods=uploadFile,findPasswd,isValid,update,insert,selectById,isExistPhone,selectPasswdByPhone,updatePasswd,uploadPortrait,selectMe,selectPasswdByEmail,isExistEmail&pid=20844&register.ip=192.168.27.1&remote.timestamp=1533821272095&revision=2.0.0&side=consumer&timestamp=1535703425519&version=2.0.0, cause: message can not send, because channel is closed . url:dubbo://172.31.234.97:20880/com.tyut.user.service.UserEduService?anyhost=true&application=web-server&check=false&codec=dubbo&dubbo=2.0.1&generic=false&heartbeat=60000&interface=com.tyut.user.service.UserEduService&methods=getAll&pid=20844&register.ip=192.168.27.1&remote.timestamp=1533821271908&revision=2.0.0&side=consumer&timestamp=1535703421909&version=2.0.0] with root cause
com.alibaba.dubbo.remoting.RemotingException: message can not send, because channel is closed . url:dubbo://172.31.234.97:20880/com.tyut.user.service.UserEduService?anyhost=true&application=web-server&check=false&codec=dubbo&dubbo=2.0.1&generic=false&heartbeat=60000&interface=com.tyut.user.service.UserEduService&methods=getAll&pid=20844&register.ip=192.168.27.1&remote.timestamp=1533821271908&revision=2.0.0&side=consumer&timestamp=1535703421909&version=2.0.0
	at com.alibaba.dubbo.remoting.transport.AbstractClient.send(AbstractClient.java:254)
	at com.alibaba.dubbo.remoting.transport.AbstractPeer.send(AbstractPeer.java:52)
	at com.alibaba.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(HeaderExchangeChannel.java:111)
	at com.alibaba.dubbo.remoting.exchange.support.header.HeaderExchangeClient.request(HeaderExchangeClient.java:86)
	at com.alibaba.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient.request(ReferenceCountExchangeClient.java:77)
	at com.alibaba.dubbo.rpc.protocol.dubbo.DubboInvoker.doInvoke(DubboInvoker.java:95)
	at com.alibaba.dubbo.rpc.protocol.AbstractInvoker.invoke(AbstractInvoker.java:142)
	at com.alibaba.dubbo.monitor.support.MonitorFilter.invoke(MonitorFilter.java:74)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.protocol.dubbo.filter.FutureFilter.invoke(FutureFilter.java:53)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.filter.ConsumerContextFilter.invoke(ConsumerContextFilter.java:47)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.listener.ListenerInvokerWrapper.invoke(ListenerInvokerWrapper.java:73)
	at com.alibaba.dubbo.rpc.protocol.InvokerWrapper.invoke(InvokerWrapper.java:52)
	at com.alibaba.dubbo.rpc.cluster.support.FailoverClusterInvoker.doInvoke(FailoverClusterInvoker.java:77)
	at com.alibaba.dubbo.rpc.cluster.support.AbstractClusterInvoker.invoke(AbstractClusterInvoker.java:232)
	at com.alibaba.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker.invoke(MockClusterInvoker.java:70)
	at com.alibaba.dubbo.rpc.proxy.InvokerInvocationHandler.invoke(InvokerInvocationHandler.java:51)
	at com.alibaba.dubbo.common.bytecode.proxy3.uploadPortrait(proxy3.java)
	at com.tyut.web.controller.UserController.updatePortrait(UserController.java:72)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:133)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:97)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:872)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:317)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:114)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationProcessingFilter.doFilter(OAuth2AuthenticationProcessingFilter.java:176)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:64)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:214)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:177)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:347)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:263)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:108)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:478)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1459)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2018-08-31 16:19:34,035  Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is com.alibaba.dubbo.rpc.RpcException: Failed to invoke the method uploadPortrait in the service com.tyut.user.service.UserService. Tried 3 times of the providers [172.31.234.97:20880, 192.168.27.1:20880] (2/2) from the registry 47.104.209.96:2181 on the consumer 192.168.27.1 using the dubbo version 2.0.1. Last error is: Failed to invoke remote method: uploadPortrait, provider: dubbo://172.31.234.97:20880/com.tyut.user.service.UserService?anyhost=true&application=web-server&check=false&dubbo=2.0.1&generic=false&interface=com.tyut.user.service.UserService&methods=uploadFile,findPasswd,isValid,update,insert,selectById,isExistPhone,selectPasswdByPhone,updatePasswd,uploadPortrait,selectMe,selectPasswdByEmail,isExistEmail&pid=20844&register.ip=192.168.27.1&remote.timestamp=1533821272095&revision=2.0.0&side=consumer&timestamp=1535703425519&version=2.0.0, cause: message can not send, because channel is closed . url:dubbo://172.31.234.97:20880/com.tyut.user.service.UserEduService?anyhost=true&application=web-server&check=false&codec=dubbo&dubbo=2.0.1&generic=false&heartbeat=60000&interface=com.tyut.user.service.UserEduService&methods=getAll&pid=20844&register.ip=192.168.27.1&remote.timestamp=1533821271908&revision=2.0.0&side=consumer&timestamp=1535703421909&version=2.0.0] with root cause
com.alibaba.dubbo.remoting.RemotingException: message can not send, because channel is closed . url:dubbo://172.31.234.97:20880/com.tyut.user.service.UserEduService?anyhost=true&application=web-server&check=false&codec=dubbo&dubbo=2.0.1&generic=false&heartbeat=60000&interface=com.tyut.user.service.UserEduService&methods=getAll&pid=20844&register.ip=192.168.27.1&remote.timestamp=1533821271908&revision=2.0.0&side=consumer&timestamp=1535703421909&version=2.0.0
	at com.alibaba.dubbo.remoting.transport.AbstractClient.send(AbstractClient.java:254)
	at com.alibaba.dubbo.remoting.transport.AbstractPeer.send(AbstractPeer.java:52)
	at com.alibaba.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(HeaderExchangeChannel.java:111)
	at com.alibaba.dubbo.remoting.exchange.support.header.HeaderExchangeClient.request(HeaderExchangeClient.java:86)
	at com.alibaba.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient.request(ReferenceCountExchangeClient.java:77)
	at com.alibaba.dubbo.rpc.protocol.dubbo.DubboInvoker.doInvoke(DubboInvoker.java:95)
	at com.alibaba.dubbo.rpc.protocol.AbstractInvoker.invoke(AbstractInvoker.java:142)
	at com.alibaba.dubbo.monitor.support.MonitorFilter.invoke(MonitorFilter.java:74)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.protocol.dubbo.filter.FutureFilter.invoke(FutureFilter.java:53)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.filter.ConsumerContextFilter.invoke(ConsumerContextFilter.java:47)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.listener.ListenerInvokerWrapper.invoke(ListenerInvokerWrapper.java:73)
	at com.alibaba.dubbo.rpc.protocol.InvokerWrapper.invoke(InvokerWrapper.java:52)
	at com.alibaba.dubbo.rpc.cluster.support.FailoverClusterInvoker.doInvoke(FailoverClusterInvoker.java:77)
	at com.alibaba.dubbo.rpc.cluster.support.AbstractClusterInvoker.invoke(AbstractClusterInvoker.java:232)
	at com.alibaba.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker.invoke(MockClusterInvoker.java:70)
	at com.alibaba.dubbo.rpc.proxy.InvokerInvocationHandler.invoke(InvokerInvocationHandler.java:51)
	at com.alibaba.dubbo.common.bytecode.proxy3.uploadPortrait(proxy3.java)
	at com.tyut.web.controller.UserController.updatePortrait(UserController.java:72)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:133)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:97)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:872)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:317)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:114)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationProcessingFilter.doFilter(OAuth2AuthenticationProcessingFilter.java:176)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:64)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:214)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:177)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:347)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:263)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:108)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:478)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1459)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2018-08-31 16:19:34,998  Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is com.alibaba.dubbo.rpc.RpcException: Failed to invoke the method uploadPortrait in the service com.tyut.user.service.UserService. Tried 3 times of the providers [172.31.234.97:20880, 192.168.27.1:20880] (2/2) from the registry 47.104.209.96:2181 on the consumer 192.168.27.1 using the dubbo version 2.0.1. Last error is: Failed to invoke remote method: uploadPortrait, provider: dubbo://172.31.234.97:20880/com.tyut.user.service.UserService?anyhost=true&application=web-server&check=false&dubbo=2.0.1&generic=false&interface=com.tyut.user.service.UserService&methods=uploadFile,findPasswd,isValid,update,insert,selectById,isExistPhone,selectPasswdByPhone,updatePasswd,uploadPortrait,selectMe,selectPasswdByEmail,isExistEmail&pid=20844&register.ip=192.168.27.1&remote.timestamp=1533821272095&revision=2.0.0&side=consumer&timestamp=1535703425519&version=2.0.0, cause: message can not send, because channel is closed . url:dubbo://172.31.234.97:20880/com.tyut.user.service.UserEduService?anyhost=true&application=web-server&check=false&codec=dubbo&dubbo=2.0.1&generic=false&heartbeat=60000&interface=com.tyut.user.service.UserEduService&methods=getAll&pid=20844&register.ip=192.168.27.1&remote.timestamp=1533821271908&revision=2.0.0&side=consumer&timestamp=1535703421909&version=2.0.0] with root cause
com.alibaba.dubbo.remoting.RemotingException: message can not send, because channel is closed . url:dubbo://172.31.234.97:20880/com.tyut.user.service.UserEduService?anyhost=true&application=web-server&check=false&codec=dubbo&dubbo=2.0.1&generic=false&heartbeat=60000&interface=com.tyut.user.service.UserEduService&methods=getAll&pid=20844&register.ip=192.168.27.1&remote.timestamp=1533821271908&revision=2.0.0&side=consumer&timestamp=1535703421909&version=2.0.0
	at com.alibaba.dubbo.remoting.transport.AbstractClient.send(AbstractClient.java:254)
	at com.alibaba.dubbo.remoting.transport.AbstractPeer.send(AbstractPeer.java:52)
	at com.alibaba.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(HeaderExchangeChannel.java:111)
	at com.alibaba.dubbo.remoting.exchange.support.header.HeaderExchangeClient.request(HeaderExchangeClient.java:86)
	at com.alibaba.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient.request(ReferenceCountExchangeClient.java:77)
	at com.alibaba.dubbo.rpc.protocol.dubbo.DubboInvoker.doInvoke(DubboInvoker.java:95)
	at com.alibaba.dubbo.rpc.protocol.AbstractInvoker.invoke(AbstractInvoker.java:142)
	at com.alibaba.dubbo.monitor.support.MonitorFilter.invoke(MonitorFilter.java:74)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.protocol.dubbo.filter.FutureFilter.invoke(FutureFilter.java:53)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.filter.ConsumerContextFilter.invoke(ConsumerContextFilter.java:47)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.listener.ListenerInvokerWrapper.invoke(ListenerInvokerWrapper.java:73)
	at com.alibaba.dubbo.rpc.protocol.InvokerWrapper.invoke(InvokerWrapper.java:52)
	at com.alibaba.dubbo.rpc.cluster.support.FailoverClusterInvoker.doInvoke(FailoverClusterInvoker.java:77)
	at com.alibaba.dubbo.rpc.cluster.support.AbstractClusterInvoker.invoke(AbstractClusterInvoker.java:232)
	at com.alibaba.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker.invoke(MockClusterInvoker.java:70)
	at com.alibaba.dubbo.rpc.proxy.InvokerInvocationHandler.invoke(InvokerInvocationHandler.java:51)
	at com.alibaba.dubbo.common.bytecode.proxy3.uploadPortrait(proxy3.java)
	at com.tyut.web.controller.UserController.updatePortrait(UserController.java:72)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:133)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:97)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:872)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:317)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:114)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationProcessingFilter.doFilter(OAuth2AuthenticationProcessingFilter.java:176)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:64)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:214)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:177)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:347)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:263)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:108)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:478)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1459)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2018-08-31 16:19:36,304  Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is com.alibaba.dubbo.rpc.RpcException: Failed to invoke the method uploadPortrait in the service com.tyut.user.service.UserService. Tried 3 times of the providers [172.31.234.97:20880, 192.168.27.1:20880] (2/2) from the registry 47.104.209.96:2181 on the consumer 192.168.27.1 using the dubbo version 2.0.1. Last error is: Failed to invoke remote method: uploadPortrait, provider: dubbo://172.31.234.97:20880/com.tyut.user.service.UserService?anyhost=true&application=web-server&check=false&dubbo=2.0.1&generic=false&interface=com.tyut.user.service.UserService&methods=uploadFile,findPasswd,isValid,update,insert,selectById,isExistPhone,selectPasswdByPhone,updatePasswd,uploadPortrait,selectMe,selectPasswdByEmail,isExistEmail&pid=20844&register.ip=192.168.27.1&remote.timestamp=1533821272095&revision=2.0.0&side=consumer&timestamp=1535703425519&version=2.0.0, cause: message can not send, because channel is closed . url:dubbo://172.31.234.97:20880/com.tyut.user.service.UserEduService?anyhost=true&application=web-server&check=false&codec=dubbo&dubbo=2.0.1&generic=false&heartbeat=60000&interface=com.tyut.user.service.UserEduService&methods=getAll&pid=20844&register.ip=192.168.27.1&remote.timestamp=1533821271908&revision=2.0.0&side=consumer&timestamp=1535703421909&version=2.0.0] with root cause
com.alibaba.dubbo.remoting.RemotingException: message can not send, because channel is closed . url:dubbo://172.31.234.97:20880/com.tyut.user.service.UserEduService?anyhost=true&application=web-server&check=false&codec=dubbo&dubbo=2.0.1&generic=false&heartbeat=60000&interface=com.tyut.user.service.UserEduService&methods=getAll&pid=20844&register.ip=192.168.27.1&remote.timestamp=1533821271908&revision=2.0.0&side=consumer&timestamp=1535703421909&version=2.0.0
	at com.alibaba.dubbo.remoting.transport.AbstractClient.send(AbstractClient.java:254)
	at com.alibaba.dubbo.remoting.transport.AbstractPeer.send(AbstractPeer.java:52)
	at com.alibaba.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(HeaderExchangeChannel.java:111)
	at com.alibaba.dubbo.remoting.exchange.support.header.HeaderExchangeClient.request(HeaderExchangeClient.java:86)
	at com.alibaba.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient.request(ReferenceCountExchangeClient.java:77)
	at com.alibaba.dubbo.rpc.protocol.dubbo.DubboInvoker.doInvoke(DubboInvoker.java:95)
	at com.alibaba.dubbo.rpc.protocol.AbstractInvoker.invoke(AbstractInvoker.java:142)
	at com.alibaba.dubbo.monitor.support.MonitorFilter.invoke(MonitorFilter.java:74)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.protocol.dubbo.filter.FutureFilter.invoke(FutureFilter.java:53)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.filter.ConsumerContextFilter.invoke(ConsumerContextFilter.java:47)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.listener.ListenerInvokerWrapper.invoke(ListenerInvokerWrapper.java:73)
	at com.alibaba.dubbo.rpc.protocol.InvokerWrapper.invoke(InvokerWrapper.java:52)
	at com.alibaba.dubbo.rpc.cluster.support.FailoverClusterInvoker.doInvoke(FailoverClusterInvoker.java:77)
	at com.alibaba.dubbo.rpc.cluster.support.AbstractClusterInvoker.invoke(AbstractClusterInvoker.java:232)
	at com.alibaba.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker.invoke(MockClusterInvoker.java:70)
	at com.alibaba.dubbo.rpc.proxy.InvokerInvocationHandler.invoke(InvokerInvocationHandler.java:51)
	at com.alibaba.dubbo.common.bytecode.proxy3.uploadPortrait(proxy3.java)
	at com.tyut.web.controller.UserController.updatePortrait(UserController.java:72)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:133)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:97)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:872)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:317)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:114)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationProcessingFilter.doFilter(OAuth2AuthenticationProcessingFilter.java:176)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:64)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:214)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:177)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:347)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:263)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:108)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:478)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1459)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2018-08-31 16:19:37,480  Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is com.alibaba.dubbo.rpc.RpcException: Failed to invoke the method uploadPortrait in the service com.tyut.user.service.UserService. Tried 3 times of the providers [172.31.234.97:20880, 192.168.27.1:20880] (2/2) from the registry 47.104.209.96:2181 on the consumer 192.168.27.1 using the dubbo version 2.0.1. Last error is: Failed to invoke remote method: uploadPortrait, provider: dubbo://172.31.234.97:20880/com.tyut.user.service.UserService?anyhost=true&application=web-server&check=false&dubbo=2.0.1&generic=false&interface=com.tyut.user.service.UserService&methods=uploadFile,findPasswd,isValid,update,insert,selectById,isExistPhone,selectPasswdByPhone,updatePasswd,uploadPortrait,selectMe,selectPasswdByEmail,isExistEmail&pid=20844&register.ip=192.168.27.1&remote.timestamp=1533821272095&revision=2.0.0&side=consumer&timestamp=1535703425519&version=2.0.0, cause: message can not send, because channel is closed . url:dubbo://172.31.234.97:20880/com.tyut.user.service.UserEduService?anyhost=true&application=web-server&check=false&codec=dubbo&dubbo=2.0.1&generic=false&heartbeat=60000&interface=com.tyut.user.service.UserEduService&methods=getAll&pid=20844&register.ip=192.168.27.1&remote.timestamp=1533821271908&revision=2.0.0&side=consumer&timestamp=1535703421909&version=2.0.0] with root cause
com.alibaba.dubbo.remoting.RemotingException: message can not send, because channel is closed . url:dubbo://172.31.234.97:20880/com.tyut.user.service.UserEduService?anyhost=true&application=web-server&check=false&codec=dubbo&dubbo=2.0.1&generic=false&heartbeat=60000&interface=com.tyut.user.service.UserEduService&methods=getAll&pid=20844&register.ip=192.168.27.1&remote.timestamp=1533821271908&revision=2.0.0&side=consumer&timestamp=1535703421909&version=2.0.0
	at com.alibaba.dubbo.remoting.transport.AbstractClient.send(AbstractClient.java:254)
	at com.alibaba.dubbo.remoting.transport.AbstractPeer.send(AbstractPeer.java:52)
	at com.alibaba.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(HeaderExchangeChannel.java:111)
	at com.alibaba.dubbo.remoting.exchange.support.header.HeaderExchangeClient.request(HeaderExchangeClient.java:86)
	at com.alibaba.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient.request(ReferenceCountExchangeClient.java:77)
	at com.alibaba.dubbo.rpc.protocol.dubbo.DubboInvoker.doInvoke(DubboInvoker.java:95)
	at com.alibaba.dubbo.rpc.protocol.AbstractInvoker.invoke(AbstractInvoker.java:142)
	at com.alibaba.dubbo.monitor.support.MonitorFilter.invoke(MonitorFilter.java:74)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.protocol.dubbo.filter.FutureFilter.invoke(FutureFilter.java:53)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.filter.ConsumerContextFilter.invoke(ConsumerContextFilter.java:47)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.listener.ListenerInvokerWrapper.invoke(ListenerInvokerWrapper.java:73)
	at com.alibaba.dubbo.rpc.protocol.InvokerWrapper.invoke(InvokerWrapper.java:52)
	at com.alibaba.dubbo.rpc.cluster.support.FailoverClusterInvoker.doInvoke(FailoverClusterInvoker.java:77)
	at com.alibaba.dubbo.rpc.cluster.support.AbstractClusterInvoker.invoke(AbstractClusterInvoker.java:232)
	at com.alibaba.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker.invoke(MockClusterInvoker.java:70)
	at com.alibaba.dubbo.rpc.proxy.InvokerInvocationHandler.invoke(InvokerInvocationHandler.java:51)
	at com.alibaba.dubbo.common.bytecode.proxy3.uploadPortrait(proxy3.java)
	at com.tyut.web.controller.UserController.updatePortrait(UserController.java:72)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:133)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:97)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:872)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:317)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:114)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationProcessingFilter.doFilter(OAuth2AuthenticationProcessingFilter.java:176)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:64)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:214)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:177)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:347)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:263)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:108)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:478)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1459)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2018-08-31 16:19:39,482  Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is com.alibaba.dubbo.rpc.RpcException: Failed to invoke the method uploadPortrait in the service com.tyut.user.service.UserService. Tried 3 times of the providers [192.168.27.1:20880] (1/1) from the registry 47.104.209.96:2181 on the consumer 192.168.27.1 using the dubbo version 2.0.1. Last error is: Failed to invoke remote method: uploadPortrait, provider: dubbo://192.168.27.1:20880/com.tyut.user.service.UserService?anyhost=true&application=web-server&check=false&dubbo=2.0.1&generic=false&interface=com.tyut.user.service.UserService&methods=uploadFile,findPasswd,isValid,update,insert,selectById,isExistPhone,selectPasswdByPhone,updatePasswd,uploadPortrait,selectMe,selectPasswdByEmail,isExistEmail&pid=20844&register.ip=192.168.27.1&remote.timestamp=1535703400229&revision=2.0.0&side=consumer&timestamp=1535703425519&version=2.0.0, cause: Failed to send message Request [id=38, version=2.0.0, twoway=true, event=false, broken=false, data=RpcInvocation [methodName=uploadPortrait, parameterTypes=[class java.lang.String, class java.lang.String, interface javax.servlet.http.HttpServletRequest], arguments=[15235951681, base64,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, org.springframework.web.multipart.support.StandardMultipartHttpServletRequest@b1243eb], attachments={path=com.tyut.user.service.UserService, interface=com.tyut.user.service.UserService, version=2.0.0}]] to /192.168.27.1:20880, cause: Serialized class org.springframework.web.multipart.support.StandardMultipartHttpServletRequest must implement java.io.Serializable] with root cause
java.lang.IllegalStateException: Serialized class org.springframework.web.multipart.support.StandardMultipartHttpServletRequest must implement java.io.Serializable
	at com.alibaba.com.caucho.hessian.io.SerializerFactory.getDefaultSerializer(SerializerFactory.java:395)
	at com.alibaba.com.caucho.hessian.io.SerializerFactory.getSerializer(SerializerFactory.java:369)
	at com.alibaba.com.caucho.hessian.io.Hessian2Output.writeObject(Hessian2Output.java:381)
	at com.alibaba.dubbo.common.serialize.support.hessian.Hessian2ObjectOutput.writeObject(Hessian2ObjectOutput.java:77)
	at com.alibaba.dubbo.rpc.protocol.dubbo.DubboCodec.encodeRequestData(DubboCodec.java:175)
	at com.alibaba.dubbo.remoting.exchange.codec.ExchangeCodec.encodeRequest(ExchangeCodec.java:230)
	at com.alibaba.dubbo.remoting.exchange.codec.ExchangeCodec.encode(ExchangeCodec.java:69)
	at com.alibaba.dubbo.rpc.protocol.dubbo.DubboCountCodec.encode(DubboCountCodec.java:37)
	at com.alibaba.dubbo.remoting.transport.netty.NettyCodecAdapter$InternalEncoder.encode(NettyCodecAdapter.java:80)
	at org.jboss.netty.handler.codec.oneone.OneToOneEncoder.handleDownstream(OneToOneEncoder.java:66)
	at com.alibaba.dubbo.remoting.transport.netty.NettyHandler.writeRequested(NettyHandler.java:98)
	at org.jboss.netty.channel.Channels.write(Channels.java:611)
	at org.jboss.netty.channel.Channels.write(Channels.java:578)
	at org.jboss.netty.channel.AbstractChannel.write(AbstractChannel.java:251)
	at com.alibaba.dubbo.remoting.transport.netty.NettyChannel.send(NettyChannel.java:96)
	at com.alibaba.dubbo.remoting.transport.AbstractClient.send(AbstractClient.java:256)
	at com.alibaba.dubbo.remoting.transport.AbstractPeer.send(AbstractPeer.java:52)
	at com.alibaba.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(HeaderExchangeChannel.java:111)
	at com.alibaba.dubbo.remoting.exchange.support.header.HeaderExchangeClient.request(HeaderExchangeClient.java:86)
	at com.alibaba.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient.request(ReferenceCountExchangeClient.java:77)
	at com.alibaba.dubbo.rpc.protocol.dubbo.DubboInvoker.doInvoke(DubboInvoker.java:95)
	at com.alibaba.dubbo.rpc.protocol.AbstractInvoker.invoke(AbstractInvoker.java:142)
	at com.alibaba.dubbo.monitor.support.MonitorFilter.invoke(MonitorFilter.java:74)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.protocol.dubbo.filter.FutureFilter.invoke(FutureFilter.java:53)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.filter.ConsumerContextFilter.invoke(ConsumerContextFilter.java:47)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.listener.ListenerInvokerWrapper.invoke(ListenerInvokerWrapper.java:73)
	at com.alibaba.dubbo.rpc.protocol.InvokerWrapper.invoke(InvokerWrapper.java:52)
	at com.alibaba.dubbo.rpc.cluster.support.FailoverClusterInvoker.doInvoke(FailoverClusterInvoker.java:77)
	at com.alibaba.dubbo.rpc.cluster.support.AbstractClusterInvoker.invoke(AbstractClusterInvoker.java:232)
	at com.alibaba.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker.invoke(MockClusterInvoker.java:70)
	at com.alibaba.dubbo.rpc.proxy.InvokerInvocationHandler.invoke(InvokerInvocationHandler.java:51)
	at com.alibaba.dubbo.common.bytecode.proxy3.uploadPortrait(proxy3.java)
	at com.tyut.web.controller.UserController.updatePortrait(UserController.java:72)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:133)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:97)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:872)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:317)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:114)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationProcessingFilter.doFilter(OAuth2AuthenticationProcessingFilter.java:176)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:64)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:214)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:177)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:347)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:263)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:108)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:478)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1459)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2018-08-31 16:20:52,996  Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is com.alibaba.dubbo.rpc.RpcException: Failed to invoke the method uploadPortrait in the service com.tyut.user.service.UserService. Tried 3 times of the providers [192.168.27.1:20880] (1/1) from the registry 47.104.209.96:2181 on the consumer 192.168.27.1 using the dubbo version 2.0.1. Last error is: Failed to invoke remote method: uploadPortrait, provider: dubbo://192.168.27.1:20880/com.tyut.user.service.UserService?anyhost=true&application=web-server&check=false&dubbo=2.0.1&generic=false&interface=com.tyut.user.service.UserService&methods=uploadFile,findPasswd,isValid,update,insert,selectById,isExistPhone,selectPasswdByPhone,updatePasswd,uploadPortrait,selectMe,selectPasswdByEmail,isExistEmail&pid=20844&register.ip=192.168.27.1&remote.timestamp=1535703400229&revision=2.0.0&side=consumer&timestamp=1535703425519&version=2.0.0, cause: Failed to send message Request [id=43, version=2.0.0, twoway=true, event=false, broken=false, data=RpcInvocation [methodName=uploadPortrait, parameterTypes=[class java.lang.String, class java.lang.String, interface javax.servlet.http.HttpServletRequest], arguments=[15235951681, base64,, org.springframework.web.multipart.support.StandardMultipartHttpServletRequest@82c5877], attachments={path=com.tyut.user.service.UserService, interface=com.tyut.user.service.UserService, version=2.0.0}]] to /192.168.27.1:20880, cause: Serialized class org.springframework.web.multipart.support.StandardMultipartHttpServletRequest must implement java.io.Serializable] with root cause
java.lang.IllegalStateException: Serialized class org.springframework.web.multipart.support.StandardMultipartHttpServletRequest must implement java.io.Serializable
	at com.alibaba.com.caucho.hessian.io.SerializerFactory.getDefaultSerializer(SerializerFactory.java:395)
	at com.alibaba.com.caucho.hessian.io.SerializerFactory.getSerializer(SerializerFactory.java:369)
	at com.alibaba.com.caucho.hessian.io.Hessian2Output.writeObject(Hessian2Output.java:381)
	at com.alibaba.dubbo.common.serialize.support.hessian.Hessian2ObjectOutput.writeObject(Hessian2ObjectOutput.java:77)
	at com.alibaba.dubbo.rpc.protocol.dubbo.DubboCodec.encodeRequestData(DubboCodec.java:175)
	at com.alibaba.dubbo.remoting.exchange.codec.ExchangeCodec.encodeRequest(ExchangeCodec.java:230)
	at com.alibaba.dubbo.remoting.exchange.codec.ExchangeCodec.encode(ExchangeCodec.java:69)
	at com.alibaba.dubbo.rpc.protocol.dubbo.DubboCountCodec.encode(DubboCountCodec.java:37)
	at com.alibaba.dubbo.remoting.transport.netty.NettyCodecAdapter$InternalEncoder.encode(NettyCodecAdapter.java:80)
	at org.jboss.netty.handler.codec.oneone.OneToOneEncoder.handleDownstream(OneToOneEncoder.java:66)
	at com.alibaba.dubbo.remoting.transport.netty.NettyHandler.writeRequested(NettyHandler.java:98)
	at org.jboss.netty.channel.Channels.write(Channels.java:611)
	at org.jboss.netty.channel.Channels.write(Channels.java:578)
	at org.jboss.netty.channel.AbstractChannel.write(AbstractChannel.java:251)
	at com.alibaba.dubbo.remoting.transport.netty.NettyChannel.send(NettyChannel.java:96)
	at com.alibaba.dubbo.remoting.transport.AbstractClient.send(AbstractClient.java:256)
	at com.alibaba.dubbo.remoting.transport.AbstractPeer.send(AbstractPeer.java:52)
	at com.alibaba.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(HeaderExchangeChannel.java:111)
	at com.alibaba.dubbo.remoting.exchange.support.header.HeaderExchangeClient.request(HeaderExchangeClient.java:86)
	at com.alibaba.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient.request(ReferenceCountExchangeClient.java:77)
	at com.alibaba.dubbo.rpc.protocol.dubbo.DubboInvoker.doInvoke(DubboInvoker.java:95)
	at com.alibaba.dubbo.rpc.protocol.AbstractInvoker.invoke(AbstractInvoker.java:142)
	at com.alibaba.dubbo.monitor.support.MonitorFilter.invoke(MonitorFilter.java:74)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.protocol.dubbo.filter.FutureFilter.invoke(FutureFilter.java:53)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.filter.ConsumerContextFilter.invoke(ConsumerContextFilter.java:47)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.listener.ListenerInvokerWrapper.invoke(ListenerInvokerWrapper.java:73)
	at com.alibaba.dubbo.rpc.protocol.InvokerWrapper.invoke(InvokerWrapper.java:52)
	at com.alibaba.dubbo.rpc.cluster.support.FailoverClusterInvoker.doInvoke(FailoverClusterInvoker.java:77)
	at com.alibaba.dubbo.rpc.cluster.support.AbstractClusterInvoker.invoke(AbstractClusterInvoker.java:232)
	at com.alibaba.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker.invoke(MockClusterInvoker.java:70)
	at com.alibaba.dubbo.rpc.proxy.InvokerInvocationHandler.invoke(InvokerInvocationHandler.java:51)
	at com.alibaba.dubbo.common.bytecode.proxy3.uploadPortrait(proxy3.java)
	at com.tyut.web.controller.UserController.updatePortrait(UserController.java:72)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:133)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:97)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:872)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:317)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:114)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationProcessingFilter.doFilter(OAuth2AuthenticationProcessingFilter.java:176)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:64)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:214)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:177)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:347)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:263)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:108)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:478)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1459)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2018-08-31 16:21:00,741  Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is com.alibaba.dubbo.rpc.RpcException: Failed to invoke the method uploadPortrait in the service com.tyut.user.service.UserService. Tried 3 times of the providers [192.168.27.1:20880] (1/1) from the registry 47.104.209.96:2181 on the consumer 192.168.27.1 using the dubbo version 2.0.1. Last error is: Failed to invoke remote method: uploadPortrait, provider: dubbo://192.168.27.1:20880/com.tyut.user.service.UserService?anyhost=true&application=web-server&check=false&dubbo=2.0.1&generic=false&interface=com.tyut.user.service.UserService&methods=uploadFile,findPasswd,isValid,update,insert,selectById,isExistPhone,selectPasswdByPhone,updatePasswd,uploadPortrait,selectMe,selectPasswdByEmail,isExistEmail&pid=20844&register.ip=192.168.27.1&remote.timestamp=1535703400229&revision=2.0.0&side=consumer&timestamp=1535703425519&version=2.0.0, cause: Failed to send message Request [id=46, version=2.0.0, twoway=true, event=false, broken=false, data=RpcInvocation [methodName=uploadPortrait, parameterTypes=[class java.lang.String, class java.lang.String, interface javax.servlet.http.HttpServletRequest], arguments=[15235951681, base64,, org.springframework.web.multipart.support.StandardMultipartHttpServletRequest@1a7f00db], attachments={path=com.tyut.user.service.UserService, interface=com.tyut.user.service.UserService, version=2.0.0}]] to /192.168.27.1:20880, cause: Serialized class org.springframework.web.multipart.support.StandardMultipartHttpServletRequest must implement java.io.Serializable] with root cause
java.lang.IllegalStateException: Serialized class org.springframework.web.multipart.support.StandardMultipartHttpServletRequest must implement java.io.Serializable
	at com.alibaba.com.caucho.hessian.io.SerializerFactory.getDefaultSerializer(SerializerFactory.java:395)
	at com.alibaba.com.caucho.hessian.io.SerializerFactory.getSerializer(SerializerFactory.java:369)
	at com.alibaba.com.caucho.hessian.io.Hessian2Output.writeObject(Hessian2Output.java:381)
	at com.alibaba.dubbo.common.serialize.support.hessian.Hessian2ObjectOutput.writeObject(Hessian2ObjectOutput.java:77)
	at com.alibaba.dubbo.rpc.protocol.dubbo.DubboCodec.encodeRequestData(DubboCodec.java:175)
	at com.alibaba.dubbo.remoting.exchange.codec.ExchangeCodec.encodeRequest(ExchangeCodec.java:230)
	at com.alibaba.dubbo.remoting.exchange.codec.ExchangeCodec.encode(ExchangeCodec.java:69)
	at com.alibaba.dubbo.rpc.protocol.dubbo.DubboCountCodec.encode(DubboCountCodec.java:37)
	at com.alibaba.dubbo.remoting.transport.netty.NettyCodecAdapter$InternalEncoder.encode(NettyCodecAdapter.java:80)
	at org.jboss.netty.handler.codec.oneone.OneToOneEncoder.handleDownstream(OneToOneEncoder.java:66)
	at com.alibaba.dubbo.remoting.transport.netty.NettyHandler.writeRequested(NettyHandler.java:98)
	at org.jboss.netty.channel.Channels.write(Channels.java:611)
	at org.jboss.netty.channel.Channels.write(Channels.java:578)
	at org.jboss.netty.channel.AbstractChannel.write(AbstractChannel.java:251)
	at com.alibaba.dubbo.remoting.transport.netty.NettyChannel.send(NettyChannel.java:96)
	at com.alibaba.dubbo.remoting.transport.AbstractClient.send(AbstractClient.java:256)
	at com.alibaba.dubbo.remoting.transport.AbstractPeer.send(AbstractPeer.java:52)
	at com.alibaba.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(HeaderExchangeChannel.java:111)
	at com.alibaba.dubbo.remoting.exchange.support.header.HeaderExchangeClient.request(HeaderExchangeClient.java:86)
	at com.alibaba.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient.request(ReferenceCountExchangeClient.java:77)
	at com.alibaba.dubbo.rpc.protocol.dubbo.DubboInvoker.doInvoke(DubboInvoker.java:95)
	at com.alibaba.dubbo.rpc.protocol.AbstractInvoker.invoke(AbstractInvoker.java:142)
	at com.alibaba.dubbo.monitor.support.MonitorFilter.invoke(MonitorFilter.java:74)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.protocol.dubbo.filter.FutureFilter.invoke(FutureFilter.java:53)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.filter.ConsumerContextFilter.invoke(ConsumerContextFilter.java:47)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.listener.ListenerInvokerWrapper.invoke(ListenerInvokerWrapper.java:73)
	at com.alibaba.dubbo.rpc.protocol.InvokerWrapper.invoke(InvokerWrapper.java:52)
	at com.alibaba.dubbo.rpc.cluster.support.FailoverClusterInvoker.doInvoke(FailoverClusterInvoker.java:77)
	at com.alibaba.dubbo.rpc.cluster.support.AbstractClusterInvoker.invoke(AbstractClusterInvoker.java:232)
	at com.alibaba.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker.invoke(MockClusterInvoker.java:70)
	at com.alibaba.dubbo.rpc.proxy.InvokerInvocationHandler.invoke(InvokerInvocationHandler.java:51)
	at com.alibaba.dubbo.common.bytecode.proxy3.uploadPortrait(proxy3.java)
	at com.tyut.web.controller.UserController.updatePortrait(UserController.java:72)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:133)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:97)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:872)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:317)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:114)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationProcessingFilter.doFilter(OAuth2AuthenticationProcessingFilter.java:176)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:64)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:214)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:177)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:347)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:263)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:108)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:478)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1459)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2018-08-31 16:59:15,939  Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.NullPointerException] with root cause
java.lang.NullPointerException: null
	at com.tyut.user.service.impl.UserServiceImpl.uploadPortrait(UserServiceImpl.java:207)
	at com.tyut.user.service.impl.UserServiceImpl$$FastClassBySpringCGLIB$$a6ca181b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:669)
	at com.tyut.user.service.impl.UserServiceImpl$$EnhancerBySpringCGLIB$$f0156ebf.uploadPortrait(<generated>)
	at com.alibaba.dubbo.common.bytecode.Wrapper6.invokeMethod(Wrapper6.java)
	at com.alibaba.dubbo.rpc.proxy.javassist.JavassistProxyFactory$1.doInvoke(JavassistProxyFactory.java:45)
	at com.alibaba.dubbo.rpc.proxy.AbstractProxyInvoker.invoke(AbstractProxyInvoker.java:71)
	at com.alibaba.dubbo.config.invoker.DelegateProviderMetaDataInvoker.invoke(DelegateProviderMetaDataInvoker.java:48)
	at com.alibaba.dubbo.rpc.protocol.InvokerWrapper.invoke(InvokerWrapper.java:52)
	at com.alibaba.dubbo.rpc.filter.ExceptionFilter.invoke(ExceptionFilter.java:61)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.monitor.support.MonitorFilter.invoke(MonitorFilter.java:74)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.filter.TimeoutFilter.invoke(TimeoutFilter.java:41)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.protocol.dubbo.filter.TraceFilter.invoke(TraceFilter.java:77)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.filter.ContextFilter.invoke(ContextFilter.java:60)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.filter.GenericFilter.invoke(GenericFilter.java:131)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.filter.ClassLoaderFilter.invoke(ClassLoaderFilter.java:37)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.filter.EchoFilter.invoke(EchoFilter.java:37)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.protocol.dubbo.DubboProtocol$1.reply(DubboProtocol.java:95)
	at com.alibaba.dubbo.remoting.exchange.support.header.HeaderExchangeHandler.handleRequest(HeaderExchangeHandler.java:96)
	at com.alibaba.dubbo.remoting.exchange.support.header.HeaderExchangeHandler.received(HeaderExchangeHandler.java:168)
	at com.alibaba.dubbo.remoting.transport.DecodeHandler.received(DecodeHandler.java:50)
	at com.alibaba.dubbo.remoting.transport.dispatcher.ChannelEventRunnable.run(ChannelEventRunnable.java:79)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2018-08-31 17:16:36,069  Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is com.alibaba.dubbo.rpc.RpcException: Failed to invoke the method uploadPortrait in the service com.tyut.user.service.UserService. Tried 3 times of the providers [192.168.27.1:20880] (1/1) from the registry 47.104.209.96:2181 on the consumer 192.168.27.1 using the dubbo version 2.0.1. Last error is: Invoke remote method timeout. method: uploadPortrait, provider: dubbo://192.168.27.1:20880/com.tyut.user.service.UserService?anyhost=true&application=web-server&check=false&dubbo=2.0.1&generic=false&interface=com.tyut.user.service.UserService&methods=uploadFile,findPasswd,isValid,update,insert,isExistPhone,selectById,selectPasswdByPhone,updatePasswd,uploadPortrait,selectMe,selectPasswdByEmail,isExistEmail&pid=21808&register.ip=192.168.27.1&remote.timestamp=1535705169590&revision=2.0.0&side=consumer&timestamp=1535705818705&version=2.0.0, cause: Waiting server-side response timeout. start time: 2018-08-31 17:16:35.064, end time: 2018-08-31 17:16:36.067, client elapsed: 1 ms, server elapsed: 1002 ms, timeout: 1000 ms, request: Request [id=21, version=2.0.0, twoway=true, event=false, broken=false, data=RpcInvocation [methodName=uploadPortrait, parameterTypes=[class java.lang.String, class java.lang.String, class java.lang.String], arguments=[15235951681, , C:\Users\84407\AppData\Local\Temp\tomcat-docbase.4891957791579757967.8080\upload], attachments={path=com.tyut.user.service.UserService, interface=com.tyut.user.service.UserService, version=2.0.0}]], channel: /192.168.27.1:53699 -> /192.168.27.1:20880] with root cause
com.alibaba.dubbo.remoting.TimeoutException: Waiting server-side response timeout. start time: 2018-08-31 17:16:35.064, end time: 2018-08-31 17:16:36.067, client elapsed: 1 ms, server elapsed: 1002 ms, timeout: 1000 ms, request: Request [id=21, version=2.0.0, twoway=true, event=false, broken=false, data=RpcInvocation [methodName=uploadPortrait, parameterTypes=[class java.lang.String, class java.lang.String, class java.lang.String], arguments=[15235951681, , C:\Users\84407\AppData\Local\Temp\tomcat-docbase.4891957791579757967.8080\upload], attachments={path=com.tyut.user.service.UserService, interface=com.tyut.user.service.UserService, version=2.0.0}]], channel: /192.168.27.1:53699 -> /192.168.27.1:20880
	at com.alibaba.dubbo.remoting.exchange.support.DefaultFuture.get(DefaultFuture.java:134)
	at com.alibaba.dubbo.remoting.exchange.support.DefaultFuture.get(DefaultFuture.java:111)
	at com.alibaba.dubbo.rpc.protocol.dubbo.DubboInvoker.doInvoke(DubboInvoker.java:95)
	at com.alibaba.dubbo.rpc.protocol.AbstractInvoker.invoke(AbstractInvoker.java:142)
	at com.alibaba.dubbo.rpc.listener.ListenerInvokerWrapper.invoke(ListenerInvokerWrapper.java:73)
	at com.alibaba.dubbo.monitor.support.MonitorFilter.invoke(MonitorFilter.java:74)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.protocol.dubbo.filter.FutureFilter.invoke(FutureFilter.java:53)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.filter.ConsumerContextFilter.invoke(ConsumerContextFilter.java:47)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.protocol.InvokerWrapper.invoke(InvokerWrapper.java:52)
	at com.alibaba.dubbo.rpc.cluster.support.FailoverClusterInvoker.doInvoke(FailoverClusterInvoker.java:77)
	at com.alibaba.dubbo.rpc.cluster.support.AbstractClusterInvoker.invoke(AbstractClusterInvoker.java:232)
	at com.alibaba.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker.invoke(MockClusterInvoker.java:70)
	at com.alibaba.dubbo.rpc.proxy.InvokerInvocationHandler.invoke(InvokerInvocationHandler.java:51)
	at com.alibaba.dubbo.common.bytecode.proxy3.uploadPortrait(proxy3.java)
	at com.tyut.web.controller.UserController.updatePortrait(UserController.java:73)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:133)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:97)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:872)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:317)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:114)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationProcessingFilter.doFilter(OAuth2AuthenticationProcessingFilter.java:176)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:64)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:214)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:177)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:347)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:263)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:108)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:478)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1459)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2018-08-31 17:16:42,512  Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is com.alibaba.dubbo.rpc.RpcException: Failed to invoke the method uploadPortrait in the service com.tyut.user.service.UserService. Tried 3 times of the providers [192.168.27.1:20880] (1/1) from the registry 47.104.209.96:2181 on the consumer 192.168.27.1 using the dubbo version 2.0.1. Last error is: Invoke remote method timeout. method: uploadPortrait, provider: dubbo://192.168.27.1:20880/com.tyut.user.service.UserService?anyhost=true&application=web-server&check=false&dubbo=2.0.1&generic=false&interface=com.tyut.user.service.UserService&methods=uploadFile,findPasswd,isValid,update,insert,isExistPhone,selectById,selectPasswdByPhone,updatePasswd,uploadPortrait,selectMe,selectPasswdByEmail,isExistEmail&pid=21808&register.ip=192.168.27.1&remote.timestamp=1535705169590&revision=2.0.0&side=consumer&timestamp=1535705818705&version=2.0.0, cause: Waiting server-side response timeout. start time: 2018-08-31 17:16:41.507, end time: 2018-08-31 17:16:42.509, client elapsed: 1 ms, server elapsed: 1001 ms, timeout: 1000 ms, request: Request [id=24, version=2.0.0, twoway=true, event=false, broken=false, data=RpcInvocation [methodName=uploadPortrait, parameterTypes=[class java.lang.String, class java.lang.String, class java.lang.String], arguments=[15235951681, , C:\Users\84407\AppData\Local\Temp\tomcat-docbase.4891957791579757967.8080\upload], attachments={path=com.tyut.user.service.UserService, interface=com.tyut.user.service.UserService, version=2.0.0}]], channel: /192.168.27.1:53699 -> /192.168.27.1:20880] with root cause
com.alibaba.dubbo.remoting.TimeoutException: Waiting server-side response timeout. start time: 2018-08-31 17:16:41.507, end time: 2018-08-31 17:16:42.509, client elapsed: 1 ms, server elapsed: 1001 ms, timeout: 1000 ms, request: Request [id=24, version=2.0.0, twoway=true, event=false, broken=false, data=RpcInvocation [methodName=uploadPortrait, parameterTypes=[class java.lang.String, class java.lang.String, class java.lang.String], arguments=[15235951681, , C:\Users\84407\AppData\Local\Temp\tomcat-docbase.4891957791579757967.8080\upload], attachments={path=com.tyut.user.service.UserService, interface=com.tyut.user.service.UserService, version=2.0.0}]], channel: /192.168.27.1:53699 -> /192.168.27.1:20880
	at com.alibaba.dubbo.remoting.exchange.support.DefaultFuture.get(DefaultFuture.java:134)
	at com.alibaba.dubbo.remoting.exchange.support.DefaultFuture.get(DefaultFuture.java:111)
	at com.alibaba.dubbo.rpc.protocol.dubbo.DubboInvoker.doInvoke(DubboInvoker.java:95)
	at com.alibaba.dubbo.rpc.protocol.AbstractInvoker.invoke(AbstractInvoker.java:142)
	at com.alibaba.dubbo.rpc.listener.ListenerInvokerWrapper.invoke(ListenerInvokerWrapper.java:73)
	at com.alibaba.dubbo.monitor.support.MonitorFilter.invoke(MonitorFilter.java:74)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.protocol.dubbo.filter.FutureFilter.invoke(FutureFilter.java:53)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.filter.ConsumerContextFilter.invoke(ConsumerContextFilter.java:47)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.protocol.InvokerWrapper.invoke(InvokerWrapper.java:52)
	at com.alibaba.dubbo.rpc.cluster.support.FailoverClusterInvoker.doInvoke(FailoverClusterInvoker.java:77)
	at com.alibaba.dubbo.rpc.cluster.support.AbstractClusterInvoker.invoke(AbstractClusterInvoker.java:232)
	at com.alibaba.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker.invoke(MockClusterInvoker.java:70)
	at com.alibaba.dubbo.rpc.proxy.InvokerInvocationHandler.invoke(InvokerInvocationHandler.java:51)
	at com.alibaba.dubbo.common.bytecode.proxy3.uploadPortrait(proxy3.java)
	at com.tyut.web.controller.UserController.updatePortrait(UserController.java:73)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:133)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:97)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:872)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:317)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:114)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationProcessingFilter.doFilter(OAuth2AuthenticationProcessingFilter.java:176)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:64)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:214)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:177)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:347)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:263)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:108)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:478)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1459)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2018-08-31 17:18:28,312  Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is com.alibaba.dubbo.rpc.RpcException: Failed to invoke the method uploadFile in the service com.tyut.user.service.UserService. Tried 3 times of the providers [192.168.27.1:20880] (1/1) from the registry 47.104.209.96:2181 on the consumer 192.168.27.1 using the dubbo version 2.0.1. Last error is: Invoke remote method timeout. method: uploadFile, provider: dubbo://192.168.27.1:20880/com.tyut.user.service.UserService?anyhost=true&application=web-server&check=false&dubbo=2.0.1&generic=false&interface=com.tyut.user.service.UserService&methods=uploadFile,findPasswd,isValid,update,insert,isExistPhone,selectById,selectPasswdByPhone,updatePasswd,uploadPortrait,selectMe,selectPasswdByEmail,isExistEmail&pid=21808&register.ip=192.168.27.1&remote.timestamp=1535705169590&revision=2.0.0&side=consumer&timestamp=1535705818705&version=2.0.0, cause: Waiting server-side response timeout. start time: 2018-08-31 17:18:27.305, end time: 2018-08-31 17:18:28.308, client elapsed: 1 ms, server elapsed: 1002 ms, timeout: 1000 ms, request: Request [id=28, version=2.0.0, twoway=true, event=false, broken=false, data=RpcInvocation [methodName=uploadFile, parameterTypes=[class java.lang.String, class java.lang.String, class java.lang.String], arguments=[15235951681, , C:\Users\84407\AppData\Local\Temp\tomcat-docbase.4891957791579757967.8080\upload], attachments={path=com.tyut.user.service.UserService, interface=com.tyut.user.service.UserService, version=2.0.0}]], channel: /192.168.27.1:53699 -> /192.168.27.1:20880] with root cause
com.alibaba.dubbo.remoting.TimeoutException: Waiting server-side response timeout. start time: 2018-08-31 17:18:27.305, end time: 2018-08-31 17:18:28.308, client elapsed: 1 ms, server elapsed: 1002 ms, timeout: 1000 ms, request: Request [id=28, version=2.0.0, twoway=true, event=false, broken=false, data=RpcInvocation [methodName=uploadFile, parameterTypes=[class java.lang.String, class java.lang.String, class java.lang.String], arguments=[15235951681, , C:\Users\84407\AppData\Local\Temp\tomcat-docbase.4891957791579757967.8080\upload], attachments={path=com.tyut.user.service.UserService, interface=com.tyut.user.service.UserService, version=2.0.0}]], channel: /192.168.27.1:53699 -> /192.168.27.1:20880
	at com.alibaba.dubbo.remoting.exchange.support.DefaultFuture.get(DefaultFuture.java:134)
	at com.alibaba.dubbo.remoting.exchange.support.DefaultFuture.get(DefaultFuture.java:111)
	at com.alibaba.dubbo.rpc.protocol.dubbo.DubboInvoker.doInvoke(DubboInvoker.java:95)
	at com.alibaba.dubbo.rpc.protocol.AbstractInvoker.invoke(AbstractInvoker.java:142)
	at com.alibaba.dubbo.rpc.listener.ListenerInvokerWrapper.invoke(ListenerInvokerWrapper.java:73)
	at com.alibaba.dubbo.monitor.support.MonitorFilter.invoke(MonitorFilter.java:74)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.protocol.dubbo.filter.FutureFilter.invoke(FutureFilter.java:53)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.filter.ConsumerContextFilter.invoke(ConsumerContextFilter.java:47)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.protocol.InvokerWrapper.invoke(InvokerWrapper.java:52)
	at com.alibaba.dubbo.rpc.cluster.support.FailoverClusterInvoker.doInvoke(FailoverClusterInvoker.java:77)
	at com.alibaba.dubbo.rpc.cluster.support.AbstractClusterInvoker.invoke(AbstractClusterInvoker.java:232)
	at com.alibaba.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker.invoke(MockClusterInvoker.java:70)
	at com.alibaba.dubbo.rpc.proxy.InvokerInvocationHandler.invoke(InvokerInvocationHandler.java:51)
	at com.alibaba.dubbo.common.bytecode.proxy3.uploadFile(proxy3.java)
	at com.tyut.web.controller.UserController.uploadCertificate(UserController.java:85)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:133)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:97)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:872)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:317)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:114)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationProcessingFilter.doFilter(OAuth2AuthenticationProcessingFilter.java:176)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:64)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:214)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:177)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:347)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:263)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:108)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:478)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1459)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2018-08-31 19:34:01,390  Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is com.alibaba.dubbo.rpc.RpcException: Failed to invoke the method uploadFile in the service com.tyut.user.service.UserService. Tried 3 times of the providers [192.168.27.1:20880] (1/2) from the registry 47.104.209.96:2181 on the consumer 192.168.27.1 using the dubbo version 2.0.1. Last error is: Failed to invoke remote method: uploadFile, provider: dubbo://192.168.27.1:20880/com.tyut.user.service.UserService?anyhost=true&application=web-server&check=false&dubbo=2.0.1&generic=false&interface=com.tyut.user.service.UserService&methods=uploadFile,findPasswd,isValid,update,insert,selectById,isExistPhone,selectPasswdByPhone,updatePasswd,uploadPortrait,selectMe,selectPasswdByEmail,isExistEmail&pid=23556&register.ip=192.168.27.1&remote.timestamp=1535715236271&revision=2.0.0&side=consumer&timestamp=1535714185276&version=2.0.0, cause: com.alibaba.dubbo.rpc.RpcException: Failed to invoke remote proxy method uploadFile to registry://47.104.209.96:2181/com.alibaba.dubbo.registry.RegistryService?application=user-server&dubbo=2.0.1&export=dubbo%3A%2F%2F192.168.27.1%3A20880%2Fcom.tyut.user.service.UserService%3Fanyhost%3Dtrue%26application%3Duser-server%26bind.ip%3D192.168.27.1%26bind.port%3D20880%26dubbo%3D2.0.1%26generic%3Dfalse%26interface%3Dcom.tyut.user.service.UserService%26methods%3DuploadFile%2CfindPasswd%2CisValid%2Cupdate%2Cinsert%2CselectById%2CisExistPhone%2CselectPasswdByPhone%2CupdatePasswd%2CuploadPortrait%2CselectMe%2CselectPasswdByEmail%2CisExistEmail%26pid%3D19068%26revision%3D2.0.0%26side%3Dprovider%26timestamp%3D1535715236271%26version%3D2.0.0&pid=19068&registry=zookeeper&timestamp=1535715236270, cause: Not found method "uploadFile" in class com.tyut.user.service.UserService.
com.alibaba.dubbo.rpc.RpcException: Failed to invoke remote proxy method uploadFile to registry://47.104.209.96:2181/com.alibaba.dubbo.registry.RegistryService?application=user-server&dubbo=2.0.1&export=dubbo%3A%2F%2F192.168.27.1%3A20880%2Fcom.tyut.user.service.UserService%3Fanyhost%3Dtrue%26application%3Duser-server%26bind.ip%3D192.168.27.1%26bind.port%3D20880%26dubbo%3D2.0.1%26generic%3Dfalse%26interface%3Dcom.tyut.user.service.UserService%26methods%3DuploadFile%2CfindPasswd%2CisValid%2Cupdate%2Cinsert%2CselectById%2CisExistPhone%2CselectPasswdByPhone%2CupdatePasswd%2CuploadPortrait%2CselectMe%2CselectPasswdByEmail%2CisExistEmail%26pid%3D19068%26revision%3D2.0.0%26side%3Dprovider%26timestamp%3D1535715236271%26version%3D2.0.0&pid=19068&registry=zookeeper&timestamp=1535715236270, cause: Not found method "uploadFile" in class com.tyut.user.service.UserService.
	at com.alibaba.dubbo.rpc.proxy.AbstractProxyInvoker.invoke(AbstractProxyInvoker.java:75)
	at com.alibaba.dubbo.config.invoker.DelegateProviderMetaDataInvoker.invoke(DelegateProviderMetaDataInvoker.java:48)
	at com.alibaba.dubbo.rpc.protocol.InvokerWrapper.invoke(InvokerWrapper.java:52)
	at com.alibaba.dubbo.rpc.filter.ExceptionFilter.invoke(ExceptionFilter.java:61)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.monitor.support.MonitorFilter.invoke(MonitorFilter.java:74)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.filter.TimeoutFilter.invoke(TimeoutFilter.java:41)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.protocol.dubbo.filter.TraceFilter.invoke(TraceFilter.java:77)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.filter.ContextFilter.invoke(ContextFilter.java:60)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.filter.GenericFilter.invoke(GenericFilter.java:131)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.filter.ClassLoaderFilter.invoke(ClassLoaderFilter.java:37)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.filter.EchoFilter.invoke(EchoFilter.java:37)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.protocol.dubbo.DubboProtocol$1.reply(DubboProtocol.java:95)
	at com.alibaba.dubbo.remoting.exchange.support.header.HeaderExchangeHandler.handleRequest(HeaderExchangeHandler.java:96)
	at com.alibaba.dubbo.remoting.exchange.support.header.HeaderExchangeHandler.received(HeaderExchangeHandler.java:168)
	at com.alibaba.dubbo.remoting.transport.DecodeHandler.received(DecodeHandler.java:50)
	at com.alibaba.dubbo.remoting.transport.dispatcher.ChannelEventRunnable.run(ChannelEventRunnable.java:79)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: com.alibaba.dubbo.common.bytecode.NoSuchMethodException: Not found method "uploadFile" in class com.tyut.user.service.UserService.
	at com.alibaba.dubbo.common.bytecode.Wrapper6.invokeMethod(Wrapper6.java)
	at com.alibaba.dubbo.rpc.proxy.javassist.JavassistProxyFactory$1.doInvoke(JavassistProxyFactory.java:45)
	at com.alibaba.dubbo.rpc.proxy.AbstractProxyInvoker.invoke(AbstractProxyInvoker.java:71)
	... 26 more
] with root cause
com.alibaba.dubbo.remoting.RemotingException: com.alibaba.dubbo.rpc.RpcException: Failed to invoke remote proxy method uploadFile to registry://47.104.209.96:2181/com.alibaba.dubbo.registry.RegistryService?application=user-server&dubbo=2.0.1&export=dubbo%3A%2F%2F192.168.27.1%3A20880%2Fcom.tyut.user.service.UserService%3Fanyhost%3Dtrue%26application%3Duser-server%26bind.ip%3D192.168.27.1%26bind.port%3D20880%26dubbo%3D2.0.1%26generic%3Dfalse%26interface%3Dcom.tyut.user.service.UserService%26methods%3DuploadFile%2CfindPasswd%2CisValid%2Cupdate%2Cinsert%2CselectById%2CisExistPhone%2CselectPasswdByPhone%2CupdatePasswd%2CuploadPortrait%2CselectMe%2CselectPasswdByEmail%2CisExistEmail%26pid%3D19068%26revision%3D2.0.0%26side%3Dprovider%26timestamp%3D1535715236271%26version%3D2.0.0&pid=19068&registry=zookeeper&timestamp=1535715236270, cause: Not found method "uploadFile" in class com.tyut.user.service.UserService.
com.alibaba.dubbo.rpc.RpcException: Failed to invoke remote proxy method uploadFile to registry://47.104.209.96:2181/com.alibaba.dubbo.registry.RegistryService?application=user-server&dubbo=2.0.1&export=dubbo%3A%2F%2F192.168.27.1%3A20880%2Fcom.tyut.user.service.UserService%3Fanyhost%3Dtrue%26application%3Duser-server%26bind.ip%3D192.168.27.1%26bind.port%3D20880%26dubbo%3D2.0.1%26generic%3Dfalse%26interface%3Dcom.tyut.user.service.UserService%26methods%3DuploadFile%2CfindPasswd%2CisValid%2Cupdate%2Cinsert%2CselectById%2CisExistPhone%2CselectPasswdByPhone%2CupdatePasswd%2CuploadPortrait%2CselectMe%2CselectPasswdByEmail%2CisExistEmail%26pid%3D19068%26revision%3D2.0.0%26side%3Dprovider%26timestamp%3D1535715236271%26version%3D2.0.0&pid=19068&registry=zookeeper&timestamp=1535715236270, cause: Not found method "uploadFile" in class com.tyut.user.service.UserService.
	at com.alibaba.dubbo.rpc.proxy.AbstractProxyInvoker.invoke(AbstractProxyInvoker.java:75)
	at com.alibaba.dubbo.config.invoker.DelegateProviderMetaDataInvoker.invoke(DelegateProviderMetaDataInvoker.java:48)
	at com.alibaba.dubbo.rpc.protocol.InvokerWrapper.invoke(InvokerWrapper.java:52)
	at com.alibaba.dubbo.rpc.filter.ExceptionFilter.invoke(ExceptionFilter.java:61)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.monitor.support.MonitorFilter.invoke(MonitorFilter.java:74)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.filter.TimeoutFilter.invoke(TimeoutFilter.java:41)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.protocol.dubbo.filter.TraceFilter.invoke(TraceFilter.java:77)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.filter.ContextFilter.invoke(ContextFilter.java:60)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.filter.GenericFilter.invoke(GenericFilter.java:131)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.filter.ClassLoaderFilter.invoke(ClassLoaderFilter.java:37)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.filter.EchoFilter.invoke(EchoFilter.java:37)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.protocol.dubbo.DubboProtocol$1.reply(DubboProtocol.java:95)
	at com.alibaba.dubbo.remoting.exchange.support.header.HeaderExchangeHandler.handleRequest(HeaderExchangeHandler.java:96)
	at com.alibaba.dubbo.remoting.exchange.support.header.HeaderExchangeHandler.received(HeaderExchangeHandler.java:168)
	at com.alibaba.dubbo.remoting.transport.DecodeHandler.received(DecodeHandler.java:50)
	at com.alibaba.dubbo.remoting.transport.dispatcher.ChannelEventRunnable.run(ChannelEventRunnable.java:79)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: com.alibaba.dubbo.common.bytecode.NoSuchMethodException: Not found method "uploadFile" in class com.tyut.user.service.UserService.
	at com.alibaba.dubbo.common.bytecode.Wrapper6.invokeMethod(Wrapper6.java)
	at com.alibaba.dubbo.rpc.proxy.javassist.JavassistProxyFactory$1.doInvoke(JavassistProxyFactory.java:45)
	at com.alibaba.dubbo.rpc.proxy.AbstractProxyInvoker.invoke(AbstractProxyInvoker.java:71)
	... 26 more

	at com.alibaba.dubbo.remoting.exchange.support.DefaultFuture.returnFromResponse(DefaultFuture.java:218)
	at com.alibaba.dubbo.remoting.exchange.support.DefaultFuture.get(DefaultFuture.java:137)
	at com.alibaba.dubbo.remoting.exchange.support.DefaultFuture.get(DefaultFuture.java:111)
	at com.alibaba.dubbo.rpc.protocol.dubbo.DubboInvoker.doInvoke(DubboInvoker.java:95)
	at com.alibaba.dubbo.rpc.protocol.AbstractInvoker.invoke(AbstractInvoker.java:142)
	at com.alibaba.dubbo.monitor.support.MonitorFilter.invoke(MonitorFilter.java:74)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.protocol.dubbo.filter.FutureFilter.invoke(FutureFilter.java:53)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.filter.ConsumerContextFilter.invoke(ConsumerContextFilter.java:47)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.listener.ListenerInvokerWrapper.invoke(ListenerInvokerWrapper.java:73)
	at com.alibaba.dubbo.rpc.protocol.InvokerWrapper.invoke(InvokerWrapper.java:52)
	at com.alibaba.dubbo.rpc.cluster.support.FailoverClusterInvoker.doInvoke(FailoverClusterInvoker.java:77)
	at com.alibaba.dubbo.rpc.cluster.support.AbstractClusterInvoker.invoke(AbstractClusterInvoker.java:232)
	at com.alibaba.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker.invoke(MockClusterInvoker.java:70)
	at com.alibaba.dubbo.rpc.proxy.InvokerInvocationHandler.invoke(InvokerInvocationHandler.java:51)
	at com.alibaba.dubbo.common.bytecode.proxy3.uploadFile(proxy3.java)
	at com.tyut.web.controller.UserController.uploadCertificate(UserController.java:85)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:133)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:97)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:872)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:317)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:114)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationProcessingFilter.doFilter(OAuth2AuthenticationProcessingFilter.java:176)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:64)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:214)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:177)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:347)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:263)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:108)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:478)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1459)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2018-08-31 19:35:00,350  Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is com.alibaba.dubbo.rpc.RpcException: Failed to invoke the method uploadFile in the service com.tyut.user.service.UserService. Tried 3 times of the providers [192.168.27.1:20880] (1/1) from the registry 47.104.209.96:2181 on the consumer 192.168.27.1 using the dubbo version 2.0.1. Last error is: Invoke remote method timeout. method: uploadFile, provider: dubbo://192.168.27.1:20880/com.tyut.user.service.UserService?anyhost=true&application=web-server&check=false&dubbo=2.0.1&generic=false&interface=com.tyut.user.service.UserService&methods=uploadFile,findPasswd,isValid,update,insert,selectById,isExistPhone,selectPasswdByPhone,updatePasswd,uploadPortrait,selectMe,selectPasswdByEmail,isExistEmail&pid=26296&register.ip=192.168.27.1&remote.timestamp=1535715236271&revision=2.0.0&side=consumer&timestamp=1535715279887&version=2.0.0, cause: Waiting server-side response timeout. start time: 2018-08-31 19:34:59.333, end time: 2018-08-31 19:35:00.337, client elapsed: 2 ms, server elapsed: 1002 ms, timeout: 1000 ms, request: Request [id=2, version=2.0.0, twoway=true, event=false, broken=false, data=RpcInvocation [methodName=uploadFile, parameterTypes=[class java.lang.String, class java.lang.String, class java.lang.String, class java.lang.String], arguments=[15235951681, iVBORw0KGgoAAAANSUhEUgAAAKIAAACiCAYAAADC8hYbAAAgAElEQVR4nOy9ebxlV1nn/V1r733OuefeW/fWvTWlqjJVVeapQuYQEjIYEiJhECKKCOLQ4tB2t75tq223H1s/fvpt5e3XfkVtEVEIIAIhqDRTEBkkEMg8VkJSqdRcdefpDHuv9f6xnmftdW6CMiQBNevzqbr3nrOHNTzr98zPMvbtHkdoFvCAN2BN+Nt58D58b+Q7DLFlDpzep8+x4Z/PwGTJ9RaMC892DrwLz/aAKcPfzoDx9fNz+b4y9WP0GqP3mvrl3tT90E4bX9+rY3Am9EU/ywjjqAxtYAeOHRiOw3A8sA6YNDDpLZPWsdZ7DIYcx6i8bwEopSczwBQwZWCqsBzNc57MW+wpWjxmcx4jZ9lk0MghL6DqQ38RGgXYJhgb5qjXB+vl9y5U8ntVhTmrelBWYTyVLgT1z2RqIIcTz4ZNx4JpwvIMuGXwXRgdhWoUpg7AgYdhaUFuGQrP9k7mUtbB+0AbxsqzS2jm4HrQK+Gk08J7Pv/J8PXYZth8Bvg52H03dHphzitZmNylnVXiUwI0gRAqWfw4IB/pKt5ncsjy0EFrZSKVBoXgXBkmkaomNq8v14nT9wjxVMl7Yz+FmPXdjvA3MkHGSD8Ii+hNGIM+Q59tDetxXOIN51aGszycY2Gb8VjtkvZFx61EbZDFiZPAqK6JM0xYz3Zk7voO+j3wPWAeGQGPA/cA9wF3GfgShiNZAa0CTBHmsyHz6irICrBZGJ+1YcxVKXTQhX4f8gb0PZgK8hI6S7BcwsRmOOlUGJ2A2RnwU6E/2SgU62F+Dg5+FY7uF8KwUDZC/40Lw8SGMVdOCFL+uRKajfDOvvRnZCM8eE/4/dTzwjsO7IKjj4fPMiuEHJ/zhz4gnqCgIlSmi+mFMBUl5VovD0CIDkUsI0RcgpfV95n8VGrwNUEodVgTlscBXhbXJpfIK+Lu1J2oqKjPTRHSkmyg8M5NGF6G5woDL/ZwsiM8y6ebIfkHsln096TPRvqsc+F0TLqbdVPo9emY5LtKX+ig2WJXv+KLrs/fA58ADvINmo6NLBCnleflWfiu54AOjI7BxgsCAY7MQ2ceihZ0HZhh6FRwYA8c3AWUQuSFcBad43rINXeUDysnGwQol8ParJ+ELSfCQ4/DWecGQr3/HwTdc3C5cFJXj8eYP/SRKCzgrLDmqiYKY8NgfVkTG7k8QWDPO1k8YbsDMGYTovThHmWRinKW+p44Aa4mggEWkz7e18/RvnkfEdd4w4XAKz1cZww7vcNkcr2TTaYPNyZBaBmi0EjkECZ5v5H3k4xDN3VKsHGyfY3c1gs7TcaQFTBiApF0+njgbiwfx3Jr5vkKHl/J4qWbNM6JqYEDYOM2OP50cAWYaSg7YMdhwzqYnYMjh+DJB6C/LM8skrm2tRim6zow7wQ0thYaDeguhvVywHnnwo4dcPtjsHIEDu/lG7c492/39cONEJxMjLX1w5WYvFyju8O7ALOYeiFclbCOKpk4kW9MsjiKYjYKqEL8ENEmnfBM/qioCUcJQonbGc43jtfhuQnLCatFCmPCjpQ9UT9D0FypLFPEk9tdQvAmeZY3QXaTPRf6Ro3WKaIqMq5eCOT63AS5rOehXBHZ1YKH3dbzAW/5gIev6UusCWtkCAIqwMgYnHZGYMeHu8A0bOzBbAbD22FxBh76KswfljltyDzIuhkZpDc1t9D1qVLOkUHDBELWDbJuE1x+Dcwegru+HMYxOir9c1DIHK/0wZaiL3gw2R96TA4mr3exU8FUXloJK8ykU/qzijMu61yF6+KCmrAqxtXsNrJSYV9KPIgYoKwqIo8fJNy4uNSfy+0T1vMjxvITJZylisggj2UArRTN8IlYot+n7ySMyyVoDoFIDEGOTV/nqTeGiioqC6kIEPuf9CeTz52F5mgQ4LtLYbN7IQxroDLcR8k7rOE9zjBtfP2ME86G43ZAuwfTC9D1MOyh0YbmMCyvwOf/j3RW5XqXjFl3k7Z0/n09NhUJsmXoCticcRFMbAxEfnQ/DA2BbUGTQOyVDRtN0dQgm92Dyd8jknkZCKvSyRaWrH2IykCi6VrpsN6jOyXLBCVK2a0J0qjMZBMkcDo4ZLKR6xNKiAgjLMNUUfbaCfx747nJG1qRsJSolChWsd0UHdNJTglwgPVF3lvLZ5k8u7TCdldtJO/r26JgX4sNcbx42egCAKV8PzEK/RwWZmU8Wd0HE4CiU3k+APzPyfXctfW8IBP2poM2vJhDawyGh+Ghh+H0Y2DfLnjiMciatZZtdC1zEUGSIevmNcnfPg8E1RPNet0mOP0C6C7D1/4eyjKxwPDNNZP/uceXgCyslcF6CwgK5DLhSkzOyXWIGSYllBQaVC409aLga2LT1U476xWJ5aeytRSkvMEYz8u95xeBKxXNkAVXZXZAVkueZYSd6YZI++eT/vmkYylgRAJPvojjl+/0eQn9Bi1evo/9sWBdzcJ1U+q7h9vgsqD9ehfYoSHMrSNwp+PPgmNP4u9Mxe/NHuVjXY9vZzA+CTMeHrsTugfhwpfA7Z8PGrZpEq0ZEMADK6Ci65dwJuWOXt5fLYXPd14SNOQn7oV9ohEbGZOydyu0oxwi1Q3iPBV/6uOLdac6ITJceIBNbkyhWuU/p6w7CxpSOpG6Vir1DwCdElnCIpHFShEysuIwIa/A85vGsNMbWRwzKL+55HkpO7TJs7RLAxSeIFmc/GQjDGjB1M/O5POyHiYQEFOZRcrxtH+R2xD2rNd7ZCOU8qDWcJDFFpfqxQOY2ACnnQ/NMVg8DHYWXIO7+5P8l7E2fz3zODx8L3R7cMVLYKmEr34JTFFzJK8WA8ugCIRYSoC8gn4WiL5fAh0YWwcvuhS683DH7dDvEJUcvd+bIF5kMr5ytXiW0FJeGtkN2hT2EeIiQHiUc1RorerFyFTBkQn2wmrUGG5gkAgTwo40kLJEX7MzfRZwrXf8FnCBscmC2JrdRRGAwWfpS3QMq4lSrS3aDwNRLtNnqKlKd7aBaBB3RpQok5hwCLJeKia4Vf3RrsZ3+/oeqDdkZwlcC4aasNQJbHH7uXDMduh1YH5vYIdmFEYm2OkW+Oi9d3PH9F7+M/DJoSFYvwHuvk3eIwNWxdLkg6Bg1RxXBRnO2WB26S8BFey8CCaOhV33wt5dcUkDugu3QQhczMZhLl2yJtSWEg+Yxnt8WHAXtTPoEQVJj1jxTdLZKljz9TMrBFqpt8TVBktl1atlhugNUXap/ynBKkEYTsfwe95znRqyUwKLrDzy44T4TX2d2inV0B1R1iTvTVBKWacn2cFybaZsivoam/ytj8TXxvZIzOmzfP0+7e9qw7uVZ+oG23gcnHBWQMn5I0AnIE0xCWRw+OHgGYksFj6+81J+cajBg1/6bEBDdEwyZ1kxuBHV/OUAcvl9CSbXw7kXwfIi3Hk7dDoiJwtHcoqqrl5HtZ061b6V0yU04YA8E7nA2FpJUOO1WtFtskDq2lEUzDJ5WDKpq70cqXY7YOg1gwthpMNChGPAr1vDz2NoGB/kE28IxnLdBIpECYobVahqNK0N1ilrpZ5wowRtBgklJXYlSLU9el+zOCf9yYSg9fPUaG2Sx5L0U9l9lFN1A4gnwwlK7TgHNp4BnS4cPQBNB0UBjXGY78BT98DioXoNfGC9101u4ur7v8DvA/+NjDnTk/HnCWCIwuV82GjWg2mJkboPZ5wFJ54Cjz0IDz8Y7s9ssBioyGE8UfZWaovgI5SX2Hgj8eMhT2VDJRIrE6CEprtHWa2XTqALSO0DTQk2s6uM27ogCfVFG5uYfqSzrzSGP8gytnhB3jyH0oT3qO81ar7Uz3RVjdJRXNBJMQkBURNAZA8JgkZOklItT9fo445ftSEqeZ9Nn0tNJDrXPrk3fSYCBB7YvBW2nw52DOYOgOnBeAPaEzDXgT33wcEn5NlFmBv1Wpy8Hfo9ikOH+UVyXu/hZ7Hc6k1gtwNzJGy1Eo3az8HYGrjsKuiU8Hcfg6VlsRFTg0E674rkutmgFolUgYyKqM6vgfyZ2IXaywpluWoplWsyE15cNIgO+GStBiZdiWBALrIJC1DkyMBbNnr4/0zGaz1hUb3aJSUqQeUya4RQRFnJRDRQlMOECVO/aHy/r6/RTaXPS3fygMZoaiRM7YNKRFYn19UG8oG5ZBVb1mv0c3ll1BGVOAxs3wmnbIeVFZh+CoosuOjGNsKBg/Dw12BlTjTyrJ4DXYOzt8Eju2WMni3O8RFf8EFj+Dk8hyKiqUaeQ7kElHDSGXDqqbD3Ebjr/vCMvAmmDKCgKIqrTXk+XR8FGmXTMmdWrlErgzWQ62KkbNQghKG7chXyeBm03pdOMEbuTRWchM3FNVqNAhk3Au/ILevjh8KOESRUWI+7rQo/oxGaQJDGQL8i+qf1VarQKCFEw71JFj9tprYZptpeFCmeAdEynfzVz/OJCEAtqKuHSHmYAv3kejjxRVCshX1TUCzDaBPyDSFoYWUP7NsTiLCwUA2B64RFdtKXDVugHIWHHpQX5rGPr/WGK6zjJ6zjoz6DqgjzWS7C6BBccE0gtM98GpbmgkEaGzT5TPzZztXvs6IAqYUgmcJoj06YU7xQ6SH3iNnFJZCeEJNSuEkm11hh3z55cPLiqF0myLDaRKNfGUMbw+96z1uVvnT3pM/yyXfYejE9tdtJkamSwSvhPpNLEUH7OID0GhiQX9WPPjBG6vGlclG6aWO4GvVGt9RoHBUy+U4VjB074cSTgjKwfAD6FuxaaLbh0H548CvQymDrqXBkjxBHCRTBRqiK044dsOeQfD9UixrCjtd7uNXl/BE5v+iWWaYP286AM86Apx6Du+8M/WkWIYLIm4DIVWqDlfXw1LSi9lHdrFZ+d2ovlQnyyuI95FHY1ofbWm5QNjZgME7+dqIdxXsS4TsqCQhRCmHjZUcFtnmyMXzIGM40cp2vgDx4F6wdZKGqHCjcR7auFJxsJCVKHUPcqZG6iBtDkT4im47XiyJnajTUydWNovfEW1dttkigVhQZVQqUsyRcZ2Q8hEyNb4SpI5AvB/vh6DgsG3jknsAmAVwORRNGRmBxkWDEFDOMc9BowegI3P+lekxGdnMEiSAj/nQ1x2XNgh84/1p2tdfCFz4LM4cCAZY59CRsL7cMzI9qyV7nJIk9jdpzukETcBlwIAC5S4hHBWvnal9gXCBbQ6zuLNV84/257BZf75YBlp/FfuI8rwT+wnnWZEJEmeykUq91NRql6OarZGPortL3yu5U748GmCoLVsJQIlLiVMKLyL/KnJPKfakGrbs7igEyJ+ryc0jggqlZvLNBM3XUSsWxp8GOU8JnM3vCfBQjMLwWDh+ER+4ObFiDSTsl+BJG1gZCdKpd5+B7cPwOmOnB/DQwVFtGcoRgLfSEgLdv58xzz+OOvXv50U99klsBhkagW4LrAUVQgiJH1I0p850lNKSbXG2iSk8xnkDYWEKjYIQQ1Sitdjav9jqFESsTasDk4PpyjTw41dIi3zf1IqOEETpmPPymMfwaYFazTmdloZTAxOWQK5JUCdKYWmHRyBHdGN6I6cknBJUgoHZXoz+071YmOBNWqUpRnOhkg2nzEM1AHjF9ENBPvVNGAkRSI7kjKB5nXgwbNsPMDHRnoZFBa0OwFDx4L+x9KNyTw4C/eXEO2qPSdV+/C2DrRnh8t3xXBFnO5GDFM9IVE87F18CWzfCVT7Nmz35uKRr8tm3xXzodvHdyLwlnihAvZj1dDEXClAZSBJXJcVVCV3qtFxlRX6Lh++kD1cpeyeJoXKHaFt0AaYfATCXmtHNZQKomnncZeL2aU6L8YMPCOVObjCphCdEUkyhAel/piGzZkwxSJ8PXY3aJET6yUf2ZvEPnWhWKNAg3HW7kINQomC5UZNs+eV4yZ+tOhB1nBTY69RT0gaFxaI3C9BQ8fhcsTovRWFhqqjTNTcPW7bV1wJahL+1J6OVw6EmwI4KCgm5KgMcdCxe9GI4ehg+/J4y7NYbB85/7HbYbw4/ZBl0lPjVRDXA4nTPhQgPWCZ0GX3MedZygtERNb3mW1btfZUVFCdWMsQGRnAuuJGRi1MYHgqjJ/dHjEDUMJgzcag2XaQd1oeNC2qezdBAXkQ5GBWMGxQCT1WYkNbarhmO0X4nZKH13nDlT58ZEYzW1iUafudo9GIeYInuKELKZo/KXw9nnwqYdMD8PS4fC/WvWQLkGHn8Q9kiYfSEor7JqajmYm4FjMhhdC3NTRMQ/9jQ4uhzyQmwO1UpARI3qedHlcNI2ePCrcJ+YZYYmwve+B8byQ8CxxvNK75lWMEqJyybIrGkhKtIg6+6FU0Ui1Adkg1zEIp4VY4K84ZWgEHaboIdDiDVZHMMqRSZRUNJfvGEznk9by2lqElK5yhuia1GkgKg9qnxa+RoBo3830WRVlMhk0Zyr2aNOkNq5FFG9fB7ZvK6jEpBsNN3pqbIWLQCKCPLMNPErXiKb0lZhQ41MwhkXh3Ctpf1Q9sANwegkrCzCQ58J3hErNr1+FQIHrBtEHjXqL8/B0JpAiCrLn7wOvnyH9GOZ6O8dGYWrrwv9/OBfBgItWmDHoLccxAcVszLLZd7zBWu5xhj2qzILtbKphKabEgKoqUgVNzyBG/mBia6/NwhrrsqwYjE8XAdLmBDNuovigBCnVSOzTHYZKaM2zgInWMOnge1qk0tDu7xMOCI7pIG1GlmT6wKo+KAL7BIWob/bOs5uQIBWAkqIZvWiehjwyGRyr3IIRfi4Ic0gYaeBF0YmXFl9RTC3nHxG+OzIvvD50CSM5LD3cfj6/eA7YJuBoEwVFIH4PoEPZwJh4mHpaFBotG3bBnk3PD+njto+8xw482zYtQvu/HL4rDEaFKLeEvi+sMtEOcwsp9mMzzvH1Rh2ZzJm1QsU4R2BI6VKnhJnVFYSjhZFpWSe8lTRUME8ymDKy02iKdcEXf+hhC4LoSzNGE4CbsNwrBe2h7BRL+qkMYGlKtF7iApKRYg08SSDSd4Z5Sa511X1Tlwdnq8/VaZTO5e6L63YUp9mmlECZlBGTIla7Xbp5wPEm8OZL4GNm2H5ECz3wuZrTgT73GN3wtTucI8dCe+pesR0Te+IsrLTPsv7FmcCmuatkJNy/DZ48mj4XonwhuthbAI+fRscliy95jDYNSEC3HaDYlRpKogssAnrsc3A5zK42sOjRtbHuzoYRlNFNAdIo3tUTlZW7pO5VK6ikUt5GppjqJFMI2oMIQatFPaQ+omjbCfEq/kkQqAnePiM92w1BLTVLao7Qy+NrsRqkBg0UFO1M+8YsC1iidEcKkpYRQuzqq8a1oKkZyLKi0yIyqgDti9qwk3RzpqE0HzNkr2Ms+FCSqcneDe2vSi4Q2eeElAbCcbpmcPw+D3QnQssMstCfrMupitruTZGB0WoCdPZ7QeO1mqHPJD2KNwpbHnr8fDSy+DQIXjfzTXxtoYhH4XOolhAijqvO25QFT0CLRzrPZ/B8xLv2K3AkKx1zUU0qS4RewZ+JptI6a70q4MeqF+uWmeKmCYhgsh6TITx1KSx1Tk+ZQxb9WVRUxXJXhc57iZ9RzKwzIZJ9tRBFqnqH68V4s11F5n6HcojYtL/KpTT8auSlSJ8RHZBWKcEoRvB1JOLD0RoXUgYAjj5bDj2lKA0dA4FFMzHoahgzwPBe2EcNNYImggiRfk7q7lDVP7qdY5d7SyAL+G4E4Mhem4Gzr8Izjgbvno7PHBfPabWmpCctdIRTmTDvDkpDaCbzCYoJ6LOVuBTGK50FXufydlhJWQMJ1q8dDSKPsohPCGSSsDhpGMJ8YiKHkZuNCZAtfOyQ00tA6ULOQCANXGs956/93BaXNN0dyXv0BCyaJaR58aMsVUCbkonSnyp2cVaWUzV3KkJNWp+QjSRnlMElr7FCUvEgiQyqA7fIvlM3+egMQxnXgRrN8HcIXBdaDZDQtRcB564J2S55UOEzCJNMCuT92s/q2RvJP2M4oeD4SbYRkiaWlmGTRtCKumnPgyLCwE5HWDa0BoPiokT5M019L9PbZZROc5IFQnpVxZo4kFX8lLgiPZFMzadXqtLpqCVRPnk0m/N+tt+Knz/lVrpIX25SwhE5ASji64LKzsFFxSJJHKlAXwQOE0J23swhaCrRumopq7PSeQSRaiyn0x2glJKOyoEGVuH2bskacdRDz6aF6rEpqUsPUG2AS1a+5bwFr/KKK2c3FIj+sZj4fRzQ9LT4f3hu2IMaMGBvbD7/mDLa47JglQEYzfE0HzrJcgjURAjsog4kvk6znGpC2ubsHUb+DbM7IZb/jw8MzOB9TWaopisEMu+6NSmTg2dOxUNtIiKigiu4nST8Vc4rjWGnhKvEqFNN0lRJ9LHPCVbm9l2ngUvvgw+ea+Yb9SUYizBxiOdiHmuSoC6KEo4kfTBGoz3vBO4XBdJAw8UMQZSEiAqNioXekROlIFEl6JMlJVZSpO0KkkUiWxXN4xPNODkHpMugKKaslZlMfIIjYyJooupJxpfB4WqUnPKObD59OAd6U1BqwmtEeiZEEw68/UQyNoar+c39blqi8OIVCifm0BEMZhX+ld52HQMnLUB3vPXcHCvELQNsr2x0BwPPuOUk0SgSNbGyc5SG62R5+R5qL1jAJNxhfO801reaAy+FETH1Bp+LuuhGr7K/KUQ4XmXwuXnwN/dDg/dBbkV4VId4lF7FEJyPkGRQToKOS0msovfNIY36NzFRRVzQ5zMhDBXsyGv7ClR8Q1iE1TUSJFCJjXTOLyEkJS9DiBfwtri38ni6xgHftdrlG3J3DgbfnceijacfQFs2AQHjoDrwVgrsOKpOXjkEVieheZImDNNt4wJTMlYdR5i38SeqX2MofbSH92Q646Fz98ZiBACO1QZcHhDKPdR9UXuTBUNeU/U0eSPaCkQItXYA2vj728AnnDw6/XihmvyQjZZH5yEE+Ym2EQBXnQ1nHcyfOxz8MgDMFRAruq6tUSDaermSmPNtGMKGQYJkvW8ynt+LUsGqSafNG0g3fVxUYXlOSGkwgxeG1MCXDB1xNhAF/qkhmcrz1SZLu54BpE8/q1IpKw26RskiLPqq5hqKnO08Rg46dKwwNP7AhLk4+HGJ5+CPbuD0bo9LKhcQUFijkrHmYhA1hAVlVhGRNmgroN83m6HxKovf0HmNic6KNoT4b7+ssQUKq0pgAhxlLomEIsueagdAa52GKCfG37NG75m4CO+kvgAAbJKzXMypr6M64prYft2+D+fhKe+Lu/OIDeFLIwIrWWvngxPTaTK+tRkExfMczLwLhNYc7xmQHNN2LmyWS8D1wzBVEvXdyPQrsgUbVJKSILYnjqmMt4s7zOuDtuP/ZaNFUWOlNAYRMm0aT6KusqOOxVOehF0F2B+NphoRkZhuQ8PPg7TB8NubwyFTaSFkvzqF8rCRs0yAQIVDeKmku5XCREfuyWYjHodmUcX1qA1HN49OxsUjdTkFOfBCxu2NeBE75f0S9mpI4gUxoJpgK8w9HmX91yYF+wyJqC9l4BlqMUIgBtfEdIePnQLHDkIdjgoUr2upgrIIjmpBhWNqPKwp6GZj5pk2zk+7D1jym51B6mMpkQ3oP3awCaiVmzqyY+WerWfKauShUxD75WYDaItK8GolV+Ui8jmVlOWLGbqxoxaPTXxDkQH+ZD1dsplsGkLLBwAVkI1hWwtzB6Gxx+AeReqLGTdoHjFRCg38Po4v64cnOPo6042qSoBq0WkNVvg4IyMXTZ7nklSVTc8I88G51nziZS4ox1QDIr6DOcT8HD1szySwmoYy3M+TMWFVY9lXRP1uOlwX/lqOGYTfPDWEGiRD4Vg3tIHVm5zYYfqz1SbVUQoX09gWYl2JO44V/G7znGGX7XABmLMnqYWqmrrCURIGWQIU4GVf0o4Viat9MHMEGUWX8ukKYuIYf/SNMGK8Jral+2J+Rma/Vclm02RJyJi+ocg6+g4XHQ9rNsMC/uBHmTjkI/Bnkfhvi/DSi8ErFofImrI60XUxXFmlfytCGSSTUi4r/I1O46igmzEApgcgSeflLmX57QngkxWLdW22iif60Yta8VQuR6mli3V66VA5SFW+Cj7QQxpWHA9zih7/C4kwGPrsb3utaEYwHveF2rirN0KLXHrarSVVc02+kwTN1nlA9VXLkmyV00YbvSOn1Z2srpFuyIysbq7+uGf0WdR70wVAzKEjcnnMXtQEVFRUtmcPMsaIVSEiCGiXto8QeN1pibY1SwaEvlN+rF1G1xwbdi4K3vCZ/kkuBzuvxt2PwCmGUwzmQuFMvV9kcJXcYgUbaOMm7Bwr/O3qn9628a1MNoPYgCEjWdHpLbNYojeMalGrPOx6v1G5l/NZlkWFJy4+QEyQu1Esak6EQd8BTbnrRTcGJ8vcuY1PwRuPXzgQ7A4G+TUajkUhaoaoaQdXoIeYniXLr6p5ZUBsw0RpjcZwzucEzFLJdtEBky1U1VGvAeSpCYE9slqpUad6dGQa2pDdWSz5ukaZ9zNifacCnwR5ZTVpUJXIodBjbaGWlY65QLYehJ0ZmF5Pix0cwIWpuHRu2BlAYZHwA0lm4XAaVxVKz+plwnxaKgoolYEkxAlyX3pQNSluHE7HF4klsUzJkTjLK8E001e1MZmn44xnRRExpb3N3KR9VzNnXDEqnFVH2yPqFt4Cby1jndgOLvvOdhowLWvh34TPvxe8HOSAehhaT74xoshAaZKsvhKCTuPIWZVIBglBBLkshZyw9sJyTcxtgwGZThNGa20Fo5MhMowpbJJUy9EZPu+RsQYf5iyYgJL957A9kzNWtPNpAQXPSUpkSXEYiG65yoPxvXI5w6Sz++h1T3EltEDZO8/yv6FLtXMNKawsDDLzPwSZd+wIRKSh7ygGl0HxuOH1uKKIdzQGNXYFvqjG+mPbcGNb8E0hwbMKE76HeekqlEqLV6w2iw1fCzsfbgmrvaawIqXuuJsSO7Rd6jzvnMAACAASURBVKmVYLWsqXKhytdWbMqZbPyqCiWYlTZidl4tdq0vHW83Oa95xRtDNbLb/oxQIrkt49DiCF6e1w9omFdiPc+EiGKpilUsK3F73QS8OtoCVZbxSQ6xtGgUTXhKanR2VhJyXE2ExhPzXn1e72KNf4v3yoRquJoOTBcyCvbKgnQ4viZIDZIopneTTT9JMf0YQ4fuoTH1JLY7i+2vALDMN275M3yWTT31Da/3eQPfGKa3fju9jafQW3cyvYltdDecQlQmUjseA8Ad0ckDrVaQtQ5KRI3NwY6G8nCZoFXMJFSxIGHJacBKDBwWYNKiWp7wvqoM6K1xnqX0I/xR99NkvPp1b+SmPnzgE+8BesKG9TkE64IxUHXlMwOm9Zc+KimlEo7Kir6eaR+IYczAgzg262AcyeBkgooifNfXSBthwWor1AhudVdRJjKoZ6BgpdqnIlzr+3QibUBz9f+mNWi0meSnByh7NI/uYvixT9I4/DCtww9gXL8e6HehdTedTnf9KXSOv4SVLefjGiMxAl6BM/Pgsno+d5wEO7bDxz8evs8ng0+7nAOfhUXPBNEqDfJV5czVYgcQuUfVrz1LeOoC/ErMCdjEgBcf3tVswOveBIvLHLj1fZzmPXPF2rA+vifpJo3A+rs9WecKKCCP+So+QZxEsNYXy3EXvwlsVg1K2WA0d8guxNasRUOnlAXiwiSpsbPqM6BReqg9MWpCUk+LTCg+CM0G0aqpFRN1y8W5lGdaD8XRXbR2f5GRRz9Jc+YJ4pZ+Jm3reW7Ngw/SPPgga+67hXJ4kqWTX87y8ZewvPn8GglVBJF7Nm6CBSk/XBQBITvLAclK2fBacUGpy9oaZNJ5wtYmJAdBo9W0EJOQg2wMxYUMQbkCfvjHoNOHj9zMMcBvttbzC1UVNkJP5M1mE/or1MlmVgIvWu8NpwpojnJEN9WMNPgx40w8d3nIU+NrLBitxJYHO1sMUE2ebfW5iFzqw+da/CcVWtSOpvkn0ZYlE6jsREPVY5qi0JYisfeO9uOfZXTX3zC8+x9WwcD3futs2snCjmtYOONGKFoxwADgquvgiUfgiSdClLZthRJ2mZUUA9GYdWqj1KWnwaj8KSJB1dc5q7mbyqOxxo9cq8qV84G43vBmmF6Cj7wXcNBoU+YjnOsr7i9XgizYbodC9d4Fl19VBTaNURlRqFzdZLqghtoZbgy/azJyDbNK7XbqATSGWAweGUQs5i7yh8oKRmDfUGd0qZwSd6+p+6GIq/atSMgqB6q2rtcBQ1//DGP3vI/WwXueBZL47rTWobtpHbybNQ98iIWzX8fi2a8FoD0SiOApqf5VFoE7NGzw4ih3scmz1GszoJ2TKIkCKlGUcQGxFIkriIEjaiGxwA+9Bebm4SM3AzkMDUO3JM89b6t6XNvvBCL0BFmzkPImzUYg6F4FJnu3rzVSR6x5rb7iYGzkWmv5hBOlIvqTFX2Uu9lgF/JehFvdgkI8xoHr1YOJUdOJQhQNupoVqDFeJvF79hME9bK7qDdA6+A9rP3KO2nv/ZJ09Nslg++xZgzdtduZOf8tbHj5NWw5Hr7wqeClyNdKMhQim+tmFiBRwnMij1sr3pVSHBWypsYH54IGAatYENFUNr6u4Rt+LPiR//LPwvfNIXES+BAMsrLEywrHJ5tDsNQPkejGhfc2svDuCjD5u5NVEhaaxgtKkOyXnefCsl93VgeXsvK8IfJJn4GjMDzBh22Vlcp9KjzHSB2ZNE3iSXNG0pB5deelxmzjwfSWGfvqO1h713u+0yX/3m2y+RoXv4yhH/w57nx0I0NroGqD7wZTSCrmKEFq/GgaE+p9YNPqKdNyKFaiZgzUYjTEtAol2te/KZQk+eC7gEqCqQn3Ktp1u3yl1ebissQbC7YZ8nFiTKUQvSn+3EfEgeRX+TvPeIU3fFTltHhOStwiNUvWI9DiNciLqnoXaL60xtFFe5Yl5srGSHBFQmEFpcbD+Vp+0dbedzeTf/9bFDN7vrOF/ufU2mMcuuQX8VdcR8+D6Qc0i/VtqEWlSnUAQcPKiblLFUVXK6BqHor+fHldCjyvfTOYAv7qT8LfxXCwMaoc2ZDIc2fANrgRw18XRWDDlWjM6mYtHZjGu319tlpGTOQWi4mxGXeWfXaqXBFNJ9LRzNa/x6hfKz5esT2Zsh5URb0bswQZiyScPAYbUHtQyrLW4tKYPDyM3ft+1n7xf2JXl534l95k/MuX/RBTL/33teUi3eB6fo4L6KdOMA04iaFnJnArzc8ZsKBAXfgKeM2PBrb7/j8F+sFLYhJvjCHQhSlCoSg8d/uMF1UVXsHE1t0Uq4avhXyXsuWAXDcAO2GQCG0mZUES2cEKomVF+KzXJZ6zooRrbfB9Wk+svRzzHVRGQSZEFBo89HpBLlQ9Ji10tO4Lb2Py82/710eEECe//cX3MXnzf8DqWWa+Xg8lSHVhfqPCqgomJnluVFyECAFuel0IL/vLdwB9yIZqQk9Pg4juxWB52dnrcEOvQ6wq5qnXPM8VHYX1Rf+tymTwy6UatrWjSjwqsxHlSKwNRNPtCSG5erBqbtHcY5wEVIig3O+Hv0vxjmhV2l63nkzdpdZB1uuw8aO/wJp73/8drua/gOahvfsLrHvXT2LnDg2IRbqpESWzSoAhrUyrSBppUFVqauX0Nd8Po+vg/e8M6JoNhWsctX03F6XUFAHU+r2wtq7iP+VWCkkljo88RzaOrYnLQKwukOdc7AyXacACRlxISV0ZawMkZ1lQRjrLIcmbHiAKi3NBeSlLgW4JAXOlKC/9WoBWg7iR0HT1YcbocKu/lqz/2H8MWnEqKP5rbh4ahx5l/fv/LXbp6IAJTYkuimA+yJJGA11SMUlBh8G/f+DlsP1YePdfBNdc3q7fGw3jSks+oKFaMkzgoC/GcHElMl9RhJeUVW06HJD5NBTLGH6+rGqerxotcl2WEQ+HVGd42UvsUaIhO7FTxrJkXizqahAXO5WxYXfkVhL61e+s41XiBzbe+u9o7/vyC0T4DK1x9AnW3/xWzPJ8/CwWq1L3XrKukYjUJJf8U4Q89xo48Xj40/eEyhB5G9Rsp2uiv1ceaNRRPwO1tT0/W4hlpapiYG2IHo9HVwj1S1niiariNTHNUIMPhAXnUuixquTA6o4gmK8JLmq3oq1phwfygG2Q9bI8mH68keckRKuzo/Lo5Gd/h6H9X6m36gvtaa2YepLJW341IlpUTKjlwagxyGfpiRGpSe3KS+HFJ8E7PhgOmcyGxbuiIpvSD6BpBgzJZ1W9CbIMGg1e6x0T/X7tqChy4hnT8aUarUvGj3hHy3pBQjEwZ0X4vayg2wkQ7crayK2mAFW4BnR/U0+GtfU1WR52jyMQYVWGAaiJRq33xsOau29mzQO3vICE/1Tz0NrzFSY+8TsYV5eR0aT22BLlwonyqeF43sOF58Fl58BHboHZI2BGalpRkU4RNQJaXtfI7PUDd1PwKkta/T5v1AIItgFeco2shqurzCepmT8JoXC3Fm4vJNy91w3/vFYQc7VxMmpeKugmHVXiiTJIHmLUTAG9EqoOMYrGQDzTTVlza/89rPvi//tsLNO/yOZXcwgPI3ffwvD9HyMNbFG/vwJDZNEwUFvnxJPh4gvhXbfB3oNhrdSem6nnC+ogCQi2YCk70uuFtR9qhZ+92qP2EzYT54cQfVWCdRJmpQRnLed5z5m6O7IsfF/2Qli4xqTFwu2+Jp5YCFMmIhb0kb+tmH5MFpzdmQkuP9OtzTUCwHXOiwXTW2b9bf/5uVzHf9bNGINvrWGlrIKspc3DxMf/G3Z676DTWSwYkYhkDTVpasdx8CNXw19/Dp7aFYzVuSVWiIjBKvoaSzgxTGil1w/fqbvXuaCcZEGxPTNrcD42KEwae2pBYgFtYL3OcZMV+cHZYA/qdYI1PNY/FlasxOgzYm1nDzG4VXdXFFplxxRD4fdqhZBdJCxcs/40ssPKJI1/5e3kerbXMyxCryxxmrfwXWp9Nc59l949vvk4jjnhZBaXu5gkvsv4ism/+12sWEM08j/aFr04GQQ1Rybh+2+AT94NTzwAtg1eTv1SDqchXBpeVtjEUO4CMTZbtWxaiCknCYq5yZc1OmteelRSTMhNvsmKi6hf1pG5MRxcCFDDxBDjcgxslec56bhqYLYIMkHeqFm8uvw02tqZMGAH0c/dPHAP4/d+4BnlQmsNSysd2hObGVkzRvVdUGCMMVTOUZmc5W6PzNp/+qZnuS2tdDip1edHr7uCpcpQlsmm8DD0xD8w9MDHo+84mmWE42itnXYb/s1NcPuj8OUvBa9IYYNJLwfUkxOrpqVrLOtV5OJnJsiFheTNl1LasAx09DoEhDUY20K4uCjAeS7ynhPKSgJWRXGA2jVn0pe7ZEDyvWpkWvcZcfWYJnjxNfa6wbGeKjJpioBDZE4Da2//g2+4AJ1uH9sc5tU/cAPrxkfo9Prf5lJ+e80A/bKkOTzKL/3MT7Hl+G3MLi0PINLz0ay17D54lHNP2c5l553D0fmFp/V04vY/gKqM8pynNqU5H1IOfvxN8Ph+uP3TQBNsi1gRwiGFCkjAxdS+ZWxw9VmxAVdV+NfriWfM1RaUCk4oLRd6GyK2swKsmk8sUPV5pXe1ay5T6FSKdXFTROLT/a+yYmp8tkWwvuftcF/VC0qJUZ+nCbKHnnXsRabMBCVbu25j6ODdzzj5Bjg8t8Arr76Ymy46mcOzqyf/+WkHZxe54tKL+PEf+T5+7JXXMdM39Mvnl003i5w9c8tMz8zwyz/wMrLWCH6AhXjyhcMM33dL9FBlXvKFpKs/cFMwz9xyK2BC0IKyX029VbYeo/eUXWc1DTklwrImSAUndZxkQRd4VSbeuBCIITkp3Q5UfV6mQaY+IUJFYY2+UYOoT4hRZQyVBU0OrSEpiVuC64LpEKM8KpEJoRaYlcAVT8bv/otEJaubAXplyYYtx/AL3/9Sim4P9zyjEMDc0grHbNnCz738JYwePcKPXLmTG6+9mkMzc8Fl9Ty1IsuYW1zi/sef4tLvu4CXXHIxB6bnsQM5E57xO2+GbjfWj1SP1ituCHGCN78HyEJtbXXRqiKjbteUqJwLRJiLkoKIZ+qgUAVYFd4sD+Ak4HNDVQa0rABb5BKcWLHZZuzUzH5N29R9lVrJob4muuBMUG6qLEB0oxW+cx0oV6Tshg5CiVvlFZOYbYStD++5ndbhh55x4o0xHJhb5AdffhU7zjmZ6aVlnm86tMYw1+nxlhuv5axTt9KfmmFNy/KfXn89G4/fzuzC0iAhPIfNGENvcZ5y5iD5yBC/cOOVtNZMsNjpDlyXL+xn+NFPhNPohd3ecAmccRy8733hmmI0cKZK8pwLBAmjcZiBEoZZXnvYjHwetWjheLmpYxFAAK3kLDxbTRGqZFhrApxmhmvwmLRaKLYWTJ2mDCCWcCUo1XINmEYo+lO0wrWdjtqIwiCqVTKh1rkpRJaMZx0Dww/dWkPjqja9sMQJJ57AW668CNvr0/f+eXW0GGOYXljilFNO5k1XXwjLK3hr6c3Mc97JG/jZH3wVi2VA7eer5cYztbTCyp5DXHXeibzqqiuYWVh6mrw69uCtQVst4ZKz4PSd8L9vge5KKKFcqHtWQQICh9P1SXSEXAo7aXm+SkQqk0kutCTkWxP0japLrBImMQXXNNrQ6ILVLCtjuFJdb/E8OyEYkHhA0ZxjtK8QkhcUHGoHpafXqQuF61ETkX1Tgyii9mv+lSbNF/OHGH7ii8+oKRtjWKocb37FNZy2YwvMzeOcedoJWN9pc97jvKfXL1nu9phbWubI7DwHp2d57KkDTC/2+elXXcexx62jv7BU3zg1w1uvv5CXv/x6nnxiP08emuLQzDyHZ+aZX15hudujV1Y4759uhP4O2mi7xd2HO+zfP4dtNviZl7+YjZuPo9PrDezn5qH7aBx8mGNPgEsug5s/GcqVNNYEJOsZ0JyiTPKidb0qACOsNkU4IUKfBeVDj0SBkE3YF0LNxetSFdArIGtxuemEkxZyJT7nuFRDcjRf1Wm0r9oPlfBMgprhgeSN8H13OVD+6mR49UlmLpEz0p8yEONg+Kk7MFXnaZNtjWFqfpGd5+7kzVddCAtLYG0o6pSsqS5w5QIxVc5RVWHxy9V+Lrk2JQnnPM014/hGmzVrRxgbbrO23WTdaJs1hWFdXrF+w0be/OKz8EdmcMbExe73K0baJb/+6svZbLsM57B7vk+FYe/0AvOdHouLi8wvLeO6y7jluUG7X/xlEMnyzGKNIc8yMmsxxpCJ4dUArUaD/UemOTK3wPaVUc4+7ThedeXl/MHN7+X4dWPJkwzrDv0Dr77+VP7mq7D/65CPBDAqZc1EzBuMTSTIeUpgFgZqYebCwzUt2TupZ0PIYcmlZo4Tr1xzDOwyL145QjzGBOdZby0nY4i1atT1E2s5q+CadqYB+XB4SHT9SX3F9JgwRcIB0w/UNaGFHrTEbeupL7K6eaDT79O1GT99wxVs2jRB//BRipE23dIzPTPDkcPT2DyjGBqGrKDVbNFsFrQbDUZbOc3MMNYwmKyBG5kkLxpMTk4w1Cg4ccM4w62C08abTA7ldE1Bj4yh1hCNZsHoUIuJ4SGarYzR8TZUFdXRGfplNcj+jKE7O885W9by+7/+U7h+yfz0Cs4HLX+h06fb6dLtdil8SduUHFwq2TXTYanT49GDc5RlyZHpKVzZwy8eJXMV012HszCz0GW5V9KvSlaWOviyT9VZCpmNR+5leWEGsq00VpZ56/UX8+k77uTgnq8zPtKOG2/z0u08sOst7LojWDVsI+Qd51I+rxKOGHV/U5/YEOV4JVaxjqgtWU8TUFt0JspKD+JRbKMjUC3CwhQne1hfNDmiiHiZMXWQqhHXi9azVh3Fie8ZG+TAxlBQQnpLIQonmm6UcoS1x1rWEEv+Ir/njliMHYDeMssPf56VpcDuNDzIGJiZX+L6667i9ZedA9OzAZ3Lkq1rmlxxxVVsyntsHmvRz0fo24LRkVGGhoZYt6bNpvFh1rcLzljfDqwEg8Hg5Qw4IwJPnlvMQIdlEiRuyfd79A4sJnT3dEHWWEuv04V9wRs0XoSDlCc2jAisyD8TCNdVnpeJR8D1Kwxh8sOBSx5r4J6DS6yYisf2zTG10KFfdplfWMCWPZr9BVb6FXcdXGL96BD0+vSXljllx0Z+9Lor+eW3PYCTUBmPZ+pz/8Dc6Qcwm47BNsD0QneqnJpDyXJqOojJApKpBy4W3oJYEMGqXFhz2Vh3062Ab8HwBLg5mD8ap+vS67+PW3OBm50KqZppp9HURl8kPmLbDBpxZkKF+t5KkAU1wNJKh9IQLi0xUlErLprUXYrP0Qhhji3t45Jt6/Dt08iHC7ZunsSanG0bxmk3Cl50/GaarqLbLwMKrHTZecwo//utr6a9ZohmuykhPIhBS4ioH3xKVVkGhUstbWUVELoXNMz+c6D19PrSn/43NrgrQefyM42Qrjycs3UNGMvFJ26MOb4hXwOwFldWzM50GCo79OeX8Mbg5xf5mavOpj30S+yZWmCxXGBmaorZfQe5s/Mkc61jKCupjQl0xJSXJ5YTa4mn0ppcCFI05oGaRtJnI/QD4fd+GZwjzdGgkXenoTNFzIU/+xTOPXkzt5rmez3e8WE8r/YVdfFGHzdsgFglQEmO7i6JLKism9BBLSusQi7UqGiJpyVEn2VqssHBWzYc5B07HqMS2ccLchg5idD2+/SWlgdkKGMMRZFTlRVlVT0jSv1Lbp4gPxdFTtkvqZwLc+A9RZHj2228GoFLh/WOP5s9hp/Zv6NOrNI1iHJTLRPGM2rEop0eVawnNqgSq2UBMwGyMoP2eFCUlw4G4FJO2W7Dj7+JW973QV6TC/KdZUXA1JwGNd/4TM7okNDuXifw+koquQIRzlUD9vXH4acRXUd4fKxMK7MYjxDz8OZ1ByilelP4PjzNyZSXUdhMFsJ7euLe+9dGhCCb+ZnmwAQvj1lYAExUDisMr2gf4lfM8cy6olYmZQ00iiZWkaUmVIt4ZASAcIlrVpRbRPHJhmF8OERuze+tAyLwgU7OORc++yhn5R2wvqJtHNsqqQCgSoS1YBqh6GMxHNTw5SVBwkRLVdTUFET923jqk9z1usQFGB3mph7UOaOLnN+ewXmHc/JPzCj+ebYV/ktqIcghzKNzHucca0yXG0eO1PGJQoR6pkohqSBO/kVuB0+TDbXQq7WSHGWgsRaGRmBlCmb3EAOcKxdEjR3b4dyzwcG2C86mnfuKE/FYzeI3AsmN4RAM2e/LWW9dQshWVe+MOiCttjXJhhgoOh7Ll6yynCjRVi5EbPzUeVPYJV5oz0MzwA+OHuTPZzZHbqx2Pk+NgBrskqn852v7cWqCyxsi0jVguBHAam6fgBY1xz/+ZNh+Ahx7HDy+D7r7sLcdYVuOZ5sSki2CYTpvBlmwvwLdRfBaQkRRMEEm9Yaoj1g1LSWwSOCJfUrtlAXhAMVmCy69DK5ZfuaYwxfac9NeMjzL9sYyj1ftEDGv0VNevCTJegf2L1aUPIBKVUHfAkPQtKG2uDPh5K3l6fo9myfhRafB2DpYyuHAQXj/u6HbDZaX9Rs4McdxAhnYoXB0a7MZLlicCbKgqQbZa5r8pE3pMoYFeerywdTmGk0HVdtij4C8F18BO9wCJ/Rrs8gL7XloHm4cP8r/mjtu4Cg6S222iVH2vv7Oa+CLkdCvArJeKBC6OFM//pxT4IxzoFXA4lG45164//H6e0tQXvY9yQm5bXBCIWzYVIENq0asSOeTG70jHl0QlRpPPOvYwwDL1vAhDcZUs40HRobh4suh24Y37Pv6czPZL7Rv2IyBn1/7FB9Z2cCefquuia32wCTqPp6H7cH0wbflNK0uLB+AJcGQdRNwzbkwNAGdFTh4EO64CxaSKD2T1zQgVpYT8sY6NuQWSlFEyg7R16hKCFDvGJPYuFSzVRaMsGY/qJPEetdequwTzgE586Vwxsocr9j3JJeUCZa/0J63tt52uXXjnfzO4jb+amVT4FbiuIjFtKzYEW3gmJmBlS7MPA50YaSAl5wDm44H04ahKbj9q/DQE/V7tHJt5sGU4r1x0ZS33gx91H+8t8DL/GINt7GZhC0bguSa1cqKMUgV/tp8oxE1HuIOM4KMWpn+xLE+/+6iA5zXneaC5RcI8Hul3d0f5bO9Cd5fbubx/lAI7c/C2cc2D84HPw3LUi55+yZYeyaceyIUc3DPA/CVXbXdPqPWB5SranJcmROLfXnLJ0z2Tn9H1eP81IkdZUG5ORbnkSfF4ySgzkFOBFov/uPMBwM24tZrmYpf2b6Hn5jcx9qqV8udL7TvqbbiMz7SWc9/75zIU26IaglWjgAO1o7B+WeF499GPNwzDbvuh6MH6/tFtKQU/3ShOdOS30wezIHGB3Gw6nOHMX/sv07FtoxVkTXwdDasGrCq+JoOqJ6VLHymsoRVY7WFC4fmeOeOh9hW/GOHRbzQvleaB+arjP+w5xQ+cHQTF5wNa3eEDMz2DNz9ODzw8OA9GuxAXsuYWRYIsaL2yFROskLVi+d4PLcVI87WxsmIdGaQTWttk1jxVXqrjhirSohc5zx4qfy/2XT40En3Mpk/v8lNL7RvvxlgLKt4xwkPcv7lOffm63hwH3ztzmDWgwAwQy2gWceoWnEPYmu9oVfWyq3zgQBJKoRgGDbFH/tZZxjT6FsNyVJ27KhZtnYw1kjxEkcmRk5172WS52xciD/42zPv5eqho88bG/be0ygKzPAQNEJ6Ir0e/cXlkP/8z8gN6L2nyHPsSFvKbQD9PuXiElX1/Ixluso5696LOVo2aBTQXBfYbAaxELz6meNhTS4QaiU+5yIP13R7kCWpyVIYdC6vLJmB+jwdDdOyxOqx8cFCrFrhy/nA6+O5K4ZYwrgvlH/lxnmuaR1dPbbnrDXaLRhuM390kdu+9iTzszNkRc6WDRNcfspmiiKDhSW63d73PEE2Wk0YabM0u8Ln79/LoUPT5NaybmKcq87YTLPVkLF0n9OxrLUlb9x2mJv9VqwNp6/2e8HerICVEdx7ylnjIaAEO6Ml+JxT+zJ12FmWZwUjGrqlJ9hrlEzMzod4GDWVnPGWxaBt8DENgcyE0HDfgU0T8Kazj+JnnnulxHhPMTHOUwdmeNs7/5av3f8wT8yuMDs7S9HIWTe2hh0bxrj+sov4iesuZqjZpDs7j8nsP/3w57kZ5ykmxzh0aIH/cfNt3HnPvTy5sMLho7PkGNaOj7FjwzjXXX4+P3v9RTRbo/Rm5+E5yhw0Bq4dnuIPj2ylXAJbhmis5nDgfGjNSy32L6YfPdvPZlJQQeyTIH5tE0W8EZO/0/toPbe1jKfmF6C2K9raMB3ddgrFiFdFinKOrIfzr4Jf238fl3eOPCcTlL632LiOv/ncvfzqOz/MIw89QGFgbKRNM89x3tPp9Zhd7pI3W1z10iv472++gdO2rqM7Pfs9h4yNDZN89o5H+aV3fJj77vkaufGMDbdpFjneQ7ffZ25phawouOKKy/mNH34F55+8ie7UzHM2lr29JqfteTFFM0R022ZdE6nsU1cIlgguPTMny+pqwNFMknBXNRHmZYdFYGTQjydNPxOhU8O/48PkMp9eS6ifcs5VMNeBNd3nVkGxHorJcT74ufv4yd/+I6qFoxw3OTaQg2IxjAy1GBlq4Zzn4x/7GPuOTPEX//EtnL5hmP7C8veGHcl7GpPjfOqOR3nzb/8Rc4ee4tjJsaddlmdNhltNnPd8+lOf5rGnjvLuX/1Jzj9ubDCR61lsWxtdGi0wQoRWiFCDX9QbU1WEQ0YLMEWdv5QL0VlTpyJoTCOwaI1meQqF5j6w11y0IDVAQu0tyVwIWNASI+oKBFg7AeddA7YDfhYaNtF0nuXmvacYHuLh3Yf5r3/yAfpzBhyNvwAAIABJREFURzhmYvyZkv9is9Zw/MYJ7vryl/h/Pvhx+lkec3C+m817yIea7D0wz6/+yYeY2r+bLevW/qP3WGM4dv0Ejz3wNf7v9/w1nb4P59M9V60ViC2HGIVdOsnqy6gPmmyGbD5f1TGIVkw6XtIOskJKjQSdorLG0FU5EENMjNbyH54Qj2ZN0IjUZecEHWOBRmDNBOy8BrJF6B+B0Ta47LlbZWsMfqTNOz/2WR556EE2TYxRfRN5pd7D5okx/vJvP8WnvnQf+bq1z2pq57fTrAE/uoY//9Tt3HnX19iybu03ORbPlslxPv65z/OBv78bO7HmORuLbUo2nlhJPFLlIavNfuGAx9rVm2mdElv/s3mSmB8U3I51sKjBhBrmo5W90pM91V8M1PknpvYrD4/BeVeEEhIzs2BHwIyEAu/PVSuGh9j1+GE+fc9jjLWb35J81G42WJ6b4zN33kevdOR66OB3qRVDLXbvPsrffu0hxoaKb6lkSaMo6Kws8qV77w3HSjwHY/FIZDbEqm9aR73q1r5omsGjZh11mUE1cMuBobkQoDeEc2AsS9Z4phPxLp4IpHGEGnmd+xohY/S12A5HhuH8q4OmPT8F+SgMrYWH74B9C41nfVJiazV5Yv9hHj9wmPHh9reEBM571o2NcsehRfYfmCFrPof9/GZao+Do9BS7n9r7LY/Fe8/ESJt79i/w6NePkg01n/XuHfDNmFIKdch/V2rXmDzIj8YQ8+CdJchwBQOJV17lRSlV6DOmLDCVxggqCqZVHnyyOa38p6iYt+Ccq4NKPzMFQ6MwthZ23QWHd8Nj/WH4R6W276QZ2uUS/ZmDg5VSv8nWLHIOHTrK3NIKfJcREWDId3GL357hv1UU7DsyzfTiYrAeP8vtYYbpyZkp3od6SX2pZ5Q3QjC1zakPbrI14hmRDclE4y6CDJk3wmcmZ9piOGIMAwnxKh+qv9j6ujSZIcCud6Ha14uvCw+fnwonUw6NwK47Q8lbgNu6a3kuVdLSFmTNbw1BtDkgz7Owu5+zzfLNN6eO/G9jujwea/NQvOg5kBHv6I2F07+ELVZOUgukjqJtJGa9AnxDiE1lQRvkwlwI00gyntDTEWvgsHZb3XuqHisqKivWEPLKQyOHC66BloG5I1CugdFx+PpdsOeRoJabDD63tJa7zJpnfWIgdNZnTfLhb09AX+n0OG7jOtaOjkop0+9u65g2+drN31bl2+Vuj+Mm17BhfDQ4d5+l5oGusdzc3RJLEHsCmhWtAD55RojCQuQ/iBVB9JSx9Hkat6BnNVZ9DlsPu6N2LLybFB1ldzrxnkCA4LO/L+SaTB2EZg5rxuGJ+2Hvo0FWoEXc2b9lTnrWJmZgkpZXOPWEzZx9/GaOzi9+S6XpjDHMrHTYecw4GzaOUT3P1Waf1jpdjt+yjrNO2MTU3MK3pHgZY5he7HD61nUcf/wk5apydN9J8x5+r38iR/NGtOUVUutI5T1fQr8bEqVcl5Dj1A/ODT3JTKvKRQVXjkcpg6Kz23rDbvWmRHYMMRsvhoaZgIS5hXOugdY4zO+HahjWTMKBB+HJB4KoFcuVmTCQrzLGLzTOeNYmR1t/pcOWYye4+vwzmV/p4dw3jySLKx0mJ9dx9XlnUriQmP/dbP1uj2M2jHDjJefSMY26OsQ30ZY7Xdav38Qrr7iAoux/U2afb6Z5D7eYY/gDc3x93IilLsJJOOyp1wlEF4+zU2UX6hLWQg+uL+fzSREOKWm42xp4AkQd9wlsQoRFl9UZXWddCePj0HkyCJ3jG2H/bnjsHjn2Soq1p54XPHw028jPrJzBAd949kQYY/DTc7z5ZZdy9aUXsvfIP+3iCpvDc3BhhTe8/GquftHJ9Gfnv+tuPg+42Xl+6MoXcf3lL2HvkWlMUmXsmZp+t39qnh+84QquvfBUqvlvDU2/Ueth+R92G/+2PA0vyGY88Vg74wMC9kKl4Rq81FuinFVMgh75XeqyZzboVMZD2WN3xit+YxH4FU8oBaA0EotvQuTxO18MY8fC0r4gIxYbYOpJeOgrgSibI9Qnkst9toDWuiC43jc3wntXjmG6anBavsiI+c5RyJUVE+vXct7JJ/F3Dz7BY7ufZLTdesbq/tYaFle67J1f5qaXX8P/+unX0vBVYMvfA/5mVzmG1wxxwSknce+Bae5+8GGGh5rPaBe01tDp9Xny6AKveuW1/NHPvo6iquh3+98RIfawvNdt5pfNqXys3EDVAdcD5Ow8J0pKVQU09BKJpVJdntUxCSAeI/GkaKnCTEx/ZQ+qPg7H/5XZG36j7+GNFiYg0Z5Vk1YivAg2nABHDwUXYHs9PHkAdn1RiG04XGtBrN1iXc+gPRmiNXoLsFJmfLkc46/KYzjoWxxnV5iw34F8ZgzVSodjNoxx0c6z2Nu13LnrCTpLoVRbv6zol6Fo08GpOZoTG3nrD7+G3/+xVzCUQW955XuCCIEwlk6P9ZNtrj7/DA6tGL7y8G6WF0MKXL+s6FdhLIdn5ikbI/ybN3w/v/+W1zDSyOnPL2K+TRffss94hz+WX3KncgvHMNVv0F8KbNRLIaWKUP/IA/2lgI6ZqQkvE41YC7h7HzRm2wjHllRO8qH7QaZ0wXHy9SznbSZ7u8fBhzN4tWb3q/9Ys6xOPxe2nAVT+0L+6tAxcHQWHrwNcCEcKJf4Rc32U+0aC+t2QDEeivDQFToVg2i24vjjsQe4cfQ7i9AxQDE2ykKn4pN3PcItt9/LvQ88xP/f3nkHe5Jd9f1zb3f/wosz8ybv7E7YOLM5sYAkQBaWJcBGBqlMyUCZMsaowBYlMH9QSBgLV2ETbBlMgUtygSmqwEJhJe1qJaSVNofZMLuzOc2sdtJOfukXu+/1H+ec2/3eqjBKSEjTVa9m3u/9uvuGc0/4npQNlgBHvn4r33f1Zbzte67mdVduxy/1GPYH33SR/OWuGCPtmSmWSs9tDzzNzQ89zRPPPY9bOklwjnzN+Xzv5dv48e+9gtdfcxnZYMjwa2ir8WSY4ufLK3k57wJS83zUIxVINMbUnRTCWl4EtMVZ0hfVlTeuSJE1DnXl5RqlPUZSUbV9nlYW+ZjL+DHn/jhC5Ded430W4t8McrjoMrj4GnjlpIDWG9fDyXnYdwe4EXSmJQo7y6mLLHkBO6tKBrhuO+TroXcCGNT6JqWkr26qhjy+6z7a7mtTsmOItNsFrJ1lcGaJpaVFYlmJXpi3mVk3S7vlGZ2eJ8b4LUmEdkmUeY5bM0Nvvs/S4hItAoHIOCtYu3aaVrugPD1fV//6qt4DP19dyS3ZBrKotS77EszgozhGxpm0KClyGCxAHIA1CrVQriwXQ6V0UrTLq5Hi1C8d+uoGNNENRoz/Cc9vGAS/zyOgtSXDB2DHTrj0ejh6ArIBrJuD+SV47A5gJDXvKjQAQoMgidqHVw0dwx+9im3LcYlBJusqODZq8/hgmhu781/1xgE478TaPH6Kdp7RmZlaseJVb5nRkhD7tzIRgoxvXFZw8gzdPGNidqL+Y4TQHzBaWk7f/WqvnsvY62dxlURclwN15+YSZzh2ss8e6C0AY41DzFUsQ13tLZe8Z8MPq7HmtwwU+lNpGTIJBcuAosWjWS7F6Ilwd2pfhjx063a4+Hvh+CnRB+bmJMp23z0QR9KLI0DqRmTEBdpA0IJo1QvjokwgQN2tSq3rADw0/NoJsXmNy+pbAqT+elzfyLk8xRTHqhahX1f0imhluEwkXpYJEYZKjZEoRGiqV7utKp1ympHig1UpkI4vhWFZYX/nxDWcdcHn3FP2SKUKTwDPOxXNcxthz3fD2UXo9WH9rLzgoXthvCiVP629rnda2lYPpXW6t2Yy0ckaWites8yrACjuFB18fjz3DVnoc9ffft0zXkscyD5Yqoc5NrprgBwGZ4Q7+oy64rKWJsw6wt2qINx0tAChB4yk8mzh1AfthVDzAjproTsLuee5/jwn+osS0mec8J4KmJmFa75POlGNTsDENLgJePRBGC4Im16NA6ZnmBuwahT8hFTGrEL+Lt0ASQXifQZPtGZYdq+FKc5d39jrC3GdqGS5RFHHUkRnd63kIw+UE1rv7hCEKMsgrY7xUp64HAnMY1LVoeI4CD3kDjozMLFRvDLDPvTPcG/VJ7XftWLrX2xNwzVvlgcuH4d8BiYKePg+mD8u4riiYRU1CM3kf1nWEbvm7LZEakPXXaTOa3UScDlaU3Bre9M3YSu+c69n4hSP5rOpY2x/JNxtYhrwsHwGsqFGUjvF/krJ0MwmIO/KfZlXgNpAbF9Lwgppn9HdKPRURhjOS+m60ZA7rEa3t7YEhedvbvx+iR04cQqKGZielSCG+cMa6KpIeUoxVc6YGobHxmdKdN4hoxkrGl/VoUJlADJ5VzYDt4SN56rC/j1dMcIn/Sa8c/ixVF7wBXTmhKONTmnAgqaFhwqcGqGtLrSltjxtDedymtUZh/I9HDADU1thYq3AN8OjMDoCRNE/i4zPZU5FvkXWXv9GjrQn2Ld8VDtIrYUXn4BDB+Wl1imgGRzZ5IipIWSsRTFKmEGr1Ed1EaWydlFCiCbmxEr7/PxaDoevf1Dnueu1VwA+FTcw7En5ONeB6Y1CaL2zqjNaRJruY1kCheiO3hr4BCgXYbgI/WUYVOC7ML1BxPtwBEvHYfmoGL2liuqpNvtjxSHjoB7gxjeIz/jkCT7j2jA7Ay8/Da88BZPTomhmjSAGaPgUaXBKHbDpiEHTC01PiNTfCQFcS4DuyVnRP3uLjg/3Nv/978p34PUwa3huOMFwKMygMyfGxuA4ojblNcKRivznMDErqlQ5hPGCFGcaLIiB09kAa7eLITLqwdJhWDoE1bzQQWgBbdExC88tWUvuGw3AX3I1bNgIJ49AG25euw4OH4FXHtMyEUqEzcuI0Tgh1MCmObyb6LrGnImDGwHCvZOq8931cn//jOimH+xvox9XvfDc9XW//ri8gLIvXrHJOQjLMHhV81GsjLFCb5kT/3J7RrraD5ehdwrGPRHLM1tgbit0u2I1nzmk9bN7KkG9xCZkFaDNhXo9Pt6ehKoFazZCvvNyOHFUqjPMrOeBE8d5+em9bHdtiF0hnNzVFq/5ohsdFMRQqWr9MVnQyCCiQjUrqkZk0JmSFmpLC1omuQUnOm3+OmzlJ/3hbxkX8LfbtT9O86neeloTUjp6OA+jecRb0tKoGCdGic/rYAYyGAzlp5iGyUlR68Y9mD8Gg3mJMcxywQmtOnCqq+QUWxzycm/Mg5PTsONSOG8r+IWT0A+wdi0sLxMfe4APU4lCCrXf2Oe1UWJgdTJaFDM0f2Ny4biatadOP9pGy0/A1DrxvPS0WkY+KbrKh+IF3wKB+9+eV4yR/1VeQHsasimxjMenRQz7jvTT8VoDM9daheMIVVsk2MQEzExCtw2Ds3DqJTh5AJZPipHSnVIQXBOpskxgnuBhGMQqzzt8eP2FxMt3wxUXSY3tfGkZptcLR3ryPqDir4pZfiUV3pSxJLDTrmaTTwsLrzRc3GrmGI7o1GCxTkVR3UataegvIOBnB0ktBJ6jy0f8Vt4ejpzjil/HK0Z40U1xa3sjObD0qlq5rdop0WxpUTnJSVk7KUZGOZKAh9Gi0It5YiYmAE0VdS3BIuNAPguV+piVcWVTsHk7f7VjB2yehCMH4JHHIZ9aI1zpsX0CYnfW8FBV8YSHK0IUd10ICNtWqMd5ofTKIi3QUhMqtkOUv1tTQBc0hFw5aV6ISV96qSrf7qr/Mcrp8QX8brWTH4nH6DYTHs5dX/P1X1oXUQ4dPcUI6UBVUDf6tq5TQcRo8LA4D+Ml0e3JgUL2sFDOmUHqaB9UHBcafzjONdqqgs2zsHUnT2w8n4cGA3jgQTjwpIwr73Zg/15YOCsWkVq5HwL+W6EZ/KlYuyVGK22kLgEGVmvZiaDBDqZLOsTnGNryvdaEgKbDkZY3dojPUsVC2YOXltv8dr6L/zj5wrdEWZpvh+vzfo5benOMF2VP/DREbfLjnQQ7xFJ9xT3hehbW74GJdl3TJteqDygUNx4J4aIFmSwYJkYxdNavh127YMssH3r5IOx7DHpWrdCD23R75NVnRV9LbXI962LksPd0DKQ2nNC5mhPav+YoTz9qaaHc0AOokzsAU5thcg0snBDLyk9L6JAbSbTGuC9ioIiR+zfex87stU3Ez11f+fUDw5t4cnky5Z0Yk7Eqrm4gDKOsGs2aYIWOFhECDJkQZKuthklbfs9KIcpSibPjYNtm2HYxUDJ48XHOe34/pzVeIlWcy199BoopeZHpdg5OAx+tKt4JNQGaR8Tww7yRx50iaiB1tDROGZGTxli8KO1pWFqWkzczA7Sg31f2X4HXHIkyc/zSwm5uXvsInOOLX/UVgPePLmL/4iRZkNAu1FMS9YeowQ6qVjlVrSynzKnY9Wic6RhiH3oK8eTagDzrCCG7Ajash/O2wZZNcOoVePQBPrpwhtP2PBdIFWZ9d41wqkqDD/BYAfY/yKwafIMGVgPZXnVIy0fwJN91bWF7ISwQi8oidKbXCfteOiXoPEGU21EQRdln8EBcyweH276B2/Ttfz1SzfKB+QvIzMs1rpGOqGoRuf5r8BzKUFS1SiF7Ub0jmQDbLU2iD30YnBQAe3AUNq6BK66Ajevg6Ufgrttg4Qx/kIxZNYYrNZC8WTbQsHqBELg/Ru6xvJ2maLar2U1qNXGabpgmkQnnba8TY6Qdob8I86ckXo2g4kHFfaGO9lDBexcv5ukwdQ7S+SqufnC8a3GPlAwulVFEDYCuSJEvEZJEi+qoSDq+a4Txhbr613AkW9vtkqqDdTfDTT8E/+R1EE/CfZ+Bpx+GAPc4x/2pu5XqkdEJsudLy0M1qmnALkR+O3G2BgGmjkTUBGo/K4IWfJqbgJyT0nK36ktvtsGCHMTMyQnxKJ5oz9KxlM7zb5YupxfOhYl9pdevLl3GgXG33ohQE0IMjQh6XWujt0qLtKc4U2ouaUBGngnzWDgjhHrRZfCDPwzbt8Ojj8LnboXjRxNt/JfEce3HgmQi+KJQiIZ6rFanxHtuAfatJsYVbj3qz5LhEklJWNEhx68lHHG0LO6fcgDdHAoviq0l+GOhY7GOAPYeXqgmeXdv9zmu+He8YoQ/HGznLwdbkg4YdU1jVKxQv1tBagjp0O+GmjM6L+I3BUHod6qhwm/TcNOb4HVvBHcW7rsF9t4vpbWzFhDY5yOfcqtUOJBBdLqQp24BsSaw9JknEnlfCHwCXhvkYNE2TRinSbTJgMnEMu50pXvlsAeTXZngeERK2HKo7qKEbLokKiZuHm/kksEufrXz0td/577Nrr8ZzfGbZy8k9T6hFp92mTi20oMxinSKqG6okdcGdDtlKrGS3o0AWy+BK2+CuSl4/gl48N46q6GdCzQXM34jRqKVDnGh1kPztoDgPjMKaHI8aoICPuUcDzZ9y6l6WKTuz6x6YaYczU5X1Cib9hohuNGixLD5XAYcG+9trlLmxbKqKVQOy+8Od/CXoy0rv3zuWnHdM17LzyxcmbQsq+CVrlXr3eROqUdzA/XA1Z60DAnnyibguu+H179JMv3u+jzce5fsaWbWtRDug3g+aQ0DvKulb7sjcQzDZchRf2J0cnIcNX6kiVHROd7r4DPN7P1EPL7B0aw0iWKH0clnWUdeOl5WjLGlsW1mVVNbcUmZNRGv4iDXhaoyeLfbTTcL/Gh1rLGq5y6AveUsP332SgbBJ06oW4JVZDAMD+N4qKcsAlVDXzSjRcXzoAeM4YIL4OobYGYTPPsCPHUf9LRNrs8a8acFBHhfFojR19LOOWmlFp2krhIhN4vZ0j+bnBEdPIHPAp8Ogbc2jZJILcatnYGdsmAsXqtA5E6wwixr6KINLhvMoe0blravF650SFPBrjzvPe5yymXHj/ujnCNGuZ6rJnnn6atZiHkSgbiaCJsGS3QIKytJnjLfEL1GC5kXwhrOy992Xw/X3SBGyt13wctP6L2QaiT5+vZPuygMLJY1t81mhFYG86S2Kbn1vDBdD1b+m6CZyHu85wedo2hyRDs9jlW6YYMQ21qOJIxqSMY3vp/6QKul7PTIRqj7RhdicXcnZREWz8K7RnsYdzw/0Try9d3Rf4DXw+MZ/vX8FSzEXNI9GwZBs3cO6LH1Im2SCqVWslfdvFLdcjyQ8iBrtsLVV8H2nfDSEXj0Pslr8miesxd/srl2yRi7jPcwrqP1PdDSzMDytIDZTgt85iGIy8ZFbWdGY/ONu8lgn8HzRyHybq8TMC5oOFMzPMxrzKFrC/A56pNKWFh97tUQkBGlZfBmprMUkgFWdCQyeLCARI1EePfCZRyfbPHvOwe/IxljBG4bbeBnzl7BCCcuON301Ogz1IwiJrkMTolP3bqyZxolVWRy2AmwczfcdCNMdmDvXnj8Ibk/QxwSJSTFr9J35Bl/VHmeiZqtGdDwsEJTEYIEuLhcDFbX/XCsB2mzWxXw0oBrZmPkKRxbEzv39b1W+8bpPTGH7jqYXA+9eYnAcbVFLq8KNfGm3BezygsIhcADRVes7XJRiNBcTbEUaOGd7SP8/sQz31nEGOHPhtv4D/OX1GVcnBBYcxlSXWuXviJgckDqGhqyoeK8KmEwgIkpuPY6uOgSOH0cHnkADh9SnV2ZhBkeDlJRVxc5UrTYUxbMh4G8LJ8WI3VwVugk6wgnrTSgOk8xgnZSjFWvmrOXm+ad4xccfKw507CKKEFPWFtCvOxlaTEaJzWtqf1dJiJ1FltSHL7dEkIe9GShMmpxbvrqnw+3ciS2+Z2J5zjf9/+uW/kP9urHjPcuX8SfLZ8nxVUNEvlbDqJrrHtCPJqeM0SPr4JU+rjqOtgyB0/vh/sfRAovQR1XColmLH5VOAS/EGFeyjuIoVq0JR0kBsGTczVqDKZz3b+OrwGjgRTMmHyPvp6Ej/zfCO9IohhSRLYT44boRSmd2SQJ2KMlJB2x8ayxKsUJ59LD4DTAcmJG1Ib+PJQLOnlPqji2gnh1kdf7Eb878Sxvzb9x/f++mVeM8ESY4RcWLuPJ0VRdEk7ddf+/dJ9UOFMJyYgp9iXXmGm49Cq4/ipYXoIH74cjz8u9hRduZiLfx1qnb9gFH8Hx9jzXFNWOqFWDeeG0bS38HkKNUWZeCfE1+cpAar7s60kYoB0qNnvP4zg2rMhTSbMFclFMJ+aEzZdLokA3c58DpGLxlusaCgkrmtI86uVFyYnw5Ur2HxuTtwajVRCAtOjAT2aH+eXwEnN8+zQrdw4+0NvO7yzvZFDKpG09vIZtNSXZapqMkErFWAqHC1qGrg+z58GV3wXbNsKxl+CRe2FhUZ/lVa1CNTcNXAiu/jzCCQdXRc+xiOzL5Abd/57UVsxzVQlCYxwR3NTHhKUZjGPhYJbyiav1vkpzXfXjfwbcnLiSrxfFIdldnfXgOgJYxqEQYirvbKfJodouuC7QlRTWHFiaF+zRSpMYx22WiE6Wt7L4ogOIW4nNYch73EF+Ih7+B6s6mv51e7mO/9rbxSPjGcwAWI12fLl7gbS/zcS2gKAPg3lJlrrgcthzHUyW8Nh98NRTcmtqnxxJG5/poAyis2cS+dEMPhGQvZ1eByEXd26h9FGpXmptdEHHNXWzKAdW9xq1oJpf+nIT1fCvPwLeZcRQ6uwz1Q8nNsuLq6WamGJVP9PM+gwIbfATohN6RBxXI2BIqkBr4LcFXTjUIvNAS1yILmsUDI3y/reGE/yce4Wb3NmvlA6+uVeEZ+IkfzK4gL8YbgENWDVdMIljowa9x4IKykjqmePU42GqUH8guceT6+Cya2HPdph/Fe6/E45r5HTuFL81cRdrVMVUNkh78ccR3mUHo7NOrOLhUt3+Yjyux2/jzVQldFOfqKnMKdVHVhLf6v838MIJ79kbA3usLJnTxWhNS87yaKCponaiGs8KulBZIS6jyWn5fGlRxIVXqxiE2zXxzajQUUR0ytaEPKesSHCFOfPNGnxjPMnP5Yf4vuz0V0wTf9/XwdDlQ6Pz+ZP+Npl3RdqbxByqWnNq+votxjCqHHWlHMxSg1sGS7Ku27fDdddK2sYTj8MT99fFswy5oKm22frr/xtoy1POcWMM9GKE9oTUU+8NSNmboWwYOqZOeBqi+eaI05yFqBlXTQa4Ii+l8Zk9CLgkBh7EMRszUpfTYhZaU6LfBY03TN4bVBXISUD1xIwsbH9RcCVK0QsTMN4QA07HGiJEtcyLXNIVgwKx5vkJkGq2mHh5izvJO7Mj/EBxmpZrxqF8868H4ywfHW/mr0ebmR9lyZqNmgvSVE9Wj9p+H2tab1YJJwxR0jhDEFHcnYRdV8C1uyGegTvvgVdekXszV+O4q+ETt+pztSnmgZuIPBuiNgLSSg8EkVChbLiPXc1U7NEhgJu9JSYcMJavJUS7XhNVo58pMb7NOT4aHS5EeXl7nXCo8RK1y05fboU70VzZzhp5Xv+M6JJhLN/JdUGjr+81Xcc8OnlXQtYsz8JwSBsfXq3ySpN71MMTx3BZscwPt0/wjuIYO4s+/psUSHGUNreGjdzmNnD3YA1xrBl0BkQrl08YbRO803+CeaXs9ygHWaNfGPQhLMOmzXDj1bBuC7zwIjx+Fyz16+eYEdLkvL6x/tCgBYgx8vbo+ahJqKk1MKyEmeSabmDBztizTFdUlcvn4NZ+OkohHXXPrBbNqy3q5rUK9nl/9Py6eNDFWq5Q/VCfQ2gY47ngSdNr5N3LCwJ4myJuLj+n5e1MuTXfNkjwRKst95flykNiFr738sxKWimQCjXqIsQARQhc2VrirZ0TvKF1hquyRXIXvyF80ujn6TjF42Ga26oN3OvW0neZpEkMlNCa2GvD9+thBf6ajDWdWoyqiujGl0FEZOZh14Vww1WQl/DQ/fDUs/KMwknsII21s3EaZrgiMkffHSK/5eC9to6dKbGMe71aBIeyNm7SajhwAAAasUlEQVSS40KJOte+zdGDW3trlHRAJUTPlxfDq4NigTrcS/7myow/j45/2WqLN2RUQVT90EKRgpMImmJKMgcZS0XSalRDCxZKlnJeqF1RtjA+E6impGb9JrYMp5RoCeUuSoSxks/sxFtQQEQ2K+/CpcUyO3yfS8MSr/dnuNQv0SYyTfkVE2ffZfTxvOgm2edmeNJN81zVZX9/mhgcZZS8jxileGXUMXrLKWHFGtdGn+1Bw0gBub+KssHjMfQWpfjqldfDhefD8VckZvC0qsle9cZmpE70dVyiXc3S1sp4/oLITzlHpBTjtDUrLlgUXRkjSEuualFl7sO21s90MsYygJu5NdbKsL0s8hrd8MtFZ1vApGGAEVpEbm9N87qsq7reeJVll0vhxsm1MrD+WUn0Nivae9FnUplc3Rirv4wjdUCPaDiZV+I15Tw2jJYghJoCbkODqF19cl2u0I+vRTg5bGmNmBuP2Hr+mPNe7bHt2DKbihGj6Nk+O+L8mRGL81Lhar4qOLu+hS8jp6uCw60uh7Iur8QuJ2LBMdoQRX+qRnpAzc9vLWgtIESJzgVSA6UVOGGo16nJMasgcxgvSU3CTTvghuthzQQ8+TA8ule+m6HfR77vaAQs2ABUp7cS1XZFuNs53uQ9IzNCOmvEGKqGGvEfG04HVdesaXjmhTZGI51jhNzYedZ4d3ph8ySuJkT9vxXY0Y9HueOfO88dMbCbcc1hA7LoRVcaSI4r0Qkp9URYxiC1HtHkVvjaEMqsxWoUIyVCHX1shEdt4NhimFcBXQyz9FtaXaJU/TEF+rbgGC2W5loca8NHHpd60xUiVt7yI7AMfOEOmfzaLbD+cjj1gpRmi5lWwIoazZJriV9rs6dcYTQQQrbQLafzNAvYYvmM69sGWGXWFQQaJVW3aMFNV8KePXB8GT7/CTh6WG/19Vp5xYVNpbI4A6MF50nNQBU2e5rIjwEjA6U7kypytdBWqcEUdn+rA61C5jMew3Bc71eh88wTkTUmZMZAymNoyPemG9CCWJ3+P8jETmSeN4eKL/rIhQ4ImZY2a4kyG4PghOa7xJGisUOsdRSbTNSVCFEmRFHDARbMiVqHQsmNzbToEvuTqhPeCdiadUkRINUQWsq1XUcIZ1jBxPlweq8As4bFbTsf1m2C/beTrvZWIeRgKkWsDSgjIOMUXrl4qr6vnMFFElhduYYR4pVwYq1zWyqv0/Ub9cSVumUj7Pku2LQeDj4P99+relvjcJsOvoKwbe0aUi+1swOi4wUcb8ZzwiC0TJuGl5qLjq9TBVrqY/ZeILxhv2YqxiiCHrY8U51i7GsdETsYvjFIvSEpqjoJ+z3pl0IEhyj5x9FxJ45t3kNsizh2AZaWxHCwTc0KJTZfn0Y7CGWQDcNpdp+DkXbCdBXJTehNkTdR4BDDZ1xPIwXaqkgsOhBzIUBKTbF0YgBF5V7rL4TBaTiuNVoqHeCOPXD8LBx6WR/toLVOMLquFqBMQaehnlMcCwF4FWOjoXI7kzhKfJb3a1l2Ni+UQCtf67VEccXlFVxyGVxxLYyAB+6GF/fLc3MnotMOIZBYXaYHhKrBLe3wxLT/h7zjzREO2UEIXnzHduCqCK6Udc0mVDccw3JPDmiu8J5qD8nPnBWQJ6TbxIBaSE2tPLLy93R6VCzTWCTyZHQcCJ43OcfnixbbunOy+D1tlWDfNQLxfuU77MS3G9EhlbJ1jPh0QjY+E+2hkgNhbktvYfBOFyPTpHAvHCmojpprXT8kxJ3OrJTpPfBxfY5yoLmtsOUC2HeXen8QHLQzAaePSY2YFU1ujZiCcL9cRe14ROpf6BrEZnq3pybipksNK34UoRpIyeCJWdhzOVy6Cw6fgEduh3kzSFx9YBPzaHBCS+1wRgeNvzu571DmeROOA+mg657FTAJnx8odTQxXpUBGVinCmo7bWnhXZwbiIa8y3dRyFatuKosNAvSNwTql8GiYsFaTipkm63uey3Le0J3ldp+zc3leiCPzpB5uzRg5UwmSXodwtapUJdxErLK42CC+tOex/rvzDdESwWnh8RClmoQbQ1SjIWTgJiTaZ1QJMc7sgDNPSA1oE40Aey6V0PkvvVi/t7tB7oljCJMkLM8OuelOWQaM1bqMrAD6zVhD18LEmN3vUG4pS81gSXzxF2yHa64VKOypx2DfA7rOrmZqTc+XoT++Mba0frqGjd6SB2LkH0U4aFws6adeC2l56HbkEEegvwR+LAZl1tJnBUUuUENUiz9VKvnyHGpszrhi40QmejQdxwjAlFgDwFV8OuWqDonyba/loG/z+uESn6NktxWB9I2FNlM+ReWUtV8S0z1cY3Maeius1FttE20DPKIDtls1Z7Q+c5UCx1kuIibL61zcyU2ycEcfrKcfgHUbYceF8OTjsNyv3zMxJ8RlIU5Z1JApxUVjE3Qf1Xqhge3NagvR19wjRoha4s2kVRxKfGZ3QmCZyy+TCJc7Pw2vHKzXxCJjjBA9NXc0LNLGbxttZemUOJ8B3uTgSPqK3m/BEEVL1s6h0kX1fjdBMsacqlhRkZCWGpjNuup5gjUUKkmiQTc3nRBXl5pIrF0V8ZjJZuttghcVIq6yLgz7HHEVb/Cej0fH643oMyVCoG4ko/7lFHQRayA1a3AHW2y7FztQmcylVMs5b4nvM6BYpcIjsZT3ZR6KCfleVQEd8OpyPHyHQjmu3rgLL4F+CS+9oO/UtWjNiDHjlQNEFbuhlJPvFGaptO0sapQk9cbmGqiTyBTEL6uaC1aL0FuGNXNwww2wayscOAD33iMhcxm1CG86BqBWZRIeHut9NsPTDEXgbuBtEU4lilXiMwSg0xFDJQRhHB5w7QZIDanXs/fUTSR1r6JO1QXIg54coii0SUwoZwxKME1s0bheREQalpmX6SlUwDpOiBUXBlA5TgXPDxaePy1yfsIIqApKNCNq92LVUKBRrMzVeqOtSzrFygEr46geKZGWQdYW4huP680JQ612mgkRtrSClc8hdmByI/RehNMvNDY2wtQMbNsBXzoIZ0/Xm9qZFuW8f6rGN5uVE1K421B/Ini15qOJQNPfzK1pKEAUT4hDRHGopLTH1ddJEt59d8N+NUgyE5mBFc6GqARmiWuxsWZmuJRO1kN11r/0jn8VYBj8SmMPJ77qfEJopVRjK2+ROhFkiKqXYh4b42jWWrdpW0HYug5evR4J8HSuTpi2rxl+mBl8YwutLLE1IT/DgYiRTI0DPMM88s5Q8mJV8WuVdnctSyRCxIjeOJ5y5NUN3E1MWpk07zX0qyV/NNA0Zg3xqJtgfmbDt/K2HoRcajmHSeGMr2qCUNDDGYGtO8Qg+dLBxmFA8nKcF6in0xaOlzBL5G9lpUaabk6AhAOa7pXcYqHeRO9kzL1FAY13XwVX7JKD8IXb4bQGoucOykz2LcWMmohV/TpxyqaaYxxRNj86z3/28D75jQT6hyhSrtWWw1Iq47D6l5Vm6xlcZs0+LV/eJIcxEqOlyqRGKkmh3M/q1kWFTZLf0fQuFR9B/2YFOc2SLrri3iv1tPmuDCoG2aBxRQwVv15W7PWe/xNhpnliktjXhYxGDA1CtAU0kVPppmeFKb3K8agPUKUGgouiRuRaWDKqfChaMC5gahJO7JUw+YS7BegWsGsHHDoKJzR71UTcxEYVg8qNEjdrzKUqxbI0w9DmleZn66icNCho3+9B6MOmbXD5TXD+NDz3GNy/V33nujfBdPaVrxUXm2ZdmuMgGYSOVC+7gAXgpyPcXDVUH/NjZ21ZMxDIycfGc5QAiaR6h7Y2ti7GsLzO1w5ApZFReapPZzpiU29xKxfUwqiMzSelUE9y1pFuQ2RAX09KA7BtEheOm2Pkxhj5GI49UIuJSp9tRJnEV4MaV3PyTlvD0KP0HcaJmAxjOb1Uukjqo46qSzqvnNRDPivNzReeqV9nRtCuzVJ48pGH1D1HfaonZmuRVAaSgZAMPPV1+6reIedUhFXie68yyMwgyWTdB/PQyqRx+9WXQ6sHd34WXlRrPVcioaFeJRTBRL0So8ElKyAykph8ysGPAc9GJ8/KXb1XRUvQBKsc5z1YFae0NVlDAuhaNNW5FS+lAa1pK428CUonrmSsuzmxJnSS1Q9MQHdbcDeAwSK4kYiilDNrLLlqDNTznHPcGCK/7zL+rRkmTgncTlHyTMTEfNNGZ3ktikOQyOMQodOSA1CaKFaO6duqM1X6exeKKPpNUcCRh4WbZ/ruSg/e5gvhzDKc/VJzF4W7uinxGhhAb5zPRXFlWnH01KU1r9cuQ2EW0+u84HKDHmyYgquuFnjmlSPw4J1SAg7UKwPJJeiUIBMOqFezrHTaZ/03ApnnTyK8p4z0zCC17vOZFwLMi8Sfkrg3ZCXEmiEYCG9Xyi+CFPTidW9NL0yli9ONgQTLGAGkB+roE6E2BhOVqjtTouz2tOmLEbQvVnKW5kD1mT0CPx8jt1bwQefZ0PRvJ6KL9WCcX4lFEcUYGSvhtzpy4kqN6HE6RqcYYnQSTJtNiIoxGklN7/knhSPa2CxbbctW2LAD9j8Jo1XZBhNrgC4MT+t7zEiJpCq5LpKQADMkon2nsa7jTDC4fAQXXQDffQVMdOHBB2Hfw/Is0/8M67M6g69hJlnNXW3903flOyec52dxfCIxE6saG+WAF22S6zbGGjWRgZBcp96eX67eYPndKx1YzgpIDoszdKOE3CAaE7fNoFL7vynWKBFGU7504kVXrKZxX/SwTIm06bNOIGlRwy0W6Kmv+YRzXOk8/zPCjzfdifYe00O9E6UZlPg06LUstWpFUJjELOWWiN9K4xZbk5BNKXcaQLFOsgxP76vHFR0pVHnT+TCKcFy5oYVOEbXHSCSB+qU6BlyoFz1CSp20DxL38MKNy0r870UXrtoNN10srrFbbofDB3Xz9DkGJruG2tIUx9YZlrxWibx+SfXRjwC/iOcYTsZS6P7HiHQNUMKx4lhGE8Zxg0pGpw4RNxZ1x1KCvZeABos/NAjMSpkQRFoENezyNOiGCDQuZMClEUATPikVS2p1JGlprEUb86x+3upMLSPkFHhAzaG0FuKrzvF24G04/pDIeQ1CBS/i1MSw4Y4eUg5L5kQfiyoScy1rUap+1uqKRR8qiEOJ3ml14dW7VdSZ3hPl96k1sG2rRK6cOm6ngjpARPNsQqjDn2zxjRtb7emgz8+UmEIGsYCqB4NlmNsI11wDW+dg/3Pw8L3Q69cSauzqg2Dw2Zcz8sxv7LP6XifDOIzjF53n47bHTsUxzX3Q9TVaSAW2GpLKwvQssirmGtiSqFYPoHrGMmVshdLVWIsyWfJUbqWCTX9JyqWrLR+T8SnqGYVuChHJRCkH4iJ1NLUSQpPlmfLqVbTGSKrhnHQZYf0fd5Ev4HkvkX/nIq2ikBMYkFM1HtSLbfGGuc7SKghkLRljpd6NVkt0wiqSesSt3Qhnn5eCQjZGla6AVMWfmoFnnm4QVhQRXAHZGmoDJKwkPGuGg8ZGWmRRGWXjcBIUXHjYfSlcdzm0PNx1Nzxv2KAhB7rwJmZNJKZ9b3BCa8pkm+U9YwL/w3ne7xzz0ZG6zdqcLRre9DrrMhaMwBtc2Pz1KJFWUdYiOFVHLGFK551H+Vul40+heHrofaY6orFOi8q1370nOcrtdJg4cLlgat7JqTXRXjVYeeNwYBad9fgwLmcLbd4WOwzAvINfiY7/XbT5PZ/xFiO4yoJejbip319WMuGW9oIzF5svwE2IRW4tHTproFqG44/U5yWY2A1CFJvOg6ONKJsEZ+j4O5OkzlwmylOLYGT9KhXFmXLJkMu4hn3pa7d7N1yyExaOw9474LCmc1qYlMtqjpepiGtGRpkKZFezp3aI3DYO/LJ3PGXRLkZMCXBWIotKuKYLWmBLknKZ6I4OIbjSYCqNlTQHRepWptBRaKhxuHrtbD5VG/LXOLz1hmbFUAOZnW6S8yLO8kJA66AvbOZSWMR0pNYZzWIyZdpq7xnIiz7b2FEmkdhPxcBb+wPeTMVvZY4bU4NJV4sNh4pfJULv6jyWrBAdMebCyWKQ/6+dgIN3yPeaOb9mhG3cDrOb4cB+casZsTbFoc9JQavGTSrFEg1WWRFgjKgxVHDBFrjqcli3Bp59Ah64Tw5I8pDUhkUiOKjf09w7UwdUBAPsBX7dZXzW7rUUDJM81pgphZ5lulaNvfdFzWkNvrPEJ9Mfs1A/z+ggVuBaAksF1Re9SSIleFdBKAT2a7TsqUWAa8p6HbwFSVoecqsrGzgeCexhhZaSF8TVeuUKPUWJ0Ws7tNBIoDcukqlFHLR+SiVusc86+JtQ8SNlxfuBq5sWp/nHLf/DQu7JZEG8gddj0U/W7RQX3sJxPZVeJu8h4YC7tkI2gBMW2WxEoYuZZ0Lg5RgyCz0bg1cvUenq6JKgkM5wQTw4l10MF18FSyXc8zl4QX3XmVdXpRmLWU3oxo2bUIoZg0mEwmPB8d7o+JSH6PXAUxOo3OOorWSnpVqUeVhHsRB1X02C2Twae+sbv2euNkyLjop6ZSohaqiYEmEZpC1G5mHx8GpCNPHpaqpFicfYNrkkT1MJgfjGyU1uKrWclMkk3QJUyW0pd7V6NsZN8hoXtA6X1UgWQL8Xq4pPAp/ynh9yjl8G3mgWftGqN910j1jIwXFOdMVRBbMbIRvC4Uc1kEDZiIs1J5rbCJs2SUP1UycbG2lcKIrl7bsQz1J7F+wAqP5rbsjRUCKo16+Hi3fDzi1w4iDc9ZC0mLVDkzopxIZKw0r1JXUSjTVhEfkCjt/zjlsjRFT3N27njRmoQRcLiC1Va6DOBddDEFXft6JX5tY1DNnr/Iw+TK8u1MdvbdUshM+gqqol+zzVgTiEs4ckWCTHJtkkSBu0nRgVlxEJp8oLSZxHLWdoECC1UWO6m8m0qGIyUw6aIA0vHCsv5L5qRB210diQBgwUs4xbQuCWGLk+z/mlouAd4zFt58SDYO+1xasCuLF0YZ+chYO3QRyTwFsDZU1FWLcFBjNw9Gm1zHWxkysPsb5pqUrgNOfFiCQokO1geVk45YU74JKrpaPC/odg3155l4L7idV5JUQLemgSHY31dDCMkQ87x3/H8TB6qH0ue5cy9LzqeXn9TA8SQR7rvbHv+qJeP3tt6jRBnZhmHNugLNP/YxD1owwiflEVILS16VMHhidg4ajel4lBI9af6SBNPU5XKfXabUnD6HKgG5uv1H9AiCXLdCGbOkwmJyFpqrF+T94mOefHQ2Ckoq0mvBVwRdPb0m7zcOb5qVDx7jznp7zjZ6Pjigo5jUWudoSOZe0GOPE4LKqVHNCxUtsbk13YtFFyrY8ZZEO9YUa0LYWSxg1l3TIHoxfjcbAgbroLr4Tdl0ij7nvvhFdeIlGheSeMxmKDCBNorQdErdUngA/i+HPnOJ0YQKZ6oDIQl9XpFQ49KMoVfZDUAlCOpt/zariYegA1XRgOaBLHjBmLV8iok8MMw/XIs6tZmFkHLMP8y1Kw0+nBilEJEV04OwXJc4KKG9UTWxNqhpcN5Vv/bXJD02UMeLWQ8mRZq5ch14WLiJ5VDXVSqmvY81c0J3S18WQRwKo0nybygXHFB8rADRH+RV7wDtdlOxmEZZjeDuUpeHVfoispMqQ04ZEN2HQhbF4PB1+Cs6fqzTJOYlwiawn0Yj3uokbXVJnk1YQebJmFC3bA+o3yvEfulBB6h+pQzTVE1sk4TDIOgczzcoQPE/gr53gI3WDrNJ9pKH5mY3UrD23an8Ye2WUiO+GCI1bGnTb219Qgi5W0PScoYjFWeEoPZJiC6Y1iUwyOCRFWjUNnpenyBGiuIizD9QyNyTXEajSqN7F5GdtOnhkV6c7Qd1//oOLDsKqyVCJU7NFOnlv9Eh2X90icIbLhLgAa3aKc4yE8D7mCX6XFd496/NPODG/pdrjmxXuUoXmx9gzvcxHGyt2n1olBc/JoY01MhNlAokoEp5a/Wv8hStXV3MPFG+CynQJP7L8Xnn1M5+DAurmlFFHltmltM2KWsS9W3AZ80jnuT/Sgh9HruuaK/5kESv79WEusRPANyWdWtvM1jNbMJkxSUbke+vcUa2kMS/cvqIvPB9EF2+tEAoUBnHoK+gsNTc/XB6Q7CTmVLKhTdN1wwsoIy4OFSUWtSZNOhW2QrtCKnBddKHuzhZQFJz7MGJQLalyb1/stzKx5JQXaizXmXS0iYhClNwRS2mmmakTeIsaK+2KL+zZs49cOfIbNvbO8xcEPAN9TZVziK7nP/MJzc9JZ8/hZOPqqvt/E8WplOtOkcq/utwEsB1g3CTs3wY7zJW7woS/CSbW8MzUQcuX0sUkY8JyL3JfDF6Pnthg5ZuqLhYqZHpaqYSAHIZh+psNM+psSlRkulU0ja0BfptPHemqhQcAmBWJVf8eM2qoSZpCpTjzIoTsjNXacg4UvwelXGmvman3bAP49V0GeNdD0pCMqga3265pSngZuXzcx7utTaZEk1vQnKvfIkZMzLiHVoKlqMVIpl8o0rjAZKHoYcsXtqrLBiWyB9CD4XPzJeQYLQzjvUjj1NJx6iWMZ/Gnl+FMvC78hwuupuLqCK4Gr57awc3IKf+iAhJM5qPuVOKlIYJIi9Rx2gjOOh3D+RrhoJ2xZA8+8BHvvFFFnGJ1CHSHLOOAjjxHYDzwWInfnjhPmpbB1TWupRJg3LGaLdraNsDPijKgaojMxdVc/19SiRIDGAMzwUEIrq/p5JsZxohuXxshykZqbNkGchOUjMP+SwHuedNCSA8JCxq68FhaHpIZOaSLO1+LYe7VAM9l479Vp7eoBJ4XW11w1ota0EmGuiUsxiKFTmrVmFpUStrF8i/yuQo1p5RqmVapnxUBPK6UX0JOv4HWWwbCEtdshnBbgGkgR0Tr2E8HxMQ8fi1Gev2aOif6ACxdPswPY6R07gA0B5lxkzjvmxrCWiMs8LWCyPw8+snzRLka7thPdmDP33MupF57gFHCqVXAieA4GzwEfORjhpSqw7A0KcaSMu6B6tZV5lo0gUVK0mEaX5rAiCicRpT4v5loRzMtjstggPn1H1dhDT03otk8GW+VFrZ+XQbBTciimBYnwhaSGLD8NvYXG0F2tIjhXv+/CSyCbgOcfgP8HQMMxkCbLKuUAAAAASUVORK5CYII=, C:\Users\84407\AppData\Local\Temp\tomcat-docbase.3215507227084215707.8080\upload, png], attachments={path=com.tyut.user.service.UserService, interface=com.tyut.user.service.UserService, version=2.0.0}]], channel: /192.168.27.1:57712 -> /192.168.27.1:20880] with root cause
com.alibaba.dubbo.remoting.TimeoutException: Waiting server-side response timeout. start time: 2018-08-31 19:34:59.333, end time: 2018-08-31 19:35:00.337, client elapsed: 2 ms, server elapsed: 1002 ms, timeout: 1000 ms, request: Request [id=2, version=2.0.0, twoway=true, event=false, broken=false, data=RpcInvocation [methodName=uploadFile, parameterTypes=[class java.lang.String, class java.lang.String, class java.lang.String, class java.lang.String], arguments=[15235951681, , C:\Users\84407\AppData\Local\Temp\tomcat-docbase.3215507227084215707.8080\upload, png], attachments={path=com.tyut.user.service.UserService, interface=com.tyut.user.service.UserService, version=2.0.0}]], channel: /192.168.27.1:57712 -> /192.168.27.1:20880
	at com.alibaba.dubbo.remoting.exchange.support.DefaultFuture.get(DefaultFuture.java:134)
	at com.alibaba.dubbo.remoting.exchange.support.DefaultFuture.get(DefaultFuture.java:111)
	at com.alibaba.dubbo.rpc.protocol.dubbo.DubboInvoker.doInvoke(DubboInvoker.java:95)
	at com.alibaba.dubbo.rpc.protocol.AbstractInvoker.invoke(AbstractInvoker.java:142)
	at com.alibaba.dubbo.rpc.listener.ListenerInvokerWrapper.invoke(ListenerInvokerWrapper.java:73)
	at com.alibaba.dubbo.monitor.support.MonitorFilter.invoke(MonitorFilter.java:74)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.protocol.dubbo.filter.FutureFilter.invoke(FutureFilter.java:53)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.filter.ConsumerContextFilter.invoke(ConsumerContextFilter.java:47)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.protocol.InvokerWrapper.invoke(InvokerWrapper.java:52)
	at com.alibaba.dubbo.rpc.cluster.support.FailoverClusterInvoker.doInvoke(FailoverClusterInvoker.java:77)
	at com.alibaba.dubbo.rpc.cluster.support.AbstractClusterInvoker.invoke(AbstractClusterInvoker.java:232)
	at com.alibaba.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker.invoke(MockClusterInvoker.java:70)
	at com.alibaba.dubbo.rpc.proxy.InvokerInvocationHandler.invoke(InvokerInvocationHandler.java:51)
	at com.alibaba.dubbo.common.bytecode.proxy3.uploadFile(proxy3.java)
	at com.tyut.web.controller.UserController.uploadCertificate(UserController.java:85)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:133)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:97)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:872)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:317)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:114)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationProcessingFilter.doFilter(OAuth2AuthenticationProcessingFilter.java:176)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:64)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:214)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:177)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:347)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:263)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:108)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:478)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1459)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2018-08-31 19:35:46,469  Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is com.alibaba.dubbo.rpc.RpcException: Failed to invoke the method uploadFile in the service com.tyut.user.service.UserService. Tried 3 times of the providers [192.168.27.1:20880] (1/1) from the registry 47.104.209.96:2181 on the consumer 192.168.27.1 using the dubbo version 2.0.1. Last error is: Invoke remote method timeout. method: uploadFile, provider: dubbo://192.168.27.1:20880/com.tyut.user.service.UserService?anyhost=true&application=web-server&check=false&dubbo=2.0.1&generic=false&interface=com.tyut.user.service.UserService&methods=uploadFile,findPasswd,isValid,update,insert,selectById,isExistPhone,selectPasswdByPhone,updatePasswd,uploadPortrait,selectMe,selectPasswdByEmail,isExistEmail&pid=26296&register.ip=192.168.27.1&remote.timestamp=1535715236271&revision=2.0.0&side=consumer&timestamp=1535715279887&version=2.0.0, cause: Waiting server-side response timeout. start time: 2018-08-31 19:35:45.458, end time: 2018-08-31 19:35:46.468, client elapsed: 8 ms, server elapsed: 1002 ms, timeout: 1000 ms, request: Request [id=5, version=2.0.0, twoway=true, event=false, broken=false, data=RpcInvocation [methodName=uploadFile, parameterTypes=[class java.lang.String, class java.lang.String, class java.lang.String, class java.lang.String], arguments=[15235951681, , C:\Users\84407\AppData\Local\Temp\tomcat-docbase.3215507227084215707.8080\upload, png], attachments={path=com.tyut.user.service.UserService, interface=com.tyut.user.service.UserService, version=2.0.0}]], channel: /192.168.27.1:57712 -> /192.168.27.1:20880] with root cause
com.alibaba.dubbo.remoting.TimeoutException: Waiting server-side response timeout. start time: 2018-08-31 19:35:45.458, end time: 2018-08-31 19:35:46.468, client elapsed: 8 ms, server elapsed: 1002 ms, timeout: 1000 ms, request: Request [id=5, version=2.0.0, twoway=true, event=false, broken=false, data=RpcInvocation [methodName=uploadFile, parameterTypes=[class java.lang.String, class java.lang.String, class java.lang.String, class java.lang.String], arguments=[15235951681, , C:\Users\84407\AppData\Local\Temp\tomcat-docbase.3215507227084215707.8080\upload, png], attachments={path=com.tyut.user.service.UserService, interface=com.tyut.user.service.UserService, version=2.0.0}]], channel: /192.168.27.1:57712 -> /192.168.27.1:20880
	at com.alibaba.dubbo.remoting.exchange.support.DefaultFuture.get(DefaultFuture.java:134)
	at com.alibaba.dubbo.remoting.exchange.support.DefaultFuture.get(DefaultFuture.java:111)
	at com.alibaba.dubbo.rpc.protocol.dubbo.DubboInvoker.doInvoke(DubboInvoker.java:95)
	at com.alibaba.dubbo.rpc.protocol.AbstractInvoker.invoke(AbstractInvoker.java:142)
	at com.alibaba.dubbo.rpc.listener.ListenerInvokerWrapper.invoke(ListenerInvokerWrapper.java:73)
	at com.alibaba.dubbo.monitor.support.MonitorFilter.invoke(MonitorFilter.java:74)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.protocol.dubbo.filter.FutureFilter.invoke(FutureFilter.java:53)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.filter.ConsumerContextFilter.invoke(ConsumerContextFilter.java:47)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68)
	at com.alibaba.dubbo.rpc.protocol.InvokerWrapper.invoke(InvokerWrapper.java:52)
	at com.alibaba.dubbo.rpc.cluster.support.FailoverClusterInvoker.doInvoke(FailoverClusterInvoker.java:77)
	at com.alibaba.dubbo.rpc.cluster.support.AbstractClusterInvoker.invoke(AbstractClusterInvoker.java:232)
	at com.alibaba.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker.invoke(MockClusterInvoker.java:70)
	at com.alibaba.dubbo.rpc.proxy.InvokerInvocationHandler.invoke(InvokerInvocationHandler.java:51)
	at com.alibaba.dubbo.common.bytecode.proxy3.uploadFile(proxy3.java)
	at com.tyut.web.controller.UserController.uploadCertificate(UserController.java:85)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:133)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:97)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:872)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:317)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:114)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationProcessingFilter.doFilter(OAuth2AuthenticationProcessingFilter.java:176)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:64)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:214)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:177)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:347)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:263)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:108)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:478)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1459)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
